var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AboutPage.html",[0,1.083,1,1.831]],["body/components/AboutPage.html",[0,1.985,1,3.289,2,2.355,3,0.052,4,0.052,5,1.433,6,1.609,7,1.609,8,1.649,9,0.041,10,3.304,11,0.565,12,5.44,13,2.245,14,2.414,15,5.087,16,4.83,17,5.087,18,3.907,19,2.542,20,2.939,21,2.267,22,2.223,23,0.849,24,4.014,25,1.433,26,3.988,27,3.389,28,2.414,29,6.434,30,2.414,31,5.44,32,0.259,33,1.181,34,3.954,35,1.582,36,2.419,37,2.482,38,1.159,39,3.716,40,2.145,41,2.145,42,0.806,43,0.007,44,0.704,45,0.244,46,0.764,47,3.144,48,2.299,49,3.71,50,1.887,51,3.037,52,3.71,53,3.716,54,2.764,55,2.848,56,3.262,57,4.837,58,0.328,59,1.372,60,0.121,61,1.343,62,0.244,63,1.534,64,1.784,65,2.148,66,0.052,67,0.202,68,0.386,69,1.736,70,1.343,71,2.148,72,2.419,73,5.44,74,4.307,75,7.082,76,7.082,77,7.082,78,8.342,79,8.342,80,8.342,81,7.082,82,5.44,83,5.44,84,5.44,85,5.44,86,5.44,87,5.44,88,5.44,89,5.44,90,7.082,91,7.082,92,7.082,93,8.135,94,3.007,95,3.476,96,3.708,97,4.728,98,4.397,99,4.552,100,2.419,101,1.269,102,3.708,103,3.716,104,2.764,105,2.419,106,4.094,107,1.856,108,5.44,109,1.776,110,0.625,111,2.669,112,2.831,113,2.534,114,2.318,115,4.133,116,1.961,117,3.716,118,5.722,119,3.716,120,3.72,121,2.534,122,3.394,123,3.907,124,5.44,125,4.189,126,3.033,127,3.585,128,2.075,129,3.304,130,6.434,131,4.209,132,3.593,133,1.08,134,3.476,135,3.476,136,3.716,137,3.541,138,3.304,139,2.831,140,3.716,141,3.144,142,2.534,143,2.534,144,3.033,145,4.001,146,5.992,147,4.014,148,2.148,149,2.148,150,3.037,151,3.262,152,2.148,153,2.229,154,2.669,155,2.669,156,4.611,157,3.037,158,1.003,159,2.669,160,3.262,161,3.033,162,3.716,163,3.304,164,3.716,165,2.542,166,3.716,167,2.611,168,3.716,169,3.716,170,2.229,171,2.318,172,3.716,173,2.419,174,2.419,175,1.238,176,2.414,177,2.355,178,1.465,179,3.066,180,1.649,181,1.649,182,1.499,183,1.812,184,2.414,185,1.465,186,1.649,187,1.499,188,1.649,189,1.499,190,1.649,191,1.499,192,1.649,193,1.465,194,1.649,195,1.499,196,1.609,197,1.649,198,1.499,199,1.433,200,1.649,201,1.465,202,1.649,203,1.499,204,1.649,205,1.499,206,1.649,207,1.465,208,1.649,209,1.465,210,1.649,211,1.465,212,1.649,213,1.465,214,1.649,215,1.465,216,1.649,217,1.499,218,1.499,219,1.534,220,1.465,221,1.649,222,1.433,223,1.609,224,1.649,225,0.004,226,0.004]],["title/modules/AboutPageModule.html",[227,1.402,228,3.537]],["body/modules/AboutPageModule.html",[1,3.703,3,0.096,4,0.096,9,0.076,43,0.007,60,0.178,62,0.45,66,0.096,67,0.372,175,2.28,225,0.006,226,0.006,227,2.068,228,7.29,229,2.528,230,3.116,231,4.577,232,3.584,233,3.379,234,2.64,235,6.087,236,6.087,237,6.087,238,6.746,239,4.28,240,3.584,241,2.964,242,6.846,243,3.153,244,3.224,245,4.565,246,3.698,247,4.565,248,3.116,249,4.28,250,2.64,251,3.822,252,6.087,253,3.698,254,2.528,255,2.583,256,3.822]],["title/modules/AboutPageRoutingModule.html",[227,1.402,238,3.335]],["body/modules/AboutPageRoutingModule.html",[0,1.694,1,3.339,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,225,0.006,226,0.006,229,2.683,234,2.801,238,6.081,243,2.801,244,3.339,252,6.459,257,7.264,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056]],["title/components/AdminFormularyComponent.html",[0,1.083,182,1.873]],["body/components/AdminFormularyComponent.html",[0,1.635,1,1.433,2,2.318,3,0.051,4,0.051,5,1.402,6,1.574,7,1.574,8,1.613,9,0.04,11,0.378,23,0.836,24,3.963,25,1.402,26,3.978,27,3.38,28,2.376,30,2.376,32,0.253,33,1.162,34,3.913,35,1.556,38,1.834,40,2.111,42,0.789,43,0.007,44,0.696,45,0.418,46,0.747,48,2.262,54,2.719,55,2.802,58,0.659,59,2.346,60,0.131,62,0.239,66,0.051,67,0.198,68,0.556,70,1.935,74,3.958,94,1.699,95,1.964,96,3.326,97,4.23,98,3.547,99,2.101,102,2.802,104,1.847,105,2.366,106,2.101,107,1.564,109,0.912,113,3.651,115,1.847,116,0.946,121,2.479,122,3.339,127,2.892,128,2.988,131,3.878,132,2.03,133,1.057,134,2.892,135,2.892,145,3.561,147,2.268,148,2.101,149,2.101,150,2.03,151,2.18,152,2.101,153,2.18,159,2.611,165,1.699,170,3.81,171,2.268,173,2.366,174,2.366,175,1.211,176,2.376,177,2.318,178,1.433,179,3.034,180,1.613,181,1.613,182,3.152,183,2.818,184,2.376,185,1.433,186,1.613,187,1.466,188,1.613,189,1.466,190,1.613,191,1.466,192,1.613,193,1.433,194,1.613,195,1.466,196,1.574,197,1.613,198,1.466,199,1.402,200,1.613,201,1.433,202,1.613,203,1.466,204,1.613,205,1.466,206,1.613,207,1.433,208,1.613,209,1.433,210,1.613,211,1.433,212,1.613,213,1.433,214,1.613,215,1.433,216,1.613,217,1.466,218,1.466,219,1.501,220,1.433,221,1.613,222,1.402,223,1.574,224,1.613,225,0.004,226,0.004,248,1.655,250,1.402,262,1.235,265,7.122,266,6.647,267,3.232,268,5.095,269,5.649,270,4.76,271,0.759,272,3.136,273,5.691,274,6.232,275,6.232,276,2.802,277,1.038,278,4.077,279,1.607,280,2.825,281,3.857,282,2.967,283,6.154,284,5.649,285,5.365,286,5.352,287,4.369,288,4.369,289,3.651,290,5.954,291,6.078,292,4.077,293,5.352,294,4.369,295,4.077,296,6.062,297,1.367,298,3.635,299,3.635,300,4.369,301,7.008,302,6.232,303,3.485,304,3.651,305,4.369,306,4.369,307,1.098,308,3.635,309,4.077,310,3.635,311,3.786,312,4.84,313,4.369,314,4.369,315,4.036,316,3.635,317,3.651,318,4.077,319,4.84,320,3.232,321,3.635,322,5.952,323,3.232,324,3.635,325,3.635,326,3.635,327,0.789,328,3.232,329,1.903,330,1.204,331,3.635,332,3.232,333,3.232,334,3.232,335,3.232,336,3.232,337,5.649,338,4.76,339,3.232,340,3.232,341,3.232,342,3.232,343,3.232,344,3.232,345,3.232,346,3.635,347,3.232,348,3.232,349,3.232,350,3.635,351,3.635,352,3.635,353,3.635,354,1.136,355,3.232,356,3.232,357,3.232,358,3.635,359,5.352,360,4.76,361,4.76,362,4.76,363,6.232,364,2.802,365,2.366,366,3.094,367,2.988,368,3.988,369,2.769,370,2.611,371,2.611,372,1.847,373,2.479,374,2.18,375,3.913,376,4.369,377,4.333,378,3.326,379,4.369,380,2.967,381,3.81,382,2.967,383,1.847,384,2.479,385,3.911,386,2.967,387,2.967,388,2.611,389,2.769,390,3.232,391,2.967,392,3.21,393,4.76,394,3.232,395,4.76,396,4.76,397,3.232,398,2.769,399,3.232,400,2.769,401,2.101,402,3.651,403,3.339,404,4.76,405,3.232,406,2.967,407,2.967,408,2.268,409,2.479,410,3.232,411,3.232,412,4.369,413,2.03,414,2.479,415,2.967,416,3.232,417,2.769,418,2.769,419,2.967,420,2.479,421,2.967,422,2.967,423,3.232,424,2.967]],["title/components/AdminPanelPage.html",[0,1.083,185,1.831]],["body/components/AdminPanelPage.html",[0,1.747,1,1.043,2,1.817,3,0.074,4,0.037,5,1.02,6,1.146,7,1.146,8,1.174,9,0.066,11,0.751,13,2.844,21,1.344,22,2.352,25,1.02,26,3.818,27,3.232,28,1.863,30,1.863,32,0.184,33,0.911,35,1.22,36,1.723,37,2.012,38,1.799,40,1.655,41,1.655,42,1.567,43,0.007,44,0.785,45,0.54,46,1.485,47,2.426,50,1.456,51,2.343,52,2.863,54,2.133,56,2.517,58,0.698,59,2.667,60,0.154,61,0.957,62,0.174,63,1.092,64,1.27,65,1.53,66,0.037,67,0.144,68,0.838,69,1.236,70,3.144,71,1.53,72,1.723,74,4.114,94,2.438,95,2.818,96,2.198,98,3.315,104,1.344,106,1.53,107,1.034,109,0.664,113,1.805,115,2.133,116,0.688,120,1.53,127,2.703,128,1.477,131,2.015,132,1.477,134,3.208,135,1.429,137,2.732,145,3.017,150,1.477,151,2.517,154,3.015,155,1.9,156,3.396,157,4.183,160,1.587,161,2.16,165,3.026,175,0.881,176,1.863,177,2.571,178,1.043,179,2.984,180,1.174,181,1.174,182,2.612,183,2.57,184,1.863,185,2.954,186,1.174,187,1.067,188,1.174,189,1.067,190,1.174,191,1.067,192,1.174,193,1.043,194,1.174,195,1.067,196,1.146,197,1.174,198,1.067,199,1.02,200,1.174,201,1.043,202,1.174,203,1.067,204,1.174,205,1.067,206,1.174,207,1.043,208,1.174,209,1.043,210,1.174,211,1.043,212,1.174,213,1.043,214,1.174,215,1.043,216,1.174,217,1.067,218,1.067,219,1.092,220,1.043,221,1.174,222,1.02,223,1.146,224,1.174,225,0.003,226,0.003,250,1.02,254,0.977,255,0.998,262,2.342,265,2.16,266,2.016,271,0.595,272,2.575,277,1.219,283,5.707,291,5.381,297,2.096,306,3.426,307,0.867,327,0.574,328,5.28,354,0.68,362,3.732,364,2.198,365,1.723,374,1.587,381,2.517,425,6.501,426,6.129,427,2.353,428,3.732,429,4.197,430,4.265,431,3.197,432,3.015,433,4.197,434,5.118,435,3.197,436,3.426,437,4.197,438,4.265,439,5.217,440,4.197,441,5.217,442,1.738,443,5.217,444,3.015,445,5.938,446,4.197,447,4.197,448,4.05,449,4.197,450,5.938,451,3.732,452,2.913,453,3.732,454,3.255,455,2.818,456,3.109,457,4.04,458,3.016,459,4.197,460,4.524,461,1.847,462,4.197,463,2.517,464,3.197,465,3.732,466,3.426,467,3.197,468,3.732,469,2.863,470,3.866,471,4.265,472,4.197,473,2.646,474,2.343,475,1.075,476,3.426,477,2.198,478,2.646,479,3.426,480,1.136,481,3.197,482,2.863,483,2.818,484,4.197,485,2.646,486,2.863,487,6.127,488,2.198,489,4.197,490,0.654,491,6.887,492,2.646,493,1.398,494,6.127,495,6.475,496,1.54,497,4.197,498,1.133,499,2.646,500,4.663,501,2.863,502,3.732,503,2.732,504,2.619,505,3.22,506,5.381,507,4.847,508,4.197,509,4.639,510,2.646,511,5.28,512,5.758,513,3.732,514,4.197,515,2.553,516,3.426,517,4.197,518,3.426,519,3.426,520,2.646,521,4.197,522,2.426,523,3.732,524,5.28,525,2.646,526,2.517,527,2.268,528,4.258,529,3.732,530,2.646,531,2.646,532,3.426,533,1.072,534,2.426,535,4.197,536,4.197,537,2.646,538,2.646,539,0.525,540,4.197,541,2.646,542,3.732,543,1.429,544,2.353,545,2.646,546,2.353,547,1.477,548,1.651,549,1.385,550,2.353,551,1.723,552,1.651,553,1.805,554,1.723,555,2.646,556,2.646,557,5.217,558,5.217,559,4.197,560,4.197,561,4.197,562,2.646,563,4.197,564,4.197,565,2.646,566,4.197,567,4.197,568,2.646,569,2.646,570,2.353,571,2.646,572,2.646,573,2.353,574,2.646,575,2.646,576,0.544,577,2.646,578,2.646,579,2.646,580,2.646,581,1.651,582,0.488,583,2.646,584,2.646,585,2.646,586,2.646,587,2.646,588,2.646,589,2.646,590,2.353,591,2.646,592,4.197,593,2.646,594,2.646,595,2.646,596,2.818,597,2.353,598,2.353,599,2.353,600,2.353,601,2.646,602,2.646,603,2.646,604,2.646,605,2.646,606,1.477,607,2.646,608,1.723,609,2.646,610,2.646,611,4.197,612,4.197,613,4.197,614,4.197,615,4.197,616,4.197,617,3.426,618,3.426,619,5.938,620,3.732,621,4.197,622,3.732,623,4.197,624,4.197,625,3.732,626,4.197,627,4.197,628,3.732,629,3.732,630,2.353,631,4.197,632,2.646,633,2.646,634,4.651,635,3.315,636,2.646,637,2.646,638,2.646,639,2.646,640,2.863,641,2.353,642,2.646,643,2.353,644,2.646,645,2.353,646,2.646,647,2.646]],["title/modules/AdminPanelPageModule.html",[227,1.402,648,3.537]],["body/modules/AdminPanelPageModule.html",[3,0.096,4,0.096,9,0.075,43,0.007,60,0.178,62,0.447,66,0.096,67,0.37,175,2.266,183,2.713,185,3.698,225,0.006,226,0.006,227,2.054,229,2.512,230,3.097,231,4.564,232,3.561,233,3.358,234,2.623,239,4.264,240,3.561,241,2.945,243,3.141,244,3.212,245,4.547,246,3.675,247,4.547,248,3.097,249,4.264,250,2.623,251,3.798,253,3.675,254,2.512,255,2.567,256,3.798,425,5.182,426,4.886,430,4.886,648,7.282,649,6.049,650,6.049,651,6.049,652,6.736,653,6.802,654,6.049]],["title/modules/AdminPanelPageRoutingModule.html",[227,1.402,652,3.335]],["body/modules/AdminPanelPageRoutingModule.html",[0,1.687,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.476,66,0.102,67,0.393,183,2.41,185,3.331,225,0.006,226,0.006,229,2.672,234,2.79,243,2.79,244,3.331,258,3.908,259,4.073,260,4.422,261,2.73,262,2.459,263,1.848,264,4.039,425,5.511,426,5.196,430,5.196,652,6.067,654,6.433]],["title/interfaces/AdvancedCrypto.html",[655,0.023,656,2.431]],["body/interfaces/AdvancedCrypto.html",[3,0.1,4,0.1,9,0.078,32,0.495,43,0.007,45,0.584,46,1.718,60,0.133,66,0.125,101,2.07,225,0.006,226,0.006,271,1.185,490,0.792,539,1.817,655,0.043,656,4.374,657,1.151,658,5.409,659,3.752,660,1.825,661,8.877,662,8.877,663,1.627,664,5.1,665,2.104,666,2.104,667,5.796,668,5.796,669,5.796,670,3.836,671,5.796,672,5.796]],["title/components/AppComponent.html",[0,1.083,187,1.873]],["body/components/AppComponent.html",[0,1.623,1,0.858,2,1.551,3,0.064,4,0.031,5,0.839,6,0.942,7,0.942,8,0.966,9,0.024,11,0.475,14,0.966,16,2.444,17,5.334,19,1.017,21,1.462,22,2.185,25,0.839,26,3.699,27,3.182,28,1.59,30,1.59,32,0.152,33,0.778,34,2.957,35,1.042,37,1.762,38,1.583,42,0.991,43,0.007,44,0.716,45,0.474,46,0.939,49,2.444,50,1.243,57,1.935,58,0.517,59,1.956,60,0.139,61,0.787,62,0.143,63,0.898,66,0.031,67,0.118,68,0.749,69,1.017,70,2.685,74,3.089,94,2.135,95,2.468,96,2.773,97,3.775,98,3.885,99,3.85,100,2.974,102,2.773,104,3.664,105,3.448,107,1.304,109,1.67,110,0.366,111,1.563,112,1.657,114,1.357,115,3.949,116,1.81,120,3.061,123,1.563,125,1.416,127,3.758,128,2,131,4.652,133,1.328,134,2.468,135,1.936,139,4.034,141,2.64,142,1.484,143,1.484,145,4.357,147,4.155,148,3.061,149,3.061,150,2,151,1.305,152,2.64,153,1.305,154,1.563,155,1.563,156,5.309,157,4.146,158,2.314,160,3.176,161,1.776,165,2.475,167,3.565,170,1.305,171,2.235,173,2.974,174,2.974,175,0.725,176,1.59,177,1.551,178,0.858,179,3.295,180,0.966,181,0.966,182,0.878,183,1.764,184,1.59,185,0.858,186,0.966,187,2.136,188,0.966,189,0.878,190,0.966,191,0.878,192,0.966,193,0.858,194,0.966,195,0.878,196,1.978,197,0.966,198,0.878,199,0.839,200,0.966,201,0.858,202,0.966,203,0.878,204,0.966,205,0.878,206,0.966,207,0.858,208,0.966,209,0.858,210,0.966,211,0.858,212,0.966,213,0.858,214,0.966,215,0.858,216,0.966,217,0.878,218,0.878,219,0.898,220,0.858,221,0.966,222,0.839,223,0.942,224,0.966,225,0.003,226,0.003,241,1.551,250,0.839,254,1.687,255,0.821,261,0.821,262,1.8,271,0.508,272,2.255,276,1.139,277,1.061,287,2.925,289,3.115,297,0.915,307,0.667,311,1.936,330,0.489,364,1.876,365,1.416,366,2.64,367,3.269,368,4.025,372,3.773,374,1.305,375,2.55,378,3.298,381,3.176,383,2.321,385,3.066,386,2.925,387,1.776,388,1.563,392,1.305,398,2.729,400,1.657,401,4.168,402,1.484,403,1.357,408,2.235,413,2,414,3.612,417,1.657,420,2.444,421,1.776,422,2.925,430,3.804,452,2.55,454,2.85,456,2.773,464,4.034,466,2.925,480,1.56,486,2.444,488,3.298,490,0.555,496,1.295,503,2.333,506,2.573,515,2.088,519,1.776,526,2.74,547,1.215,552,1.357,596,2.468,606,2.957,617,2.925,618,2.925,634,4.525,635,4.66,640,1.484,643,3.186,673,1.935,674,1.1,675,4.568,676,3.583,677,4.568,678,2.957,679,3.583,680,2.925,681,2.957,682,5.296,683,3.583,684,2.176,685,3.48,686,4.101,687,6.959,688,4.023,689,5.235,690,2.85,691,2.176,692,2.573,693,4.568,694,3.583,695,2.444,696,2.974,697,3.583,698,4.709,699,3.583,700,1.674,701,2.149,702,2.573,703,5.087,704,3.186,705,4.709,706,2.925,707,3.583,708,2.176,709,2.444,710,3.448,711,2.974,712,4.525,713,2.444,714,2.573,715,3.583,716,2.925,717,2.411,718,2.176,719,2.235,720,2.235,721,2.149,722,2.149,723,2.176,724,3.583,725,2.149,726,1.82,727,2.176,728,2.176,729,2.176,730,3.583,731,2.925,732,2,733,2.729,734,1.769,735,3.812,736,3.583,737,2.147,738,2.333,739,5.849,740,3.583,741,3.583,742,2.573,743,3.583,744,3.583,745,3.583,746,3.583,747,3.583,748,3.583,749,3.583,750,3.583,751,3.583,752,3.583,753,3.583,754,3.583,755,3.583,756,3.583,757,2.176,758,2,759,2.176,760,2.176,761,2.176,762,0.481,763,2.176,764,1.776,765,1.935,766,1.935,767,2.176,768,2.176,769,1.776,770,2.176,771,0.755,772,1.935,773,1.935,774,1.357,775,2.176,776,1.484,777,1.357,778,2.176,779,2.176,780,2.176,781,1.484,782,2.176,783,2.176,784,2.176,785,2.176,786,2.176,787,2.176,788,2.176,789,2.176,790,2.176,791,2.176,792,2.176,793,2.176,794,2.176,795,2.176,796,2.176,797,2.176,798,2.176,799,2.176,800,2.176,801,2.176,802,2.176,803,2.176,804,2.176,805,1.935,806,1.935,807,2.176,808,3.583,809,3.583,810,2.176,811,2.176,812,2.176,813,2.176,814,2.176,815,2.176,816,2.176,817,1.935,818,2.333,819,2.176,820,2.235,821,1.935,822,1.657,823,2.176,824,1.935,825,2.176,826,2.333,827,2.176,828,1.776,829,2.573,830,3.281,831,1.776,832,2.573,833,3.583,834,1.776,835,1.563,836,1.416,837,1.563,838,2.176,839,1.776,840,2.176,841,2.176,842,1.484,843,1.305,844,2.729,845,3.583,846,3.186,847,7.915,848,5.602,849,1.657,850,3.583,851,1.935,852,2.176,853,2.176,854,2.176,855,1.776,856,3.583,857,1.657,858,2.176,859,1.935,860,5.296,861,2.176,862,5.296,863,2.176,864,2.176,865,2.176,866,2.176,867,7.426,868,3.115,869,1.657,870,2.176,871,2.573,872,1.935,873,0.725,874,2.176,875,4.062,876,3.583,877,2.729,878,2.176,879,2.176,880,3.583,881,2.176,882,6.959,883,1.935,884,1.657,885,2.925,886,2.176,887,1.935,888,2.176,889,1.563,890,1.657,891,1.563,892,2.176,893,2.333,894,3.517,895,1.935,896,4.78,897,4.062,898,4.062,899,1.935,900,3.186,901,2.444,902,3.186,903,3.48,904,3.186,905,1.935,906,1.935,907,1.935,908,3.186,909,1.935,910,1.657,911,1.563,912,1.935,913,1.935,914,1.563,915,1.935,916,1.935,917,1.563,918,2.925,919,2.573,920,1.935,921,1.935,922,3.804,923,4.062,924,3.729,925,1.935,926,1.935,927,2.176,928,2.176,929,2.573,930,2.176,931,2.176,932,2.444,933,2.925,934,2.176,935,1.776,936,1.416,937,1.935,938,1.935,939,2.176,940,2.176,941,2.176,942,2.176,943,4.568,944,2.925,945,1.776,946,2.176,947,1.82,948,1.935,949,2.176,950,1.776,951,2.176,952,2.176,953,1.305,954,1.935,955,1.935,956,2.176,957,1.935,958,2.176]],["title/modules/AppModule.html",[227,1.402,959,3.537]],["body/modules/AppModule.html",[3,0.078,4,0.078,9,0.061,27,1.989,43,0.007,50,1.908,60,0.182,62,0.362,63,2.271,66,0.101,67,0.299,175,1.832,187,3.824,225,0.005,226,0.005,227,1.661,229,2.031,230,2.504,231,4.145,232,4.145,233,3.521,234,2.121,239,3.735,240,2.88,241,2.382,243,2.751,244,2.813,249,2.88,250,2.121,251,3.071,253,2.972,254,2.924,255,2.076,261,2.076,354,0.892,543,2.972,547,3.071,582,1.015,764,4.49,844,6.031,959,7.066,960,4.891,961,4.891,962,4.891,963,4.891,964,6.235,965,4.49,966,6.344,967,5.823,968,4.19,969,7.134,970,7.134,971,5.501,972,7.134,973,4.277,974,7.134,975,5.501,976,4.891,977,6.344,978,3.951,979,3.951,980,4.19,981,3.951,982,3.951,983,3.951,984,3.752,985,4.19,986,3.951,987,3.951,988,3.951,989,3.951,990,4.866,991,3.951,992,4.19,993,3.951,994,7.134,995,4.49,996,5.823,997,5.823,998,5.823,999,5.823,1000,5.823,1001,5.823,1002,5.823,1003,5.501,1004,3.18,1005,3.951,1006,7.134,1007,4.19,1008,4.19,1009,5.501,1010,3.581,1011,5.501,1012,6.344,1013,4.891,1014,4.49,1015,5.501,1016,3.951,1017,5.501,1018,5.501,1019,5.501,1020,4.49,1021,4.891,1022,5.501,1023,5.501,1024,4.891,1025,5.501,1026,5.501,1027,5.501,1028,5.501,1029,5.4,1030,4.891,1031,4.49,1032,4.891,1033,5.501,1034,5.501,1035,5.501,1036,4.49,1037,5.501,1038,5.501,1039,5.501,1040,5.501,1041,5.501,1042,5.501,1043,5.501,1044,5.501,1045,5.501,1046,5.501,1047,5.501,1048,5.501,1049,5.501,1050,5.501,1051,3.951,1052,5.501,1053,5.501,1054,5.501,1055,5.501,1056,5.501,1057,5.501,1058,5.501,1059,5.501,1060,5.501,1061,4.891,1062,5.501,1063,5.501,1064,5.501,1065,5.501,1066,5.501]],["title/modules/AppRoutingModule.html",[227,1.402,964,3.335]],["body/modules/AppRoutingModule.html",[0,1.384,3,0.084,4,0.084,9,0.066,43,0.007,60,0.17,62,0.39,66,0.084,67,0.323,100,3.863,183,1.976,217,3.021,218,3.021,225,0.005,226,0.005,229,2.191,234,2.289,243,2.289,244,2.953,258,3.206,259,3.735,260,3.921,261,2.239,262,2.017,263,2.457,426,4.262,430,4.262,480,1.135,738,3.863,742,4.262,964,5.379,1067,5.934,1068,7.488,1069,5.934,1070,4.52,1071,5.934,1072,4.52,1073,5.934,1074,4.52,1075,5.934,1076,9.319,1077,9.531,1078,5.934,1079,9.531,1080,5.934,1081,5.934,1082,5.934,1083,5.934,1084,2.239,1085,7.488,1086,5.934,1087,5.934,1088,2.701,1089,5.934,1090,5.934,1091,5.934,1092,7.488,1093,7.488,1094,5.934,1095,5.934,1096,5.934,1097,5.934,1098,5.934,1099,5.934,1100,5.934,1101,5.934,1102,5.934,1103,5.934,1104,5.934,1105,5.934,1106,5.934,1107,5.934,1108,5.934,1109,5.934,1110,5.934,1111,5.934]],["title/interfaces/Attributes.html",[655,0.023,1112,1.516]],["body/interfaces/Attributes.html",[3,0.074,4,0.05,9,0.039,11,0.806,23,0.556,32,0.248,43,0.007,44,0.77,45,0.487,58,0.767,60,0.139,62,0.234,66,0.135,67,0.194,68,0.923,101,1.464,107,1.546,109,1.574,110,1.167,116,1.632,133,1.035,158,2.093,225,0.004,226,0.004,263,1.346,271,0.748,277,1.081,279,1.084,297,1.603,307,1.198,327,0.773,330,1.186,354,1.491,475,1.647,480,1.576,490,0.934,493,1.186,496,0.732,498,1.422,533,0.909,539,1.804,576,1.76,582,0.657,655,0.046,657,0.577,660,1.426,663,0.693,665,1.055,666,1.055,674,0.669,737,1.632,762,1.533,873,1.186,1112,2.418,1113,1.186,1114,2.688,1115,2.727,1116,2.91,1117,0.691,1118,1.533,1119,1.118,1120,1.857,1121,1.926,1122,0.979,1123,1.035,1124,1.655,1125,1.896,1126,1.755,1127,1.755,1128,1.21,1129,1.721,1130,2.195,1131,1.908,1132,2.195,1133,1.694,1134,1.162,1135,1.21,1136,1.162,1137,1.721,1138,1.721,1139,1.21,1140,1.721,1141,2.265,1142,1.162,1143,1.21,1144,1.162,1145,1.162,1146,1.21,1147,1.162,1148,1.21,1149,1.21,1150,1.422,1151,1.162,1152,1.721,1153,1.721,1154,1.14,1155,1.21,1156,1.162,1157,1.21,1158,1.162,1159,1.21,1160,1.162,1161,1.21,1162,1.162,1163,1.21,1164,1.162,1165,1.075,1166,1.721,1167,0.997,1168,1.035,1169,0.997,1170,0.997,1171,1.21,1172,1.162,1173,1.21,1174,1.21,1175,1.932,1176,2.133,1177,2.133,1178,2.133,1179,1.21,1180,2.133,1181,1.162,1182,2.049,1183,2.049,1184,0.681,1185,1.14,1186,1.589,1187,1.725,1188,1.207,1189,0.943,1190,1.412,1191,2.418,1192,1.035,1193,0.943,1194,1.118,1195,1.21,1196,1.055,1197,1.14,1198,1.14,1199,1.21,1200,1.21,1201,1.14,1202,1.14,1203,2.635,1204,2.87,1205,2.893,1206,1.14,1207,2.195,1208,0.943,1209,2.418,1210,1.21,1211,1.21,1212,1.687,1213,1.687,1214,1.21,1215,1.118,1216,1.592,1217,1.118,1218,1.21,1219,1.21,1220,1.21,1221,1.118,1222,1.725,1223,1.21,1224,1.623,1225,1.21,1226,1.118,1227,1.21,1228,1.21,1229,1.186,1230,1.118,1231,1.592,1232,1.118,1233,1.21,1234,1.21,1235,1.21,1236,1.21,1237,1.562,1238,1.118,1239,1.21,1240,1.21,1241,1.21,1242,1.21,1243,1.118,1244,1.21,1245,1.21,1246,1.21,1247,1.21,1248,1.21,1249,1.21,1250,1.21,1251,1.118,1252,1.075,1253,1.055,1254,1.21,1255,1.21,1256,1.21,1257,1.21,1258,1.21,1259,1.21,1260,1.21,1261,1.21,1262,1.21,1263,1.21,1264,1.21,1265,1.791,1266,1.791,1267,1.687,1268,1.791,1269,1.21,1270,1.791]],["title/interfaces/Attributes2.html",[655,0.023,1153,1.516]],["body/interfaces/Attributes2.html",[3,0.074,4,0.05,9,0.039,11,0.65,23,0.553,32,0.247,43,0.007,44,0.835,45,0.509,58,0.766,60,0.138,62,0.233,66,0.135,67,0.193,68,0.922,101,1.46,107,1.541,109,1.57,110,1.165,116,1.628,133,1.03,158,1.689,225,0.004,226,0.004,263,1.341,271,0.745,277,1.08,279,1.08,297,1.598,307,1.197,327,0.769,330,1.182,354,1.49,475,1.646,480,1.574,490,0.934,493,1.18,496,0.729,498,1.417,533,0.905,539,1.802,576,1.759,582,0.654,655,0.046,657,0.574,660,1.423,663,0.69,665,1.05,666,1.05,674,0.666,737,1.628,762,1.53,873,1.18,1112,2.26,1113,1.18,1114,2.685,1115,2.723,1116,2.906,1117,0.688,1118,1.527,1119,1.112,1120,1.854,1121,1.923,1122,0.974,1123,1.03,1124,1.649,1125,1.89,1126,1.749,1127,1.749,1128,1.204,1129,1.715,1130,2.19,1131,1.906,1132,2.439,1133,2.089,1134,1.157,1135,1.204,1136,1.157,1137,1.715,1138,1.715,1139,1.204,1140,1.715,1141,2.26,1142,1.157,1143,1.204,1144,1.157,1145,1.157,1146,1.204,1147,1.157,1148,1.204,1149,1.204,1150,1.417,1151,1.157,1152,1.715,1153,2.043,1154,1.134,1155,1.204,1156,1.157,1157,1.204,1158,1.157,1159,1.204,1160,1.157,1161,1.204,1162,1.157,1163,1.204,1164,1.157,1165,1.07,1166,1.715,1167,0.992,1168,1.03,1169,0.992,1170,0.992,1171,1.204,1172,1.157,1173,1.204,1174,1.204,1175,1.927,1176,2.127,1177,2.127,1178,2.127,1179,1.204,1180,2.127,1181,1.157,1182,2.043,1183,2.043,1184,0.678,1185,1.134,1186,1.586,1187,1.721,1188,1.203,1189,0.939,1190,1.408,1191,2.413,1192,1.03,1193,0.939,1194,1.112,1195,1.204,1196,1.05,1197,1.134,1198,1.134,1199,1.204,1200,1.204,1201,1.134,1202,1.134,1203,2.631,1204,2.867,1205,2.89,1206,1.134,1207,2.19,1208,0.939,1209,2.413,1210,1.204,1211,1.204,1212,1.681,1213,1.681,1214,1.204,1215,1.112,1216,1.586,1217,1.112,1218,1.204,1219,1.204,1220,1.204,1221,1.112,1222,1.721,1223,1.204,1224,1.617,1225,1.204,1226,1.112,1227,1.204,1228,1.204,1229,1.18,1230,1.112,1231,1.586,1232,1.112,1233,1.204,1234,1.204,1235,1.204,1236,1.204,1237,1.557,1238,1.112,1239,1.204,1240,1.204,1241,1.204,1242,1.204,1243,1.112,1244,1.204,1245,1.204,1246,1.204,1247,1.204,1248,1.204,1249,1.204,1250,1.204,1251,1.112,1252,1.07,1253,1.05,1254,1.204,1255,1.204,1256,1.204,1257,1.204,1258,1.204,1259,1.204,1260,1.204,1261,1.204,1262,1.204,1263,1.204,1264,1.204,1265,1.785,1266,1.785,1267,1.681,1268,1.785,1269,1.204,1270,1.785]],["title/guards/AuthGuard.html",[1070,3.537,1271,3.023]],["body/guards/AuthGuard.html",[3,0.075,4,0.075,9,0.059,11,0.809,13,2.878,19,2.481,21,2.977,22,2.188,23,0.829,32,0.37,33,1.513,35,2.027,37,3.002,38,1.486,40,2.749,41,2.749,42,1.513,43,0.007,44,0.693,45,0.458,46,1.433,48,2.946,50,2.699,51,4.918,58,0.73,60,0.161,61,1.92,62,0.349,63,2.192,66,0.075,67,0.289,68,0.859,69,2.481,70,2.52,218,3.334,225,0.005,226,0.005,241,3.018,259,3.174,261,2.003,277,1.218,304,4.755,354,1.262,483,3.766,522,5.092,674,0.997,688,5.326,701,4.956,710,5.998,732,3.892,762,1.826,771,1.842,774,3.313,777,3.313,822,4.045,1070,5.31,1117,0.914,1184,1.016,1271,5.38,1272,4.045,1273,4.721,1274,7.349,1275,6.971,1276,5.683,1277,6.971,1278,6.971,1279,5.69,1280,5.69,1281,6.199,1282,7.006,1283,3.814,1284,5.31,1285,5.69,1286,3.892,1287,4.349,1288,6.971,1289,4.334,1290,6.746,1291,6.746,1292,5.31,1293,5.69,1294,6.295,1295,6.295,1296,3.542,1297,4.349,1298,5.007,1299,6.199,1300,7.349,1301,6.971,1302,6.971,1303,5.69,1304,5.69,1305,6.746,1306,3.29,1307,7.006,1308,6.199,1309,4.181,1310,4.045,1311,3.457,1312,4.334,1313,3.457,1314,4.721,1315,4.334,1316,4.334,1317,3.814,1318,5.31]],["title/guards/AuthGuard2.html",[1072,3.537,1271,3.023]],["body/guards/AuthGuard2.html",[3,0.075,4,0.075,9,0.059,11,0.809,19,3.635,21,2.23,22,2.187,23,0.828,32,0.37,33,1.512,35,2.026,37,3.186,38,1.485,40,2.747,41,3.258,42,1.512,43,0.007,44,0.692,45,0.458,46,1.432,48,3.492,50,2.865,51,4.917,58,0.615,60,0.161,61,1.918,62,0.349,63,2.19,66,0.075,67,0.289,68,0.859,69,2.479,70,2.519,225,0.005,226,0.005,259,3.761,261,2.001,272,4.347,277,1.211,304,4.752,354,1.339,434,4.178,505,4.115,522,5.416,674,0.996,688,5.416,701,4.178,710,6.099,717,3.171,738,5.586,762,1.539,771,1.84,822,4.041,1072,5.307,1084,3.117,1088,3.171,1117,0.913,1184,1.015,1271,5.378,1272,4.041,1274,7.346,1276,5.494,1280,5.687,1282,7.003,1283,3.81,1285,5.687,1287,4.346,1289,4.33,1290,6.743,1291,6.743,1293,5.687,1294,5.307,1295,5.307,1300,6.195,1304,5.687,1305,6.743,1306,3.288,1307,7.188,1310,4.041,1311,3.453,1312,4.33,1313,3.453,1314,4.717,1315,4.33,1316,4.33,1319,4.717,1320,6.195,1321,6.195,1322,3.171,1323,8.261,1324,5.304,1325,6.967,1326,5.304,1327,5.304,1328,7.779,1329,6.967,1330,6.195,1331,5.304,1332,4.717]],["title/guards/AuthGuardAdmin.html",[1074,3.537,1271,3.023]],["body/guards/AuthGuardAdmin.html",[3,0.072,4,0.072,9,0.056,11,0.791,13,2.794,19,3.794,20,3.657,21,2.167,22,2.549,23,0.793,32,0.354,33,1.469,35,1.968,37,3.132,38,1.443,40,2.669,41,2.669,42,1.469,43,0.007,44,0.672,45,0.445,46,1.392,48,3.432,49,4.616,50,2.816,51,4.857,58,0.597,60,0.166,61,1.836,62,0.334,63,2.096,66,0.072,67,0.276,68,0.879,69,2.373,70,2.752,100,5.286,183,3.073,218,3.275,225,0.005,226,0.005,259,3.081,261,1.916,277,1.173,281,4.008,304,4.616,307,0.852,313,4.145,354,1.371,432,4.861,434,4.059,454,5.427,455,4.387,461,1.798,504,4.223,505,3.794,547,2.835,549,2.659,552,3.168,625,4.515,674,0.954,688,5.377,700,3.163,701,4.059,710,5.946,732,3.779,762,1.794,771,1.761,822,3.868,1074,5.156,1117,0.887,1184,0.971,1271,5.286,1272,3.868,1276,5.628,1281,6.019,1282,6.904,1283,3.647,1285,5.525,1286,3.779,1287,4.223,1289,4.145,1290,6.628,1291,6.628,1293,5.525,1294,5.156,1295,6.186,1296,4.42,1297,4.223,1304,6.628,1305,5.525,1306,3.218,1307,6.904,1308,6.019,1309,4.059,1310,3.868,1311,3.306,1312,4.145,1313,3.306,1315,4.145,1316,4.145,1317,3.647,1332,4.515,1333,4.515,1334,6.768,1335,6.768,1336,6.768,1337,4.406,1338,5.078,1339,5.078,1340,4.861,1341,4.861,1342,6.768,1343,6.768,1344,4.145,1345,5.078,1346,5.078,1347,4.059,1348,5.078]],["title/directives/BackgraphbuttonDirective.html",[178,1.831,220,1.831]],["body/directives/BackgraphbuttonDirective.html",[3,0.093,4,0.093,9,0.073,19,3.74,23,1.25,25,2.549,26,3.383,32,0.461,33,1.737,34,4.996,35,1.922,38,1.907,42,1.737,43,0.007,44,0.795,45,0.566,46,1.646,58,0.707,59,3.18,60,0.124,62,0.435,66,0.093,67,0.359,70,2.389,131,3.842,178,3.156,179,3.466,219,2.728,220,3.156,225,0.006,226,0.006,262,2.72,276,4.191,315,4.324,490,0.759,534,3.82,635,4.469,1349,5.877,1350,7.656,1351,8.004,1352,5.749,1353,7.117,1354,8.61,1355,5.877,1356,7.957,1357,6.533,1358,7.656,1359,8.004,1360,7.117,1361,7.957,1362,6.609,1363,6.609,1364,5.395,1365,5.877,1366,5.877,1367,6.609,1368,5.877,1369,6.609,1370,5.877]],["title/injectables/BaseAutenticationService.html",[1117,0.609,1371,3.335]],["body/injectables/BaseAutenticationService.html",[3,0.051,4,0.051,9,0.04,11,0.839,19,2.966,20,1.961,21,2.938,23,0.835,32,0.253,33,1.52,35,1.846,37,2.448,38,1.956,42,1.753,43,0.007,44,0.802,45,0.545,46,1.66,51,4.168,58,0.838,59,3.177,60,0.131,62,0.239,66,0.051,67,0.345,68,0.861,225,0.004,226,0.004,241,2.315,271,0.758,272,3.133,277,1.23,327,0.788,354,1.21,431,2.765,442,3.113,444,4.56,460,2.765,461,1.285,468,3.228,474,2.985,475,1.662,477,2.8,490,0.895,496,0.746,498,1.443,505,3.953,515,1.431,522,4.668,533,1.366,534,3.091,582,1.292,640,3.647,655,0.018,674,0.682,712,4.56,717,2.434,734,2.639,762,1.182,771,1.259,1029,2.476,1084,2.817,1088,2.89,1117,0.701,1184,0.694,1208,1.682,1286,2.027,1296,2.717,1297,4.658,1298,5.362,1303,4.365,1306,4.011,1322,2.434,1341,3.841,1347,3.207,1371,3.841,1372,1.572,1373,8.204,1374,2.963,1375,5.335,1376,6.509,1377,5.335,1378,4.836,1379,5.335,1380,5.335,1381,4.073,1382,4.073,1383,4.073,1384,4.073,1385,5.335,1386,3.63,1387,3.63,1388,4.2,1389,6.903,1390,4.073,1391,3.63,1392,5.347,1393,5.03,1394,4.477,1395,7.522,1396,4.246,1397,3.481,1398,3.207,1399,3.63,1400,4.339,1401,4.777,1402,4.202,1403,5.335,1404,4.073,1405,3.91,1406,3.647,1407,3.63,1408,5.949,1409,5.03,1410,3.63,1411,3.63,1412,2.985,1413,4.073,1414,3.63,1415,4.777,1416,4.073,1417,3.667,1418,3.63,1419,4.755,1420,4.073,1421,4.073,1422,3.63,1423,3.841,1424,4.073,1425,4.073,1426,3.63,1427,4.073,1428,3.63,1429,5.949,1430,2.765,1431,3.63,1432,2.567,1433,2.765,1434,3.63,1435,4.073,1436,2.765,1437,3.63,1438,3.207,1439,4.365,1440,3.63,1441,4.365,1442,4.365,1443,4.133,1444,4.365,1445,3.63,1446,2.607,1447,3.228,1448,2.963,1449,3.63,1450,3.228,1451,2.027,1452,3.63,1453,3.63,1454,1.901,1455,2.177,1456,3.63,1457,3.63,1458,3.63,1459,3.228,1460,3.228,1461,3.228,1462,3.228,1463,3.228,1464,3.63,1465,3.63,1466,3.63,1467,3.63,1468,3.63,1469,3.63,1470,3.228,1471,3.63,1472,3.63,1473,3.63,1474,3.63,1475,3.63,1476,3.63,1477,3.63]],["title/injectables/BaseMediaService.html",[1117,0.609,1478,3.023]],["body/injectables/BaseMediaService.html",[3,0.094,4,0.094,9,0.095,11,0.836,22,2.524,32,0.464,33,1.745,38,1.419,42,1.445,43,0.007,44,0.661,45,0.438,46,1.369,58,0.71,60,0.151,62,0.438,66,0.094,67,0.362,68,0.692,225,0.006,226,0.006,272,4.264,307,1.012,413,5.317,461,2.847,463,4.822,581,5.941,674,1.251,771,2.309,1117,1.054,1184,1.274,1286,4.489,1306,3.792,1372,2.883,1376,6.702,1398,4.822,1478,5.234,1479,6.563,1480,5.072,1481,6.563,1482,6.563,1483,6.702,1484,5.435,1485,6.658,1486,6.125,1487,8.04,1488,5.775,1489,6.658]],["title/interfaces/BasiCryptoFromApi.html",[655,0.023,1490,3.167]],["body/interfaces/BasiCryptoFromApi.html",[3,0.098,4,0.075,9,0.058,11,0.55,14,2.35,23,0.826,32,0.369,43,0.007,44,0.82,45,0.511,58,0.686,60,0.146,62,0.348,66,0.116,67,0.378,68,0.808,101,1.623,110,1.171,225,0.005,226,0.005,271,0.987,307,1.17,329,3.643,354,1.26,475,1.553,480,1.579,488,2.772,490,0.899,539,1.928,576,1.598,655,0.044,656,4.322,657,0.858,660,1.598,665,1.569,666,1.569,670,4.46,674,0.994,726,3.535,1010,3.446,1117,0.912,1131,1.791,1133,2.228,1150,1.429,1184,1.013,1186,1.78,1187,2.269,1188,1.891,1189,2.059,1190,1.749,1196,1.569,1252,1.599,1455,3.175,1490,4.745,1491,3.802,1492,4.609,1493,5.582,1494,4.341,1495,6.159,1496,4.264,1497,2.956,1498,4.022,1499,3.611,1500,3.802,1501,2.292,1502,3.802,1503,4.033,1504,3.611,1505,4.033,1506,4.033,1507,4.033,1508,4.033,1509,4.033,1510,4.033,1511,4.033,1512,4.033,1513,4.033,1514,4.033,1515,4.033,1516,4.033,1517,4.033,1518,4.033,1519,4.033,1520,4.033,1521,4.033,1522,4.033,1523,4.033,1524,4.033,1525,4.033,1526,4.033,1527,4.745,1528,4.194,1529,4.033,1530,2.541,1531,3.611,1532,3.802,1533,4.033,1534,4.033,1535,2.474,1536,3.611,1537,3.857,1538,2.541,1539,4.033,1540,3.802,1541,5.3,1542,4.033,1543,5.3,1544,4.033,1545,5.3,1546,4.033,1547,4.033,1548,3.802,1549,2.86,1550,4.033,1551,3.611,1552,3.802,1553,4.033,1554,4.033,1555,4.033]],["title/interfaces/BasicCrypto.html",[655,0.023,660,0.955]],["body/interfaces/BasicCrypto.html",[3,0.101,4,0.101,9,0.079,32,0.501,43,0.007,44,0.886,45,0.553,60,0.135,66,0.126,225,0.006,226,0.006,271,1.193,490,0.872,655,0.043,656,3.762,657,1.165,658,5.474,659,3.771,660,1.834,663,1.738,664,5.161,665,2.129,666,2.129,667,5.866,668,5.866,669,5.866,670,3.882,671,5.866,672,5.866,1133,2.407]],["title/interfaces/BasicList.html",[655,0.023,1120,1.164]],["body/interfaces/BasicList.html",[3,0.102,4,0.102,9,0.08,11,0.929,32,0.503,43,0.007,45,0.588,60,0.135,66,0.119,158,2.411,225,0.006,226,0.006,271,1.196,475,1.618,490,0.901,655,0.041,657,1.17,660,1.484,1120,2.115,1121,1.877,1137,2.753,1138,2.753,1150,2.276,1556,5.889,1557,6.416,1558,6.416]],["title/interfaces/BasicUser.html",[297,1.186,655,0.023]],["body/interfaces/BasicUser.html",[3,0.099,4,0.099,9,0.077,32,0.488,43,0.007,45,0.612,60,0.131,66,0.117,133,2.565,225,0.006,226,0.006,271,1.175,277,0.899,279,1.814,280,3.19,281,4.355,297,2.115,330,1.985,490,0.911,655,0.04,657,1.134,659,3.729,663,1.776,664,5.026,762,1.83,1167,2.32,1169,2.32,1170,2.32,1559,5.712,1560,5.712,1561,4.773,1562,6.223,1563,6.223]],["title/interfaces/BodyCreateList.html",[655,0.023,1136,1.516]],["body/interfaces/BodyCreateList.html",[3,0.075,4,0.051,9,0.04,11,0.809,23,0.561,32,0.25,43,0.007,44,0.773,45,0.415,58,0.768,60,0.139,62,0.236,66,0.135,67,0.195,68,0.925,101,1.472,107,1.554,109,1.583,110,1.173,116,1.641,133,1.045,158,2.1,225,0.004,226,0.004,263,1.355,271,0.753,277,1.084,279,1.091,297,1.612,307,1.199,327,0.78,330,1.194,354,1.493,475,1.65,480,1.58,490,0.931,493,1.197,496,0.739,498,1.432,533,0.918,539,1.827,576,1.764,582,0.663,655,0.046,657,0.583,660,1.433,663,0.7,665,1.065,666,1.065,674,0.675,737,1.641,762,1.54,873,1.197,1112,2.275,1113,1.197,1114,2.527,1115,2.368,1116,2.735,1117,0.696,1118,1.543,1119,1.128,1120,1.864,1121,1.934,1122,0.988,1123,1.045,1124,1.666,1125,1.906,1126,1.768,1127,1.768,1128,1.221,1129,1.733,1130,2.203,1131,1.912,1132,2.203,1133,1.703,1134,1.173,1135,1.221,1136,1.733,1137,1.733,1138,1.733,1139,1.221,1140,1.733,1141,2.275,1142,1.173,1143,1.221,1144,1.173,1145,1.173,1146,1.221,1147,1.173,1148,1.221,1149,1.221,1150,1.432,1151,1.173,1152,1.733,1153,1.733,1154,1.15,1155,1.221,1156,1.173,1157,1.221,1158,1.173,1159,1.221,1160,1.173,1161,1.221,1162,1.173,1163,1.221,1164,1.173,1165,1.085,1166,1.733,1167,1.006,1168,1.045,1169,1.006,1170,1.006,1171,1.221,1172,1.173,1173,1.221,1174,1.221,1175,1.943,1176,2.145,1177,2.145,1178,2.145,1179,1.221,1180,2.145,1181,1.173,1182,2.06,1183,2.06,1184,0.687,1185,1.15,1186,1.596,1187,1.735,1188,1.216,1189,0.952,1190,1.42,1191,2.427,1192,1.045,1193,0.952,1194,1.128,1195,1.221,1196,1.065,1197,1.15,1198,1.15,1199,1.221,1200,1.221,1201,1.15,1202,1.15,1203,2.644,1204,2.876,1205,2.899,1206,1.15,1207,2.203,1208,0.952,1209,2.427,1210,1.221,1211,1.221,1212,1.699,1213,1.699,1214,1.221,1215,1.128,1216,1.603,1217,1.128,1218,1.221,1219,1.221,1220,1.221,1221,1.128,1222,1.735,1223,1.221,1224,1.634,1225,1.221,1226,1.128,1227,1.221,1228,1.221,1229,1.197,1230,1.128,1231,1.603,1232,1.128,1233,1.221,1234,1.221,1235,1.221,1236,1.221,1237,1.573,1238,1.128,1239,1.221,1240,1.221,1241,1.221,1242,1.221,1243,1.128,1244,1.221,1245,1.221,1246,1.221,1247,1.221,1248,1.221,1249,1.221,1250,1.221,1251,1.128,1252,1.085,1253,1.065,1254,1.221,1255,1.221,1256,1.221,1257,1.221,1258,1.221,1259,1.221,1260,1.221,1261,1.221,1262,1.221,1263,1.221,1264,1.221,1265,1.804,1266,1.804,1267,1.699,1268,1.804,1269,1.221,1270,1.804,1564,6.31]],["title/injectables/CoinGekoMapping.html",[1010,3.023,1117,0.609]],["body/injectables/CoinGekoMapping.html",[3,0.106,4,0.069,9,0.054,11,0.833,14,2.939,23,0.767,32,0.342,33,1.437,38,1.596,42,1.625,43,0.007,44,0.796,45,0.492,46,1.54,58,0.761,60,0.14,62,0.323,66,0.113,67,0.407,68,0.778,101,1.544,110,0.827,225,0.005,226,0.005,307,1.206,329,2.573,354,1.214,475,1.199,480,1.6,488,3.467,490,0.835,539,1.915,576,1.772,655,0.042,656,4.611,660,1.772,665,1.456,666,1.456,670,4.758,674,0.923,726,2.497,1010,4.311,1117,0.868,1124,2.079,1131,1.815,1133,1.326,1150,1.326,1184,0.94,1186,1.974,1187,2.462,1188,2.051,1189,2.283,1190,1.939,1196,1.456,1252,2,1372,2.128,1455,3.971,1490,3.352,1491,3.53,1492,4.181,1493,5.379,1494,3.066,1495,6.008,1496,4.347,1497,2.744,1498,3.828,1499,3.352,1500,3.53,1501,2.128,1502,3.53,1503,3.744,1504,3.352,1505,3.744,1506,3.744,1507,3.744,1508,3.744,1509,3.744,1510,3.744,1511,3.744,1512,3.744,1513,3.744,1514,3.744,1515,3.744,1516,3.744,1517,3.744,1518,3.744,1519,3.744,1520,3.744,1521,3.744,1522,3.744,1523,3.744,1524,3.744,1525,3.744,1526,3.744,1527,5.108,1528,4.474,1529,3.744,1530,2.359,1531,3.352,1532,3.53,1533,3.744,1534,3.744,1535,3.094,1536,4.516,1537,4.184,1538,3.179,1539,5.044,1540,4.756,1541,5.044,1542,3.744,1543,5.044,1544,3.744,1545,5.044,1546,3.744,1547,3.744,1548,3.53,1549,3.577,1550,5.044,1551,4.516,1552,4.756,1553,3.744,1554,3.744,1555,3.744,1565,4.131,1566,4.131,1567,4.37,1568,4.914,1569,4.914,1570,4.914]],["title/injectables/CoinGekoRepository.html",[1117,0.609,1571,3.537]],["body/injectables/CoinGekoRepository.html",[3,0.059,4,0.059,9,0.046,11,0.82,13,3.382,32,0.291,33,1.284,35,1.72,38,1.682,40,2.332,41,2.332,42,1.622,43,0.007,44,0.742,45,0.491,46,1.537,48,2.5,58,0.76,60,0.158,61,1.509,62,0.274,66,0.059,67,0.227,68,0.942,110,0.995,225,0.004,226,0.004,307,1.141,318,4.506,329,3.097,354,1.395,442,2.489,461,2.646,475,1.559,480,1.429,490,0.895,504,5.111,539,1.781,543,2.255,656,3.597,659,3.159,660,1.622,663,1.152,670,3.711,674,0.784,695,4.034,700,2.764,717,3.402,726,3.005,734,4.044,737,1.538,771,1.448,947,3.005,973,4.65,981,2.998,982,2.998,983,2.998,1029,4.034,1117,0.775,1131,1.622,1184,0.798,1188,1.877,1189,2.28,1280,4.828,1306,3.955,1311,2.717,1372,1.807,1396,4.248,1402,4.352,1405,3.302,1432,3.587,1450,5.26,1451,3.302,1455,3.547,1492,3.302,1493,4.248,1495,5.368,1496,3.918,1497,2.331,1498,3.971,1499,2.847,1501,3.925,1527,4.034,1528,4.677,1535,4.022,1538,2.839,1549,4.426,1565,3.69,1566,3.69,1571,5.693,1572,3.712,1573,4.662,1574,3.851,1575,4.506,1576,4.32,1577,5.111,1578,7.473,1579,6.417,1580,4.034,1581,5.097,1582,2.998,1583,6.645,1584,6.645,1585,4.174,1586,3.547,1587,5.915,1588,5.915,1589,3.69,1590,5.26,1591,5.915,1592,4.034,1593,4.662,1594,4.174,1595,3.302,1596,5.693,1597,6.241,1598,4.034,1599,5.097,1600,4.174,1601,3.302,1602,3.851,1603,4.174,1604,4.034,1605,4.034,1606,4.034,1607,5.333,1608,4.174,1609,4.828,1610,4.248,1611,4.034,1612,4.506,1613,5.26,1614,5.26,1615,4.174,1616,3.407,1617,2.717,1618,3.712,1619,3.712,1620,3.712,1621,3.712,1622,3.712,1623,3.712,1624,2.998,1625,5.097,1626,3.407,1627,4.174,1628,7.473,1629,5.915,1630,3.407,1631,4.174,1632,4.174,1633,4.174,1634,4.174,1635,4.174]],["title/directives/ColorpercentDirective.html",[178,1.831,222,1.791]],["body/directives/ColorpercentDirective.html",[3,0.077,4,0.077,6,3.085,7,3.085,9,0.061,11,0.822,16,4.859,19,3.329,23,1.112,25,2.117,26,3.011,32,0.383,33,1.546,35,1.596,38,1.686,40,2.809,41,3.301,42,1.546,43,0.007,44,0.708,45,0.52,46,1.465,48,3.538,54,3.62,55,3.73,56,4.273,58,0.485,59,2.631,60,0.103,62,0.361,66,0.077,67,0.299,68,0.822,70,1.985,94,4.154,127,2.499,131,4.018,177,3.849,178,3.617,219,2.266,222,2.748,223,3.624,225,0.005,226,0.005,271,1.011,276,3.73,307,0.897,315,3.849,496,1.906,515,2.165,527,3.849,534,4.839,539,1.089,635,5.38,717,3.243,732,3.978,1309,4.273,1341,5.117,1350,7.033,1352,5.117,1353,6.335,1355,4.881,1356,7.714,1357,6.456,1358,7.714,1360,6.335,1361,7.444,1364,4.481,1365,4.881,1366,4.881,1368,6.335,1370,6.335,1406,5.709,1636,4.881,1637,5.815,1638,7.444,1639,6.335,1640,7.488,1641,7.124,1642,6.335,1643,7.124,1644,7.256,1645,7.124,1646,7.124,1647,7.124,1648,7.124,1649,7.124,1650,7.124,1651,7.124,1652,7.124,1653,7.124,1654,7.124,1655,7.124,1656,7.124,1657,8.371,1658,5.489,1659,7.124,1660,7.124,1661,6.335,1662,5.489,1663,5.489]],["title/interfaces/CreateListUpdate.html",[655,0.023,1142,1.516]],["body/interfaces/CreateListUpdate.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.207,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.212,1131,1.915,1132,2.212,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.745,1143,1.233,1144,2.072,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.184,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/Crypto.html",[655,0.023,1131,1.008]],["body/interfaces/Crypto.html",[3,0.074,4,0.05,9,0.039,11,0.649,23,0.551,32,0.246,43,0.007,44,0.834,45,0.526,58,0.765,60,0.138,62,0.232,66,0.135,67,0.192,68,0.921,101,1.456,107,1.537,109,1.565,110,1.162,116,1.624,133,1.026,158,1.684,225,0.004,226,0.004,263,1.337,271,0.743,277,1.078,279,1.076,297,1.594,307,1.197,327,0.765,330,1.178,354,1.489,475,1.672,480,1.572,490,0.934,493,1.175,496,0.725,498,1.413,533,0.901,539,1.822,576,1.757,582,0.651,655,0.046,657,0.572,660,1.42,663,0.687,665,1.045,666,1.045,674,0.663,737,1.624,762,1.526,873,1.175,1112,2.255,1113,1.175,1114,2.682,1115,2.719,1116,2.903,1117,0.686,1118,1.522,1119,1.107,1120,1.85,1121,1.919,1122,0.97,1123,1.026,1124,1.643,1125,1.885,1126,1.743,1127,1.743,1128,1.199,1129,1.709,1130,2.186,1131,1.924,1132,2.435,1133,2.086,1134,1.152,1135,1.199,1136,1.152,1137,1.709,1138,1.709,1139,1.199,1140,1.709,1141,2.255,1142,1.152,1143,1.199,1144,1.152,1145,1.152,1146,1.199,1147,1.152,1148,1.199,1149,1.199,1150,1.413,1151,1.152,1152,1.709,1153,1.709,1154,1.129,1155,1.199,1156,1.152,1157,1.199,1158,1.152,1159,1.199,1160,1.152,1161,1.199,1162,1.152,1163,1.199,1164,1.152,1165,1.065,1166,1.709,1167,0.988,1168,1.026,1169,0.988,1170,0.988,1171,1.199,1172,1.152,1173,1.199,1174,1.199,1175,1.922,1176,2.121,1177,2.121,1178,2.121,1179,1.199,1180,2.121,1181,1.152,1182,2.038,1183,2.038,1184,0.675,1185,1.129,1186,1.582,1187,1.716,1188,1.199,1189,0.934,1190,1.404,1191,2.409,1192,1.026,1193,0.934,1194,1.107,1195,1.199,1196,1.045,1197,1.129,1198,1.129,1199,1.199,1200,1.199,1201,1.129,1202,1.129,1203,2.627,1204,2.865,1205,2.887,1206,1.129,1207,2.186,1208,0.934,1209,2.409,1210,1.199,1211,1.199,1212,1.676,1213,1.676,1214,1.199,1215,1.107,1216,1.581,1217,1.107,1218,1.199,1219,1.199,1220,1.199,1221,1.107,1222,1.716,1223,1.199,1224,1.612,1225,1.199,1226,1.107,1227,1.199,1228,1.199,1229,1.175,1230,1.107,1231,1.581,1232,1.107,1233,1.199,1234,1.199,1235,1.199,1236,1.199,1237,1.551,1238,1.107,1239,1.199,1240,1.199,1241,1.199,1242,1.199,1243,1.107,1244,1.199,1245,1.199,1246,1.199,1247,1.199,1248,1.199,1249,1.199,1250,1.199,1251,1.107,1252,1.065,1253,1.045,1254,1.199,1255,1.199,1256,1.199,1257,1.199,1258,1.199,1259,1.199,1260,1.199,1261,1.199,1262,1.199,1263,1.199,1264,1.199,1265,1.779,1266,1.779,1267,1.676,1268,1.779,1269,1.199,1270,1.779]],["title/injectables/CryptoBaseRepository.html",[1117,0.609,1579,3.537]],["body/injectables/CryptoBaseRepository.html",[3,0.061,4,0.061,5,1.668,9,0.048,11,0.831,13,3.421,21,1.942,23,0.675,32,0.301,33,1.648,35,1.764,38,1.704,40,2.392,41,2.392,42,1.648,43,0.007,44,0.754,45,0.526,46,1.561,48,2.564,58,0.767,60,0.159,61,1.564,62,0.284,66,0.061,67,0.48,68,0.948,225,0.004,226,0.004,230,2.761,307,1.165,442,2.529,461,3.075,475,1.62,480,1.16,483,4.102,490,0.899,504,5.171,539,1.793,543,2.337,582,1.4,655,0.029,660,1.247,663,1.364,674,0.813,700,2.835,734,4.091,737,1.578,771,1.5,947,3.082,973,4.598,981,3.107,982,3.107,983,3.107,1117,0.795,1131,1.847,1184,0.827,1187,1.667,1188,1.39,1286,3.387,1306,3.974,1372,1.873,1376,4.357,1394,4.831,1395,5.394,1396,4.287,1402,4.373,1451,3.387,1496,4.071,1497,2.415,1498,4.049,1499,2.951,1501,3.95,1502,4.357,1527,4.137,1528,4.635,1535,3.977,1537,3.548,1538,3.645,1549,3.277,1565,3.784,1566,3.784,1573,3.784,1575,5.784,1576,3.506,1577,3.784,1579,5.784,1580,4.137,1581,5.178,1582,3.107,1583,6.229,1584,6.229,1586,3.638,1590,5.394,1592,4.137,1595,3.387,1597,6.313,1598,4.137,1599,5.178,1601,3.387,1604,4.137,1605,4.137,1606,4.137,1607,5.395,1616,3.531,1617,2.816,1618,3.847,1619,3.847,1620,3.847,1621,3.847,1622,3.847,1623,3.847,1626,3.531,1630,3.531,1664,3.847,1665,6.066,1666,6.066,1667,6.066,1668,4.326,1669,4.951,1670,3.949,1671,4.326,1672,4.326,1673,4.326,1674,4.326,1675,4.137,1676,4.326,1677,2.699,1678,3.107,1679,6.198,1680,5.178,1681,7.592,1682,6.751,1683,4.239,1684,4.554]],["title/injectables/CryptoBaseService.html",[1117,0.609,1685,3.537]],["body/injectables/CryptoBaseService.html",[3,0.069,4,0.069,5,1.902,9,0.054,11,0.834,13,3.561,20,3.586,22,2.084,23,0.77,32,0.344,33,1.441,35,1.93,38,1.785,42,1.742,43,0.007,44,0.797,45,0.597,46,1.65,58,0.791,60,0.162,61,2.4,62,0.324,66,0.069,67,0.268,68,0.931,225,0.005,226,0.005,303,4.321,307,1.155,354,1.301,461,1.746,463,3.981,475,1.453,480,1.535,490,0.899,539,1.836,549,2.583,660,1.365,663,0.961,674,0.926,717,3.022,734,4.258,771,1.711,947,3.373,1117,0.87,1184,0.943,1188,1.838,1306,4.037,1313,3.211,1372,2.136,1396,4.424,1400,4.516,1402,4.478,1405,3.706,1432,4.141,1497,2.754,1501,4.121,1528,4.662,1538,3.853,1549,3.586,1565,4.141,1566,4.141,1573,4.681,1574,4.321,1580,4.527,1581,5.474,1592,4.527,1595,3.706,1598,4.527,1599,5.474,1601,3.706,1602,4.321,1604,4.527,1605,5.474,1606,4.527,1607,5.616,1612,5.057,1626,4.026,1630,4.026,1675,5.117,1677,5.225,1678,3.543,1679,4.026,1685,5.057,1686,4.386,1687,5.057,1688,3.758,1689,4.933,1690,4.933,1691,4.933,1692,4.768,1693,3.586,1694,5.903,1695,4.933,1696,4.933,1697,5.057,1698,4.141,1699,4.933,1700,5.057,1701,4.933,1702,4.933,1703,4.933,1704,4.933,1705,4.933,1706,4.933]],["title/interfaces/CryptoCoinGeko.html",[655,0.023,1707,3.537]],["body/interfaces/CryptoCoinGeko.html",[3,0.105,4,0.105,9,0.082,43,0.007,60,0.161,66,0.105,225,0.006,226,0.006,461,2.636,549,3.898,655,0.036,657,1.207,659,3.63,660,1.531,1131,1.616,1497,4.157,1698,5.647,1707,6.543,1708,6.621,1709,5.672]],["title/interfaces/CryptoFromApi.html",[655,0.023,1504,3.167]],["body/interfaces/CryptoFromApi.html",[3,0.089,4,0.065,9,0.051,11,0.476,14,2.032,23,0.715,32,0.319,43,0.007,44,0.773,45,0.637,58,0.637,60,0.135,62,0.301,66,0.11,67,0.343,68,0.75,101,1.903,110,0.77,225,0.005,226,0.005,271,0.895,307,1.15,329,2.397,354,1.17,475,1.478,480,1.488,488,2.397,490,0.91,539,1.97,576,1.484,655,0.042,656,4.073,657,0.742,660,1.484,665,1.357,666,1.357,670,4.203,674,0.86,726,2.326,1010,2.98,1117,0.827,1131,1.567,1133,2.1,1150,1.235,1184,0.876,1186,1.654,1187,2.139,1188,1.782,1189,1.913,1190,1.624,1196,1.357,1252,1.383,1455,2.746,1490,3.122,1491,3.288,1492,4.344,1493,4.532,1494,2.856,1495,5.862,1496,4.159,1497,2.556,1498,3.647,1499,3.122,1500,4.532,1501,2.732,1502,4.532,1503,4.806,1504,4.303,1505,5.927,1506,5.927,1507,5.927,1508,5.927,1509,5.927,1510,5.927,1511,5.927,1512,5.927,1513,5.927,1514,5.927,1515,5.927,1516,5.927,1517,5.927,1518,5.927,1519,5.927,1520,5.927,1521,5.927,1522,5.927,1523,5.927,1524,5.927,1525,5.927,1526,5.927,1527,4.303,1528,3.953,1529,3.487,1530,2.198,1531,3.122,1532,3.288,1533,3.487,1534,3.487,1535,2.139,1536,3.122,1537,3.636,1538,2.198,1539,3.487,1540,3.288,1541,4.806,1542,3.487,1543,4.806,1544,3.487,1545,4.806,1546,3.487,1547,3.487,1548,3.288,1549,2.473,1550,3.487,1551,3.122,1552,3.288,1553,3.487,1554,3.487,1555,3.487]],["title/injectables/CryptoGeko.html",[1008,3.537,1117,0.609]],["body/injectables/CryptoGeko.html",[3,0.076,4,0.076,9,0.06,11,0.898,13,3.246,22,2.615,23,0.847,32,0.378,33,1.534,35,2.055,38,1.842,40,2.787,41,2.787,42,1.808,43,0.007,44,0.828,45,0.602,46,1.713,58,0.736,60,0.166,61,2.555,62,0.357,66,0.076,67,0.295,68,0.564,225,0.005,226,0.005,303,3.53,307,1.115,463,4.239,475,1.28,480,1.352,490,0.897,539,1.79,549,2.839,655,0.034,659,2.987,660,1.617,674,1.019,717,2.469,734,3.881,947,2.755,1008,6.347,1117,0.926,1131,1.534,1184,1.037,1188,1.619,1306,3.867,1313,3.53,1372,2.348,1396,4.113,1400,4.117,1402,4.361,1405,3.028,1432,3.775,1447,6.285,1451,3.946,1497,3.028,1501,3.907,1528,4.39,1538,3.393,1549,2.93,1565,4.409,1566,4.409,1573,5.527,1574,3.53,1580,4.821,1581,5.363,1586,4.997,1592,3.699,1593,5.198,1595,3.028,1598,3.699,1599,4.821,1601,3.028,1602,3.53,1604,3.699,1605,4.821,1606,3.699,1607,5.119,1612,4.131,1677,4.409,1678,5.077,1685,7.047,1688,4.131,1692,3.895,1693,2.93,1694,4.822,1697,4.131,1700,6.347,1707,6.347,1710,4.822,1711,5.769,1712,4.821,1713,6.874,1714,5.423,1715,5.423,1716,5.423,1717,5.423,1718,5.423,1719,5.423,1720,5.423,1721,5.423,1722,5.423,1723,5.423]],["title/interfaces/CryptoGraphPrice.html",[655,0.023,670,2.508]],["body/interfaces/CryptoGraphPrice.html",[3,0.102,4,0.102,9,0.08,32,0.502,43,0.007,45,0.554,60,0.135,66,0.126,225,0.006,226,0.006,271,1.195,539,1.826,655,0.043,656,3.772,657,1.168,658,5.489,659,3.562,660,1.733,663,1.641,664,5.175,665,2.135,666,2.135,667,5.881,668,5.881,669,5.881,670,4.552,671,5.881,672,5.881,1528,4.538,1551,6.091]],["title/interfaces/CryptoList.html",[655,0.023,1121,1.208]],["body/interfaces/CryptoList.html",[3,0.101,4,0.101,9,0.079,11,0.925,32,0.498,43,0.007,45,0.604,60,0.134,66,0.118,158,2.402,225,0.006,226,0.006,271,1.19,475,1.612,490,0.899,655,0.041,657,1.159,660,1.83,1120,1.792,1121,2.181,1130,2.638,1137,2.738,1138,2.738,1150,2.263,1556,5.834,1557,6.356,1558,6.356]],["title/components/CryptocardComponent.html",[0,1.083,189,1.873]],["body/components/CryptocardComponent.html",[0,1.77,1,1.705,2,2.625,3,0.099,4,0.061,5,1.667,6,1.872,7,1.872,8,1.918,9,0.048,25,1.667,26,4.051,27,3.447,28,2.691,30,2.691,32,0.301,35,2.036,38,1.618,40,2.391,41,2.391,43,0.007,44,0.754,45,0.46,60,0.114,62,0.284,66,0.061,67,0.235,94,3.272,95,4.597,96,4.62,97,4.338,99,2.499,101,1.414,102,3.666,104,4.21,107,1.869,109,1.52,110,0.727,111,3.105,112,3.293,115,4.21,116,1.974,125,2.814,127,3.455,128,2.413,131,2.91,134,3.275,135,3.275,139,3.293,141,5.169,142,5.451,143,5.451,145,3.08,146,6.111,147,2.697,148,2.499,149,2.499,150,3.909,151,3.636,152,2.499,153,2.593,156,4.558,157,4.238,160,3.636,165,4.124,167,2.91,171,3.782,175,1.44,176,2.691,177,2.625,178,1.705,179,3.286,180,1.918,181,1.918,182,1.744,183,2.019,184,2.691,185,1.705,186,1.918,187,1.744,188,1.918,189,3.342,190,1.918,191,1.744,192,1.918,193,1.705,194,1.918,195,1.744,196,1.872,197,1.918,198,1.744,199,1.667,200,1.918,201,1.705,202,1.918,203,1.744,204,1.918,205,1.744,206,1.918,207,1.705,208,1.918,209,1.705,210,1.918,211,1.705,212,1.918,213,1.705,214,1.918,215,1.705,216,1.918,217,1.744,218,1.744,219,1.784,220,1.705,221,1.918,222,1.667,223,1.872,224,1.918,225,0.004,226,0.004,271,0.86,276,3.174,315,3.783,368,3.945,372,4.061,375,2.413,383,3.08,385,2.263,392,2.593,402,4.135,409,2.948,413,2.413,415,3.528,488,2.263,490,0.41,496,0.889,515,1.705,539,0.857,635,3.909,656,3.666,663,0.842,713,2.948,726,2.196,732,2.413,857,3.293,871,4.354,893,3.947,894,2.413,896,6.524,901,4.135,910,3.293,917,4.354,919,3.105,929,4.354,945,4.949,947,3.856,953,4.794,1123,1.257,1131,2.04,1133,1.166,1402,3.735,1501,1.872,1528,3.08,1640,3.528,1644,3.528,1724,3.844,1725,6.062,1726,7.002,1727,6.062,1728,4.949,1729,6.062,1730,4.323,1731,4.323,1732,4.323,1733,2.948,1734,4.323,1735,3.844,1736,4.323,1737,4.323,1738,4.323,1739,4.949,1740,5.391,1741,5.391,1742,3.504,1743,6.062,1744,4.949,1745,6.062,1746,3.528,1747,3.844,1748,3.293,1749,3.293,1750,5.715,1751,3.909,1752,3.293,1753,7.002,1754,6.062,1755,4.323,1756,6.062,1757,4.323,1758,4.323,1759,4.323,1760,4.323,1761,4.323,1762,6.062,1763,3.844,1764,4.323,1765,3.293]],["title/components/CryptosimplecardComponent.html",[0,1.083,191,1.873]],["body/components/CryptosimplecardComponent.html",[0,1.756,1,1.673,2,2.591,3,0.098,4,0.06,5,1.637,6,1.837,7,3.002,8,1.883,9,0.047,11,0.441,25,1.637,26,4.044,27,3.44,28,2.656,30,2.656,32,0.296,33,1.299,35,2.016,38,1.692,42,0.921,43,0.007,44,0.841,45,0.495,46,1.23,58,0.375,59,1.567,60,0.112,62,0.279,66,0.06,67,0.231,68,0.441,95,4.067,96,3.629,97,3.942,102,3.133,104,3.825,106,2.453,107,1.474,109,1.064,113,2.894,115,4.391,116,2.202,120,3.459,122,3.733,125,3.896,126,3.464,127,4.055,129,3.774,131,2.037,132,3.87,134,3.745,135,3.233,137,3.896,139,3.233,141,4.893,142,4.082,143,4.082,145,3.04,146,5.407,148,4.589,149,4.007,150,3.341,151,4.515,152,3.459,153,3.589,157,3.341,160,2.545,163,3.774,165,2.796,167,4.219,173,2.763,174,2.763,175,1.413,176,2.656,177,2.591,178,1.673,179,3.26,180,1.883,181,1.883,182,1.712,183,1.993,184,2.656,185,1.673,186,1.883,187,1.712,188,1.883,189,1.712,190,1.883,191,3.037,192,1.883,193,1.673,194,1.883,195,1.712,196,1.837,197,1.883,198,1.712,199,1.637,200,1.883,201,1.673,202,1.883,203,1.712,204,1.883,205,1.712,206,1.883,207,1.673,208,1.883,209,1.673,210,1.883,211,1.673,212,1.883,213,1.673,214,1.883,215,1.673,216,1.883,217,1.712,218,1.712,219,1.752,220,1.673,221,1.883,222,1.637,223,1.837,224,1.883,225,0.004,226,0.004,276,3.133,315,3.745,329,2.222,368,3.716,372,3.825,378,2.222,383,3.04,385,4.156,389,3.233,408,3.733,409,4.082,413,3.341,475,1.255,477,4.716,496,0.873,500,5.256,515,1.673,635,3.341,660,1.23,711,3.896,739,2.894,762,0.938,868,2.894,877,4.559,884,4.559,891,3.048,893,2.763,895,6.164,901,4.082,917,3.048,918,4.885,919,4.298,925,3.774,933,5.659,936,2.763,938,3.774,945,4.885,947,3.522,953,3.589,1123,1.234,1131,2.003,1133,1.871,1286,2.369,1347,2.545,1488,4.979,1501,1.837,1604,2.894,1739,4.885,1746,3.464,1748,3.233,1749,3.233,1750,3.464,1751,2.369,1766,3.774,1767,5.984,1768,6.932,1769,5.984,1770,5.321,1771,4.885,1772,5.984,1773,4.244,1774,4.244,1775,4.244,1776,5.659,1777,4.244,1778,5.321,1779,4.244,1780,5.321,1781,4.885,1782,5.321,1783,6.164,1784,5.984,1785,4.885,1786,4.244,1787,4.244,1788,4.244,1789,3.774,1790,4.244,1791,5.984,1792,4.244,1793,7.528,1794,3.774,1795,3.774,1796,3.464,1797,4.244,1798,4.244,1799,5.984,1800,5.321,1801,4.244,1802,4.244,1803,3.464,1804,4.244,1805,3.774,1806,4.244,1807,4.244]],["title/components/CryptoviewPage.html",[0,1.083,193,1.831]],["body/components/CryptoviewPage.html",[0,1.611,1,0.933,2,1.662,3,0.054,4,0.033,5,0.913,6,1.025,7,1.025,8,1.051,9,0.026,11,0.636,13,1.585,16,1.615,17,1.7,19,2.263,21,1.229,22,2.258,25,0.913,26,3.752,27,3.172,28,1.704,30,1.704,32,0.165,33,0.833,35,1.116,37,1.867,38,1.812,40,2.585,41,1.514,42,1.499,43,0.007,44,0.776,45,0.547,46,1.145,47,2.799,51,1.322,54,2.83,55,2.916,56,3.341,58,0.674,59,2.55,60,0.152,61,0.856,62,0.156,63,0.977,64,1.136,65,1.368,66,0.033,67,0.129,68,0.812,69,1.106,70,2.761,71,1.368,74,3.647,94,2.861,95,2.074,96,2.916,97,4.17,98,1.322,99,3.539,101,0.552,102,2.01,104,4.115,105,3.152,106,3.22,107,1.508,109,0.963,114,1.477,115,4.115,116,1.933,120,3.79,123,4.397,125,3.626,127,4.019,131,2.939,134,3.885,135,3.542,137,1.541,141,2.799,142,1.615,143,1.615,145,1.203,148,3.79,149,2.219,150,1.322,152,2.219,153,2.302,157,1.322,158,1.036,160,3.672,165,2.603,167,1.843,171,1.477,175,1.279,176,1.704,177,2.097,178,0.933,179,2.412,180,1.051,181,1.051,182,0.955,183,1.279,184,1.704,185,0.933,186,1.051,187,0.955,188,1.051,189,0.955,190,1.051,191,0.955,192,1.051,193,2.836,194,1.051,195,0.955,196,2.097,197,1.051,198,0.955,199,0.913,200,1.051,201,0.933,202,1.051,203,0.955,204,1.051,205,0.955,206,1.051,207,0.933,208,1.051,209,0.933,210,1.051,211,0.933,212,1.051,213,0.933,214,1.051,215,0.933,216,1.051,217,0.955,218,0.955,219,0.977,220,1.909,221,1.051,222,0.913,223,1.025,224,1.051,225,0.003,226,0.003,233,1.168,250,0.913,254,0.874,255,0.893,261,0.893,262,2.916,271,0.545,272,2.39,276,1.239,277,0.493,307,1.048,311,1.279,354,0.622,364,1.239,368,1.168,375,1.322,385,1.239,389,1.803,401,2.219,406,3.953,408,1.477,409,1.615,413,1.322,424,1.932,448,3.303,452,2.704,456,2.916,461,0.838,475,1.109,480,0.926,486,2.618,488,2.01,490,0.705,496,1.528,498,0.639,501,1.615,502,2.105,503,1.541,504,2.395,515,2.585,526,1.42,527,2.074,533,1.423,539,1.669,549,1.239,582,0.893,596,2.074,606,2.704,630,4.306,634,1.7,635,4.7,656,2.01,670,2.616,678,2.143,681,3.11,686,4.682,689,4.682,690,3.475,695,2.618,696,3.152,703,3.021,706,3.133,710,3.152,713,2.618,714,2.757,719,2.395,720,2.395,721,2.302,722,2.302,726,1.95,732,2.143,758,2.704,771,0.821,776,1.615,818,1.541,820,3.021,826,1.541,829,3.478,830,4.959,832,3.478,835,1.7,836,1.541,837,1.7,843,1.42,857,2.924,868,1.615,871,1.7,887,2.105,891,1.7,893,3.986,914,2.757,947,1.203,953,2.904,984,1.615,1123,0.688,1131,1.783,1133,1.503,1150,0.639,1175,1.182,1188,1.276,1209,1.819,1231,1.682,1276,2.395,1286,2.143,1347,4.313,1388,1.42,1402,3.933,1405,2.143,1500,2.757,1501,2.412,1528,4.175,1532,2.757,1549,2.074,1551,3.799,1602,3.152,1607,4.268,1611,2.618,1693,2.074,1698,3.021,1728,4.997,1733,2.618,1739,3.133,1740,3.414,1741,3.414,1742,4.414,1744,3.133,1765,1.803,1794,3.414,1808,2.105,1809,8.714,1810,2.924,1811,3.414,1812,3.839,1813,3.414,1814,4.842,1815,3.839,1816,4.306,1817,4.953,1818,5.57,1819,3.839,1820,3.839,1821,5.57,1822,4.842,1823,3.839,1824,2.367,1825,3.953,1826,3.953,1827,3.953,1828,3.839,1829,2.499,1830,3.839,1831,2.924,1832,3.414,1833,2.367,1834,3.414,1835,3.133,1836,2.924,1837,2.367,1838,3.839,1839,5.636,1840,5.57,1841,3.839,1842,6.556,1843,2.367,1844,3.133,1845,3.839,1846,2.367,1847,6.905,1848,3.839,1849,2.367,1850,2.143,1851,2.367,1852,2.105,1853,2.367,1854,2.367,1855,1.932,1856,1.803,1857,6.556,1858,2.367,1859,2.618,1860,2.367,1861,2.367,1862,2.367,1863,2.367,1864,2.367,1865,2.367,1866,2.367,1867,2.367,1868,2.367,1869,2.367,1870,2.105,1871,1.932,1872,1.932,1873,1.7,1874,2.367,1875,2.367,1876,2.367,1877,2.367,1878,2.367,1879,2.367,1880,2.367,1881,1.932,1882,1.932,1883,1.932,1884,2.367,1885,2.367,1886,3.839,1887,2.367,1888,3.839,1889,3.839,1890,3.839,1891,3.839,1892,3.839,1893,3.839,1894,3.839,1895,3.839,1896,3.839,1897,3.839,1898,3.839,1899,3.839,1900,3.839,1901,3.839,1902,3.839,1903,3.839,1904,2.367,1905,2.367,1906,3.839,1907,2.367,1908,3.839,1909,2.367,1910,2.367,1911,2.367,1912,2.367,1913,2.367,1914,2.367,1915,2.367,1916,2.367,1917,2.367,1918,2.367,1919,2.367,1920,2.367,1921,2.367,1922,4.842,1923,2.367,1924,2.367,1925,2.367,1926,2.367,1927,3.839,1928,2.367,1929,2.367,1930,4.842,1931,2.367,1932,1.932,1933,2.367,1934,2.367,1935,2.105,1936,2.367,1937,2.367,1938,2.367,1939,2.105,1940,2.367,1941,2.367,1942,2.105,1943,2.367,1944,2.367,1945,2.367,1946,1.932,1947,2.367,1948,3.839,1949,2.105,1950,4.842,1951,4.842,1952,4.842,1953,4.842,1954,2.367,1955,2.367,1956,2.367,1957,2.924,1958,3.839,1959,3.839,1960,2.367,1961,2.367,1962,2.367,1963,2.367,1964,2.367,1965,2.367,1966,6.122,1967,3.414,1968,3.414,1969,3.839,1970,2.105,1971,2.367,1972,3.839,1973,2.367,1974,2.367,1975,2.367,1976,2.367,1977,2.367,1978,2.367,1979,2.367,1980,2.367,1981,3.839,1982,2.367,1983,3.839,1984,2.367,1985,2.367,1986,2.367,1987,2.367,1988,2.367,1989,2.367,1990,2.367,1991,2.367,1992,2.367,1993,2.367,1994,2.105,1995,2.367,1996,2.367,1997,2.367,1998,2.105,1999,2.105,2000,4.306,2001,2.105,2002,2.105,2003,2.924,2004,2.105,2005,2.367,2006,2.105,2007,2.367,2008,3.839,2009,3.839,2010,3.839,2011,3.839,2012,3.839,2013,2.367,2014,2.367,2015,2.367,2016,2.367,2017,2.367,2018,2.367,2019,3.839,2020,2.367,2021,2.367,2022,2.367,2023,2.367,2024,2.367,2025,2.367,2026,2.367,2027,2.367,2028,2.367,2029,2.367,2030,2.367,2031,2.367,2032,3.839,2033,5.57,2034,2.367,2035,2.367]],["title/modules/CryptoviewPageModule.html",[227,1.402,2036,3.537]],["body/modules/CryptoviewPageModule.html",[3,0.09,4,0.09,9,0.07,43,0.007,60,0.181,62,0.418,66,0.09,67,0.346,175,2.117,193,3.639,220,3.639,222,3.559,225,0.006,226,0.006,227,1.92,229,2.348,230,2.894,231,4.432,232,3.328,233,3.138,234,2.452,239,4.093,240,3.328,241,2.753,243,3.015,244,3.082,245,4.364,246,3.435,247,4.364,248,2.894,249,4.093,250,2.452,251,3.55,253,3.435,254,2.348,255,2.399,256,3.55,1742,5.335,1813,5.653,1870,5.653,1871,5.189,2036,7.451,2037,5.653,2038,5.653,2039,5.653,2040,6.629,2041,6.295,2042,6.357,2043,7.817,2044,5.653,2045,5.653,2046,5.653,2047,6.357,2048,6.357]],["title/modules/CryptoviewPageRoutingModule.html",[227,1.402,2040,3.335]],["body/modules/CryptoviewPageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,193,3.339,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,2040,6.081,2044,6.459,2049,7.264]],["title/pipes/CurrencyPipe.html",[1742,2.684,1829,3.023]],["body/pipes/CurrencyPipe.html",[3,0.089,4,0.089,9,0.07,11,0.809,19,3.637,23,0.985,25,2.434,33,1.37,38,1.346,42,1.37,43,0.007,44,0.838,45,0.415,46,1.298,58,0.687,60,0.118,62,0.415,66,0.089,67,0.343,68,0.656,225,0.006,226,0.006,354,1.368,383,3.207,490,0.919,496,1.894,717,3.543,734,4.548,1133,2.486,1352,5.59,1402,4.47,1404,5.929,1536,6.008,1602,5.89,1742,5.092,1829,5.735,2003,6.892,2050,4.809,2051,5.613,2052,8.809,2053,7.783,2054,7.783,2055,6.921,2056,6.312,2057,6.921]],["title/components/CustomGenderComponent.html",[0,1.083,195,1.873]],["body/components/CustomGenderComponent.html",[0,2.078,1,1.426,2,2.308,3,0.051,4,0.051,5,2.442,6,1.565,7,1.565,8,1.605,9,0.04,11,0.81,19,2.491,20,2.88,23,1.091,24,3.326,25,1.394,26,3.976,27,3.378,28,2.366,30,2.366,32,0.252,33,1.157,34,3.903,35,1.55,38,1.93,42,1.796,43,0.007,44,0.906,45,0.573,46,1.702,51,2.977,54,2.709,55,2.791,58,0.731,59,3.405,60,0.131,62,0.238,66,0.051,67,0.197,68,0.775,70,3.221,74,2.811,175,1.204,176,2.366,177,2.308,178,1.426,179,3.026,180,1.605,181,1.605,182,1.458,183,1.776,184,2.366,185,1.426,186,1.605,187,1.458,188,1.605,189,1.458,190,1.605,191,1.458,192,1.605,193,1.426,194,1.605,195,3.146,196,3.721,197,1.605,198,1.458,199,1.394,200,1.605,201,1.426,202,1.605,203,1.458,204,1.605,205,1.458,206,1.605,207,1.426,208,1.605,209,1.426,210,1.605,211,1.426,212,1.605,213,1.426,214,1.605,215,1.426,216,1.605,217,1.458,218,1.458,219,1.492,220,1.426,221,1.605,222,1.394,223,1.565,224,1.605,225,0.004,226,0.004,233,2.631,248,1.646,254,2.339,255,1.364,271,0.756,277,0.685,280,2.819,290,5.02,295,4.061,296,4.55,311,2.88,456,3.316,467,4.061,488,3.66,490,0.601,496,1.913,505,2.491,515,2.939,516,5.705,533,1.362,534,4.508,582,1.289,620,5.631,622,5.631,678,2.977,681,3.903,700,2.491,703,4.361,711,3.471,713,5.319,758,4.161,762,1.399,771,1.254,1020,6.366,1029,3.636,1222,1.921,1294,4.061,1347,3.197,1423,5.02,1637,4.352,1855,4.352,1856,4.061,1859,3.636,1946,6.898,2058,8.107,2059,7.442,2060,3.215,2061,3.829,2062,5.331,2063,4.741,2064,6.99,2065,5.331,2066,5.331,2067,4.352,2068,5.331,2069,4.352,2070,5.331,2071,6.333,2072,5.331,2073,6.333,2074,5.331,2075,6.333,2076,5.331,2077,7.453,2078,6.333,2079,5.631,2080,6.333,2081,5.331,2082,5.331,2083,5.331,2084,5.331,2085,5.331,2086,6.99,2087,5.331,2088,3.215,2089,5.331,2090,3.615,2091,3.615,2092,5.331,2093,5.331,2094,3.615,2095,6.99,2096,5.331,2097,5.331,2098,3.615,2099,8.277,2100,6.99,2101,4.741,2102,5.331,2103,3.615,2104,4.061,2105,5.331,2106,3.615,2107,3.615,2108,5.331,2109,5.331,2110,3.615,2111,4.352,2112,5.331,2113,3.615,2114,5.331,2115,5.331,2116,3.615,2117,4.741,2118,3.615,2119,3.615,2120,5.331,2121,5.331,2122,5.331,2123,5.331,2124,5.331,2125,5.331,2126,3.615,2127,3.615,2128,3.615,2129,2.951,2130,5.331,2131,3.615,2132,3.615,2133,3.615,2134,5.331,2135,3.615,2136,3.615,2137,3.615,2138,3.615,2139,3.615,2140,3.615,2141,3.615,2142,3.615,2143,3.615,2144,3.615,2145,3.615,2146,3.615,2147,3.615]],["title/interfaces/Data.html",[307,0.584,655,0.023]],["body/interfaces/Data.html",[3,0.075,4,0.051,9,0.04,11,0.658,23,0.564,32,0.252,43,0.007,44,0.774,45,0.35,58,0.769,60,0.14,62,0.237,66,0.135,67,0.196,68,0.926,101,1.476,107,1.558,109,1.587,110,1.175,116,1.646,133,1.05,158,1.708,225,0.004,226,0.004,263,1.36,271,0.755,277,1.085,279,1.095,297,1.616,307,1.202,327,0.784,330,1.198,354,1.494,475,1.678,480,1.583,490,0.929,493,1.203,496,0.742,498,1.437,533,0.922,539,1.828,576,1.766,582,0.666,655,0.046,657,0.585,660,1.436,663,0.703,665,1.07,666,1.07,674,0.678,737,1.646,762,1.543,873,1.203,1112,2.758,1113,1.203,1114,2.531,1115,2.374,1116,2.74,1117,0.698,1118,1.549,1119,1.133,1120,1.868,1121,1.938,1122,0.993,1123,1.05,1124,1.672,1125,1.911,1126,1.774,1127,1.774,1128,1.227,1129,1.739,1130,2.207,1131,1.913,1132,2.207,1133,1.708,1134,1.179,1135,1.227,1136,1.179,1137,1.739,1138,1.739,1139,1.227,1140,1.739,1141,2.281,1142,1.179,1143,1.227,1144,1.179,1145,1.179,1146,1.227,1147,1.179,1148,1.227,1149,1.227,1150,1.437,1151,1.179,1152,1.739,1153,1.739,1154,1.156,1155,1.227,1156,1.179,1157,1.227,1158,1.179,1159,1.227,1160,1.179,1161,1.227,1162,1.179,1163,1.227,1164,1.179,1165,1.091,1166,1.739,1167,1.011,1168,1.05,1169,1.011,1170,1.011,1171,1.227,1172,1.179,1173,1.227,1174,1.227,1175,1.948,1176,2.15,1177,2.15,1178,2.15,1179,1.227,1180,2.15,1181,1.179,1182,2.066,1183,2.066,1184,0.691,1185,1.156,1186,1.6,1187,1.74,1188,1.22,1189,0.957,1190,1.424,1191,2.432,1192,1.05,1193,0.957,1194,1.133,1195,1.227,1196,1.07,1197,1.156,1198,1.156,1199,1.227,1200,1.227,1201,1.156,1202,1.156,1203,2.649,1204,2.878,1205,2.902,1206,1.156,1207,2.207,1208,0.957,1209,2.432,1210,1.227,1211,1.227,1212,1.705,1213,1.705,1214,1.227,1215,1.133,1216,1.609,1217,1.133,1218,1.227,1219,1.227,1220,1.227,1221,1.133,1222,1.74,1223,1.227,1224,1.64,1225,1.227,1226,1.133,1227,1.227,1228,1.227,1229,1.203,1230,1.133,1231,1.609,1232,1.133,1233,1.227,1234,1.227,1235,1.227,1236,1.227,1237,1.578,1238,1.133,1239,1.227,1240,1.227,1241,1.227,1242,1.227,1243,1.133,1244,1.227,1245,1.227,1246,1.227,1247,1.227,1248,1.227,1249,1.227,1250,1.227,1251,1.133,1252,1.091,1253,1.07,1254,1.227,1255,1.227,1256,1.227,1257,1.227,1258,1.227,1259,1.227,1260,1.227,1261,1.227,1262,1.227,1263,1.227,1264,1.227,1265,1.81,1266,1.81,1267,1.705,1268,1.81,1269,1.227,1270,1.81]],["title/interfaces/Data2.html",[655,0.023,1152,1.516]],["body/interfaces/Data2.html",[3,0.075,4,0.051,9,0.04,11,0.658,23,0.564,32,0.252,43,0.007,44,0.774,45,0.35,58,0.769,60,0.14,62,0.237,66,0.135,67,0.196,68,0.926,101,1.476,107,1.558,109,1.587,110,1.175,116,1.646,133,1.05,158,1.708,225,0.004,226,0.004,263,1.36,271,0.755,277,1.085,279,1.095,297,1.616,307,1.2,327,0.784,330,1.198,354,1.494,475,1.678,480,1.583,490,0.929,493,1.203,496,0.742,498,1.437,533,0.922,539,1.828,576,1.766,582,0.666,655,0.046,657,0.585,660,1.436,663,0.703,665,1.07,666,1.07,674,0.678,737,1.646,762,1.543,873,1.203,1112,2.632,1113,1.203,1114,2.531,1115,2.374,1116,2.74,1117,0.698,1118,1.549,1119,1.133,1120,1.868,1121,1.938,1122,0.993,1123,1.05,1124,1.672,1125,1.911,1126,1.774,1127,1.774,1128,1.227,1129,1.739,1130,2.207,1131,1.913,1132,2.207,1133,1.708,1134,1.179,1135,1.227,1136,1.179,1137,1.739,1138,1.739,1139,1.227,1140,1.739,1141,2.281,1142,1.179,1143,1.227,1144,1.179,1145,1.179,1146,1.227,1147,1.179,1148,1.227,1149,1.227,1150,1.437,1151,1.179,1152,2.066,1153,2.281,1154,1.156,1155,1.227,1156,1.179,1157,1.227,1158,1.179,1159,1.227,1160,1.179,1161,1.227,1162,1.179,1163,1.227,1164,1.179,1165,1.091,1166,1.739,1167,1.011,1168,1.05,1169,1.011,1170,1.011,1171,1.227,1172,1.179,1173,1.227,1174,1.227,1175,1.948,1176,2.15,1177,2.15,1178,2.15,1179,1.227,1180,2.15,1181,1.179,1182,2.066,1183,2.066,1184,0.691,1185,1.156,1186,1.6,1187,1.74,1188,1.22,1189,0.957,1190,1.424,1191,2.432,1192,1.05,1193,0.957,1194,1.133,1195,1.227,1196,1.07,1197,1.156,1198,1.156,1199,1.227,1200,1.227,1201,1.156,1202,1.156,1203,2.649,1204,2.878,1205,2.902,1206,1.156,1207,2.207,1208,0.957,1209,2.432,1210,1.227,1211,1.227,1212,1.705,1213,1.705,1214,1.227,1215,1.133,1216,1.609,1217,1.133,1218,1.227,1219,1.227,1220,1.227,1221,1.133,1222,1.74,1223,1.227,1224,1.64,1225,1.227,1226,1.133,1227,1.227,1228,1.227,1229,1.203,1230,1.133,1231,1.609,1232,1.133,1233,1.227,1234,1.227,1235,1.227,1236,1.227,1237,1.578,1238,1.133,1239,1.227,1240,1.227,1241,1.227,1242,1.227,1243,1.133,1244,1.227,1245,1.227,1246,1.227,1247,1.227,1248,1.227,1249,1.227,1250,1.227,1251,1.133,1252,1.091,1253,1.07,1254,1.227,1255,1.227,1256,1.227,1257,1.227,1258,1.227,1259,1.227,1260,1.227,1261,1.227,1262,1.227,1263,1.227,1264,1.227,1265,1.81,1266,1.81,1267,1.705,1268,1.81,1269,1.227,1270,1.81]],["title/interfaces/Favoritelist.html",[655,0.023,1129,1.516]],["body/interfaces/Favoritelist.html",[3,0.074,4,0.05,9,0.039,11,0.803,23,0.551,32,0.246,43,0.007,44,0.768,45,0.526,58,0.765,60,0.138,62,0.232,66,0.135,67,0.192,68,0.921,101,1.456,107,1.537,109,1.565,110,1.162,116,1.624,133,1.026,158,2.086,225,0.004,226,0.004,263,1.337,271,0.743,277,1.078,279,1.076,297,1.594,307,1.197,327,0.765,330,1.178,354,1.489,475,1.672,480,1.572,490,0.933,493,1.175,496,0.725,498,1.413,533,0.901,539,1.822,576,1.757,582,0.651,655,0.046,657,0.572,660,1.42,663,0.687,665,1.045,666,1.045,674,0.663,737,1.624,762,1.526,873,1.175,1112,2.255,1113,1.175,1114,2.682,1115,2.719,1116,2.903,1117,0.686,1118,1.522,1119,1.107,1120,1.85,1121,1.919,1122,0.97,1123,1.026,1124,1.643,1125,1.885,1126,1.743,1127,1.743,1128,1.199,1129,2.038,1130,2.435,1131,1.942,1132,2.186,1133,1.684,1134,1.152,1135,1.199,1136,1.152,1137,1.709,1138,1.709,1139,1.199,1140,1.709,1141,2.255,1142,1.152,1143,1.199,1144,1.152,1145,1.152,1146,1.199,1147,1.152,1148,1.199,1149,1.199,1150,1.413,1151,1.152,1152,1.709,1153,1.709,1154,1.129,1155,1.199,1156,1.152,1157,1.199,1158,1.152,1159,1.199,1160,1.152,1161,1.199,1162,1.152,1163,1.199,1164,1.152,1165,1.065,1166,1.709,1167,0.988,1168,1.026,1169,0.988,1170,0.988,1171,1.199,1172,1.152,1173,1.199,1174,1.199,1175,1.922,1176,2.121,1177,2.121,1178,2.121,1179,1.199,1180,2.121,1181,1.152,1182,2.038,1183,2.038,1184,0.675,1185,1.129,1186,1.582,1187,1.716,1188,1.199,1189,0.934,1190,1.404,1191,2.409,1192,1.026,1193,0.934,1194,1.107,1195,1.199,1196,1.045,1197,1.129,1198,1.129,1199,1.199,1200,1.199,1201,1.129,1202,1.129,1203,2.627,1204,2.865,1205,2.887,1206,1.129,1207,2.186,1208,0.934,1209,2.409,1210,1.199,1211,1.199,1212,1.676,1213,1.676,1214,1.199,1215,1.107,1216,1.581,1217,1.107,1218,1.199,1219,1.199,1220,1.199,1221,1.107,1222,1.716,1223,1.199,1224,1.612,1225,1.199,1226,1.107,1227,1.199,1228,1.199,1229,1.175,1230,1.107,1231,1.581,1232,1.107,1233,1.199,1234,1.199,1235,1.199,1236,1.199,1237,1.551,1238,1.107,1239,1.199,1240,1.199,1241,1.199,1242,1.199,1243,1.107,1244,1.199,1245,1.199,1246,1.199,1247,1.199,1248,1.199,1249,1.199,1250,1.199,1251,1.107,1252,1.065,1253,1.045,1254,1.199,1255,1.199,1256,1.199,1257,1.199,1258,1.199,1259,1.199,1260,1.199,1261,1.199,1262,1.199,1263,1.199,1264,1.199,1265,1.779,1266,1.779,1267,1.676,1268,1.779,1269,1.199,1270,1.779]],["title/classes/FirebaseAuthMappingService.html",[67,0.253,2148,3.023]],["body/classes/FirebaseAuthMappingService.html",[3,0.107,4,0.06,9,0.047,11,0.859,21,2.551,22,1.892,23,1.181,32,0.299,33,1.308,38,1.699,42,1.729,43,0.007,44,0.861,45,0.524,46,1.638,48,2.548,50,2.866,58,0.765,59,1.583,60,0.131,66,0.107,67,0.233,68,0.901,110,1.014,225,0.004,226,0.004,277,1.243,279,1.555,280,3.069,281,2.976,307,1.136,327,0.931,330,1.702,354,1.13,442,2.934,475,1.092,483,3.257,490,0.919,539,0.85,576,1.969,582,1.112,655,0.042,663,1.837,762,1.54,1051,3.08,1084,3.324,1088,2.744,1114,1.346,1125,1.295,1186,2.087,1296,3.842,1322,3.945,1394,4.465,1412,4.614,1417,4.537,1454,3.156,1492,3.892,1494,2.675,1530,2.894,1537,2.817,1561,2.925,1589,4.718,1670,3.924,1680,4.112,1683,3.366,1684,3.615,1751,3.366,2148,3.924,2149,3.5,2150,4.957,2151,2.179,2152,4.586,2153,4.592,2154,4.112,2155,3.933,2156,6.296,2157,4.921,2158,5.086,2159,4.921,2160,4.112,2161,4.288,2162,4.592,2163,6.296,2164,3.366,2165,3.441,2166,4.288,2167,3.366,2168,3.813,2169,3.366,2170,3.733,2171,3.813,2172,3.366,2173,4.288,2174,3.266,2175,2.317,2176,2.317,2177,4.592,2178,3.266,2179,3.266,2180,3.266,2181,4.112,2182,4.755,2183,3.266,2184,3.08,2185,3.266,2186,2.792,2187,3.266,2188,3.266,2189,3.266,2190,3.266,2191,3.266,2192,3.266,2193,3.266,2194,3.266,2195,3.266,2196,3.266,2197,3.266,2198,5.311,2199,4.03,2200,5.311,2201,4.592,2202,4.592,2203,4.592,2204,3.266,2205,2.792,2206,2.792,2207,2.792]],["title/injectables/FirebaseAuthenticationService.html",[1117,0.609,2208,3.537]],["body/injectables/FirebaseAuthenticationService.html",[3,0.111,4,0.048,9,0.037,11,0.843,19,1.578,20,3.652,21,2.923,22,1.591,23,0.95,32,0.235,33,1.1,35,1.474,38,1.935,40,1.999,42,1.761,43,0.007,44,0.806,45,0.546,46,1.668,48,2.857,50,2.512,51,2.83,58,0.814,59,2.913,60,0.161,61,1.221,62,0.222,64,1.622,66,0.048,67,0.184,68,0.703,70,2.852,101,0.788,225,0.004,226,0.004,241,2.927,262,2.955,271,0.719,272,2.502,277,1.236,279,1.042,280,1.832,327,0.733,330,1.826,354,1.096,442,2.702,444,4.369,461,1.196,474,2.83,475,1.312,483,3.652,490,0.896,496,0.695,498,0.912,505,3.554,515,1.332,522,4.56,533,0.863,534,1.953,543,1.825,576,1.489,582,1.455,596,1.825,640,2.304,655,0.025,659,2.857,663,1.481,674,0.634,712,4.855,717,1.538,734,1.667,762,1.12,771,1.172,973,3.652,978,2.426,979,2.426,986,2.426,987,2.426,988,2.426,990,2.304,995,2.757,1084,1.912,1088,2.307,1117,0.664,1184,0.646,1186,1.549,1208,1.791,1221,1.591,1296,3.68,1297,3.795,1298,4.855,1303,5.518,1306,4.011,1341,4.369,1344,2.757,1347,2.026,1371,6.592,1372,1.463,1375,4.634,1377,4.634,1378,4.634,1379,4.634,1380,4.634,1381,3.861,1382,3.861,1383,3.861,1384,3.861,1385,4.634,1388,3.04,1389,6.009,1390,3.861,1396,1.667,1397,3.3,1400,3.792,1401,3.457,1402,3.554,1403,3.861,1404,2.573,1405,2.83,1406,2.304,1408,4.634,1409,3.64,1412,3.774,1413,3.861,1415,4.611,1416,3.861,1421,3.861,1423,3.64,1424,3.861,1425,3.861,1427,2.573,1429,4.634,1430,2.573,1432,1.622,1433,2.573,1435,2.573,1436,2.573,1438,2.026,1439,2.757,1441,2.757,1442,2.757,1443,2.199,1444,2.757,1461,3.004,1488,4.855,1492,2.83,1535,2.368,1574,4.401,1582,2.426,1593,5.625,1617,2.199,1624,2.426,1625,4.94,1687,3.861,2150,3.04,2152,4.261,2154,4.611,2155,3.003,2175,1.825,2176,1.825,2207,2.199,2208,3.861,2209,3.004,2210,5.068,2211,5.15,2212,4.507,2213,4.507,2214,4.507,2215,4.507,2216,5.068,2217,4.149,2218,3.378,2219,3.378,2220,5.068,2221,4.137,2222,3.378,2223,3.378,2224,4.122,2225,4.507,2226,6.76,2227,3.378,2228,5.068,2229,3.378,2230,5.203,2231,3.861,2232,4.507,2233,4.507,2234,4.507,2235,3.004,2236,3.004,2237,3.004,2238,3.004,2239,3.004,2240,3.004,2241,3.004,2242,3.004,2243,3.004,2244,3.004,2245,3.004,2246,3.378,2247,2.573,2248,6.764,2249,3.378,2250,3.378,2251,3.004,2252,3.004,2253,3.378,2254,2.573,2255,2.757,2256,2.757,2257,3.004,2258,3.004,2259,3.004,2260,3.004,2261,3.004,2262,3.004,2263,3.004,2264,3.004,2265,3.004,2266,3.378,2267,3.378,2268,6.083,2269,3.378,2270,3.378,2271,3.378,2272,3.378,2273,3.378,2274,5.068,2275,3.378,2276,3.378,2277,3.378,2278,3.378,2279,3.378,2280,3.378,2281,6.083,2282,5.068,2283,5.068,2284,5.068,2285,5.068,2286,3.378,2287,3.378,2288,3.378,2289,3.378,2290,3.378,2291,3.378,2292,3.378,2293,3.378,2294,3.378,2295,3.004,2296,3.378,2297,5.068,2298,3.378,2299,3.378,2300,3.378,2301,3.378,2302,3.378,2303,3.378,2304,3.378,2305,3.378]],["title/injectables/FirebaseMainService.html",[1016,3.335,1117,0.609]],["body/injectables/FirebaseMainService.html",[3,0.077,4,0.077,9,0.06,11,0.737,15,5.093,20,3.831,22,2.226,23,1.231,27,3.348,32,0.38,33,1.539,35,2.062,38,1.926,41,3.733,42,1.183,43,0.007,44,0.541,45,0.549,46,1.121,58,0.836,60,0.166,61,1.971,62,0.358,66,0.077,67,0.296,68,0.566,70,3.377,110,1.193,225,0.005,226,0.005,271,1.006,311,3.831,354,1.278,469,6.417,655,0.034,674,1.024,985,4.152,1016,5.093,1117,0.929,1184,1.042,1237,2.474,1276,4.424,1313,3.548,1372,2.36,1530,3.404,2152,4.648,2217,5.694,2230,6.835,2254,4.152,2255,4.449,2306,4.847,2307,4.837,2308,7.091,2309,6.306,2310,6.306,2311,7.009,2312,7.423,2313,7.696,2314,7.696,2315,5.45,2316,7.091,2317,7.423,2318,7.882,2319,5.45,2320,7.889,2321,8.033,2322,5.45,2323,5.45,2324,5.45,2325,5.45,2326,5.45,2327,4.847,2328,5.45,2329,5.45,2330,7.091,2331,5.45,2332,7.091,2333,5.45,2334,7.091,2335,5.45]],["title/injectables/FirebaseMediaService.html",[1117,0.609,2336,3.537]],["body/injectables/FirebaseMediaService.html",[3,0.07,4,0.07,9,0.083,11,0.781,21,2.13,22,2.711,25,2.566,27,2.406,32,0.345,33,1.444,35,1.935,37,2.899,38,1.418,40,2.624,41,3.169,42,1.444,43,0.007,44,0.661,45,0.438,46,1.368,50,2.788,58,0.587,60,0.172,61,2.406,62,0.326,63,2.044,64,2.377,66,0.07,67,0.409,68,0.872,69,2.313,70,2.906,101,1.552,110,1.12,225,0.005,226,0.005,262,2.935,272,3.71,277,0.966,354,0.803,413,4.822,442,2.216,452,2.764,461,1.753,490,0.631,494,6.684,505,3.11,533,1.7,543,2.675,581,5.729,582,1.386,596,4.061,659,3.397,674,0.93,700,3.11,737,2.091,771,1.717,774,3.089,848,5.917,973,4.846,986,4.78,989,3.556,1016,5.399,1117,0.872,1184,0.947,1276,4.152,1306,3.544,1344,4.041,1372,2.144,1376,4.78,1394,2.675,1396,3.285,1398,3.991,1409,4.78,1412,3.715,1420,6.123,1446,3.556,1478,5.622,1480,3.771,1482,5.432,1483,6.595,1484,5.432,1486,6.123,1496,3.029,1576,3.847,1577,4.152,1586,5.179,1593,3.089,1596,5.069,1617,3.223,1624,3.556,1625,3.377,1683,2.764,2152,4.146,2217,5.127,2221,5.432,2230,5.773,2233,5.917,2234,5.917,2248,5.917,2251,6.684,2252,4.402,2254,3.771,2255,4.041,2295,4.402,2336,6.123,2337,5.917,2338,5.917,2339,4.402,2340,4.951,2341,5.917,2342,4.78,2343,4.951,2344,6.654,2345,5.917,2346,6.654,2347,6.654,2348,5.917,2349,6.654,2350,6.654,2351,4.041,2352,4.951,2353,4.951,2354,4.951,2355,4.951,2356,4.951,2357,4.951,2358,4.402,2359,4.402,2360,4.951,2361,4.951,2362,4.951,2363,4.951,2364,4.951,2365,4.951,2366,4.951,2367,4.951,2368,4.951,2369,4.951,2370,4.951,2371,4.951,2372,4.951,2373,4.951,2374,4.951,2375,4.951,2376,4.951,2377,4.951,2378,4.951,2379,4.951,2380,4.951,2381,4.951,2382,4.951,2383,4.951]],["title/injectables/FirebaseUserMapping.html",[1117,0.609,2384,3.167]],["body/injectables/FirebaseUserMapping.html",[3,0.058,4,0.058,9,0.045,11,0.815,14,2.596,21,1.873,22,1.836,23,1.063,32,0.286,33,1.27,38,1.908,42,1.943,43,0.007,44,0.918,45,0.589,46,1.95,50,1.425,58,0.811,59,3.166,60,0.147,62,0.27,66,0.096,67,0.224,68,0.872,101,1.829,110,0.984,158,1.109,183,1.948,225,0.004,226,0.004,277,1.244,279,1.203,280,2.835,281,3.362,297,2.082,307,1.218,327,0.892,354,1.271,480,1.559,490,0.881,576,1.763,582,1.632,655,0.036,663,1.588,674,0.772,692,4.202,725,3.509,737,1.522,762,1.293,1005,2.952,1084,2.207,1117,0.767,1118,2.158,1119,1.29,1120,1.967,1121,2.181,1122,1.13,1133,1.109,1150,1.579,1184,0.786,1186,1.7,1187,2.432,1188,1.867,1189,1.55,1190,1.316,1192,1.701,1193,1.55,1194,1.836,1196,1.218,1197,1.316,1198,1.316,1201,1.316,1202,1.316,1208,1.805,1212,1.316,1213,1.316,1216,2.241,1217,1.836,1226,1.836,1232,1.836,1238,1.836,1243,1.836,1253,1.734,1267,1.316,1309,3.509,1337,3.809,1340,4.202,1372,1.78,1394,4.631,1530,2.808,1535,2.734,1537,3.468,1683,4.786,1684,5.141,1850,3.266,2150,2.465,2151,2.088,2152,3.913,2158,4.379,2168,3.655,2205,2.676,2206,2.676,2307,3.99,2384,3.99,2385,6.886,2386,4.775,2387,4.775,2388,4.775,2389,4.775,2390,4.775,2391,3.509,2392,3.509,2393,4.775,2394,4.775,2395,4.775,2396,4.775,2397,3.65,2398,3.65,2399,4.775,2400,3.65,2401,4.11,2402,4.11,2403,4.457,2404,4.11,2405,4.202,2406,4.11,2407,4.11,2408,4.451,2409,3.937,2410,4.11,2411,4.202,2412,4.11,2413,4.451,2414,5.33,2415,4.11,2416,4.202,2417,4.11,2418,4.11,2419,3.355,2420,2.952,2421,3.355,2422,3.355,2423,3.355,2424,3.355,2425,3.355,2426,3.355,2427,3.355,2428,3.355,2429,3.355]],["title/interfaces/Formats.html",[655,0.023,1175,1.43]],["body/interfaces/Formats.html",[3,0.075,4,0.051,9,0.04,11,0.655,23,0.56,32,0.25,43,0.007,44,0.772,45,0.458,58,0.768,60,0.139,62,0.236,66,0.135,67,0.195,68,0.924,101,1.47,107,1.552,109,1.581,110,1.171,116,1.639,133,1.043,158,1.701,225,0.004,226,0.004,263,1.353,271,0.752,277,1.083,279,1.09,297,1.61,307,1.199,327,0.778,330,1.192,354,1.493,475,1.649,480,1.58,490,0.928,493,1.194,496,0.737,498,1.43,533,0.916,539,1.806,576,1.764,582,0.661,655,0.046,657,0.581,660,1.432,663,0.699,665,1.063,666,1.063,674,0.674,737,1.639,762,1.538,873,2.319,1112,2.273,1113,1.194,1114,2.525,1115,2.366,1116,2.734,1117,0.695,1118,1.541,1119,1.126,1120,1.863,1121,1.932,1122,0.986,1123,1.043,1124,1.664,1125,1.904,1126,1.765,1127,1.765,1128,1.219,1129,1.73,1130,2.201,1131,1.911,1132,2.201,1133,1.701,1134,1.171,1135,1.219,1136,1.171,1137,1.73,1138,1.73,1139,1.219,1140,1.73,1141,2.273,1142,1.171,1143,1.219,1144,1.171,1145,1.171,1146,1.219,1147,1.171,1148,1.219,1149,1.219,1150,1.43,1151,1.171,1152,1.73,1153,1.73,1154,1.148,1155,1.219,1156,1.171,1157,1.219,1158,1.171,1159,1.219,1160,1.171,1161,1.219,1162,1.171,1163,1.219,1164,1.171,1165,1.083,1166,1.73,1167,1.004,1168,1.043,1169,1.004,1170,1.004,1171,1.219,1172,1.171,1173,1.219,1174,1.219,1175,2.144,1176,2.142,1177,2.142,1178,2.142,1179,1.219,1180,2.142,1181,2.273,1182,2.696,1183,2.696,1184,0.686,1185,1.148,1186,1.595,1187,1.733,1188,1.214,1189,0.95,1190,1.418,1191,2.425,1192,1.043,1193,0.95,1194,1.126,1195,1.219,1196,1.063,1197,1.148,1198,1.148,1199,1.219,1200,1.219,1201,1.148,1202,1.148,1203,2.642,1204,2.874,1205,2.897,1206,1.148,1207,2.201,1208,0.95,1209,2.425,1210,1.219,1211,1.219,1212,1.696,1213,1.696,1214,1.219,1215,1.126,1216,1.601,1217,1.126,1218,1.219,1219,1.219,1220,1.219,1221,1.126,1222,1.733,1223,1.219,1224,1.632,1225,1.219,1226,1.126,1227,1.219,1228,1.219,1229,1.194,1230,1.126,1231,1.601,1232,1.126,1233,1.219,1234,1.219,1235,1.219,1236,1.219,1237,1.57,1238,1.126,1239,1.219,1240,1.219,1241,1.219,1242,1.219,1243,1.126,1244,1.219,1245,1.219,1246,1.219,1247,1.219,1248,1.219,1249,1.219,1250,1.219,1251,1.126,1252,1.083,1253,1.063,1254,1.219,1255,1.219,1256,1.219,1257,1.219,1258,1.219,1259,1.219,1260,1.219,1261,1.219,1262,1.219,1263,1.219,1264,1.219,1265,1.801,1266,1.801,1267,1.696,1268,1.801,1269,1.219,1270,1.801]],["title/components/FormularyComponent.html",[0,1.083,198,1.873]],["body/components/FormularyComponent.html",[0,1.537,1,1.266,2,2.112,3,0.045,4,0.045,5,1.239,6,1.391,7,1.391,8,1.425,9,0.035,18,3.504,20,3.187,21,1.028,23,0.762,24,3.681,25,1.239,26,3.92,27,3.326,28,2.165,30,2.165,32,0.224,33,1.059,34,3.679,35,1.419,38,1.891,42,0.697,43,0.007,44,0.655,45,0.583,46,0.66,58,0.521,59,2.179,60,0.123,61,1.161,62,0.211,64,1.542,66,0.045,67,0.265,70,1.161,74,4.131,94,3.311,95,2.636,96,3.45,97,4.183,98,2.724,99,3.41,100,2.091,101,0.749,102,3.45,104,2.479,105,2.091,106,2.82,107,1.453,109,0.805,110,0.821,113,3.328,115,1.632,116,0.835,120,3.41,121,2.19,125,2.091,127,1.462,131,3.402,132,1.793,134,1.735,135,1.735,141,1.856,145,1.632,154,3.504,155,2.307,157,1.793,158,0.867,165,2.28,167,2.342,170,3.538,171,2.004,175,1.07,176,2.165,177,2.112,178,1.266,179,2.853,180,1.425,181,1.425,182,1.295,183,1.625,184,2.165,185,1.266,186,1.425,187,1.295,188,1.425,189,1.295,190,1.425,191,1.295,192,1.425,193,1.266,194,1.425,195,1.295,196,1.391,197,1.425,198,2.658,199,1.239,200,1.425,201,1.266,202,1.425,203,1.295,204,1.425,205,1.295,206,1.425,207,1.266,208,1.425,209,1.266,210,1.425,211,1.266,212,1.425,213,1.266,214,1.425,215,1.266,216,1.425,217,1.295,218,1.295,219,1.326,220,1.266,221,1.425,222,1.239,223,1.391,224,1.425,225,0.004,226,0.004,248,1.462,262,1.091,268,4.833,269,5.246,270,4.338,271,0.692,272,2.912,276,2.554,277,1.026,278,3.717,279,1.744,280,3.066,285,4.733,290,5.739,296,6.015,297,1.246,300,3.982,303,3.176,307,0.743,311,2.636,312,4.494,314,3.982,315,4.508,319,4.494,320,2.856,322,6.086,323,2.856,327,0.697,330,2.06,332,2.856,336,2.856,337,5.246,338,4.338,339,2.856,340,2.856,341,2.856,343,4.338,344,5.246,345,4.338,347,2.856,348,2.856,349,2.856,354,1.068,356,2.856,357,2.856,360,4.338,361,4.338,364,1.681,366,2.82,367,3.679,368,3.683,369,3.717,370,2.307,371,2.307,372,2.997,373,3.328,374,1.926,375,2.724,377,4.024,378,3.089,381,2.926,385,1.681,388,2.307,401,1.856,403,2.004,405,2.856,406,2.622,408,3.044,414,2.19,431,2.447,490,0.758,496,1.213,515,2.326,582,0.9,711,2.091,726,1.632,732,2.724,735,2.091,739,4.024,868,2.19,877,2.447,884,2.447,894,3.294,910,3.717,911,2.307,922,2.307,932,2.19,936,2.091,947,2.479,953,1.926,954,2.856,955,2.856,980,2.447,1084,2.674,1088,2.686,1222,2.249,1252,0.97,1322,1.462,1454,3.089,1488,5.877,1751,2.724,1771,3.982,1776,4.816,1785,4.816,1810,2.447,1957,4.494,2104,2.447,2152,2.832,2224,4.694,2225,2.856,2430,2.856,2431,4.816,2432,4.816,2433,6.589,2434,5.379,2435,6.589,2436,5.9,2437,3.212,2438,4.879,2439,3.982,2440,3.212,2441,3.212,2442,3.212,2443,5.379,2444,4.879,2445,3.212,2446,4.338,2447,4.338,2448,5.9,2449,3.212,2450,4.338,2451,3.717,2452,4.879,2453,4.879,2454,4.879,2455,3.212,2456,5.784,2457,3.212,2458,3.212,2459,2.856,2460,4.879,2461,3.212,2462,3.212,2463,3.212,2464,2.856,2465,3.212,2466,3.212,2467,3.212,2468,3.212,2469,2.856,2470,2.856,2471,3.212,2472,2.856,2473,3.212,2474,3.212,2475,3.212,2476,4.879,2477,5.9,2478,5.246,2479,4.338,2480,4.879,2481,4.879,2482,3.212,2483,3.212,2484,3.982,2485,3.982,2486,3.212,2487,3.212,2488,4.879,2489,5.9,2490,4.879,2491,4.879,2492,3.212,2493,3.212,2494,3.212,2495,3.212,2496,3.212,2497,3.212,2498,3.212,2499,3.212,2500,4.879,2501,4.879,2502,4.338,2503,4.338,2504,5.859,2505,5.859,2506,4.879,2507,4.879,2508,4.879,2509,2.622,2510,2.307,2511,4.024,2512,2.622,2513,2.856,2514,2.856,2515,2.856,2516,3.717,2517,2.856,2518,5.379,2519,3.212,2520,3.212,2521,2.622,2522,3.212,2523,2.447,2524,3.212,2525,3.212]],["title/interfaces/GetAllList.html",[655,0.023,1124,1.458]],["body/interfaces/GetAllList.html",[3,0.073,4,0.049,9,0.039,11,0.645,23,0.546,32,0.244,43,0.007,44,0.765,45,0.551,58,0.764,60,0.138,62,0.23,66,0.135,67,0.19,68,0.92,101,1.448,107,1.529,109,1.557,110,1.157,116,1.615,133,1.016,158,1.675,225,0.004,226,0.004,263,1.328,271,0.737,277,1.076,279,1.511,297,1.585,307,1.196,327,0.758,330,1.653,354,1.487,475,1.67,480,1.568,490,0.933,493,1.164,496,0.719,498,1.403,533,0.893,539,1.82,576,1.753,582,0.645,655,0.046,657,0.567,660,1.414,663,0.681,665,1.036,666,1.036,674,0.656,737,1.615,762,1.811,873,1.164,1112,2.245,1113,1.164,1114,2.676,1115,2.336,1116,2.897,1117,0.681,1118,1.512,1119,1.097,1120,1.843,1121,1.912,1122,0.961,1123,1.016,1124,1.949,1125,2.327,1126,2.448,1127,2.448,1128,2.336,1129,2.245,1130,2.178,1131,1.901,1132,2.178,1133,1.675,1134,1.141,1135,1.188,1136,1.141,1137,1.697,1138,1.697,1139,1.188,1140,1.697,1141,2.245,1142,1.141,1143,1.188,1144,1.141,1145,1.141,1146,1.188,1147,1.141,1148,1.188,1149,1.188,1150,1.403,1151,1.141,1152,1.697,1153,1.697,1154,1.119,1155,1.188,1156,1.141,1157,1.188,1158,1.141,1159,1.188,1160,1.141,1161,1.188,1162,1.141,1163,1.188,1164,1.141,1165,1.056,1166,1.697,1167,0.979,1168,1.016,1169,0.979,1170,0.979,1171,1.188,1172,1.141,1173,1.188,1174,1.188,1175,1.911,1176,2.11,1177,2.11,1178,2.11,1179,1.188,1180,2.11,1181,1.141,1182,2.027,1183,2.027,1184,0.668,1185,1.119,1186,1.575,1187,1.707,1188,1.191,1189,0.926,1190,1.397,1191,2.399,1192,1.016,1193,0.926,1194,1.097,1195,1.188,1196,1.036,1197,1.119,1198,1.119,1199,1.188,1200,1.188,1201,1.119,1202,1.119,1203,2.618,1204,2.859,1205,2.881,1206,1.119,1207,2.178,1208,0.926,1209,2.399,1210,1.188,1211,1.188,1212,1.664,1213,1.664,1214,1.188,1215,1.097,1216,1.57,1217,1.097,1218,1.188,1219,1.188,1220,1.188,1221,1.097,1222,1.707,1223,1.188,1224,1.601,1225,1.188,1226,1.097,1227,1.188,1228,1.188,1229,1.164,1230,1.097,1231,1.57,1232,1.097,1233,1.188,1234,1.188,1235,1.188,1236,1.188,1237,1.541,1238,1.097,1239,1.188,1240,1.188,1241,1.188,1242,1.188,1243,1.097,1244,1.188,1245,1.188,1246,1.188,1247,1.188,1248,1.188,1249,1.188,1250,1.188,1251,1.097,1252,1.056,1253,1.036,1254,1.188,1255,1.188,1256,1.188,1257,1.188,1258,1.188,1259,1.188,1260,1.188,1261,1.188,1262,1.188,1263,1.188,1264,1.188,1265,1.767,1266,1.767,1267,1.664,1268,1.767,1269,1.188,1270,1.767]],["title/components/HomePage.html",[0,1.083,199,1.791]],["body/components/HomePage.html",[0,1.919,1,1.291,2,2.144,3,0.046,4,0.046,5,1.909,6,1.418,7,1.418,8,1.453,9,0.036,11,0.62,13,3.103,15,3.556,21,1.585,22,2.633,25,1.263,26,3.93,27,3.335,28,2.197,30,2.197,32,0.228,33,1.075,34,3.716,35,1.44,36,2.132,37,2.302,38,1.841,40,1.952,41,1.952,42,1.296,43,0.007,44,0.817,45,0.56,46,1.469,47,2.862,54,3.819,55,3.936,58,0.664,59,2.639,60,0.162,61,1.184,62,0.215,63,1.352,64,1.572,65,1.893,66,0.046,67,0.178,68,0.835,69,1.53,70,2.975,71,1.893,72,3.223,74,3.567,94,2.79,95,1.769,96,2.592,97,1.714,99,1.893,104,2.516,109,1.242,111,2.352,114,2.043,115,2.516,116,1.288,121,2.233,123,3.556,127,1.491,137,4.332,141,1.893,144,2.673,145,1.664,156,3.887,157,1.828,165,1.53,167,1.572,170,1.964,175,1.091,176,2.197,177,2.881,178,1.291,179,2.881,180,1.453,181,1.453,182,1.321,183,1.649,184,2.197,185,1.291,186,1.453,187,1.321,188,1.453,189,1.321,190,1.453,191,1.321,192,1.453,193,1.291,194,1.453,195,1.321,196,2.585,197,1.453,198,1.321,199,3.1,200,1.453,201,1.291,202,1.453,203,1.321,204,1.453,205,1.321,206,1.453,207,1.291,208,1.453,209,1.291,210,1.453,211,1.291,212,1.453,213,1.291,214,1.453,215,1.291,216,1.453,217,1.321,218,1.321,219,1.352,220,1.291,221,1.453,222,1.263,223,1.418,224,1.453,225,0.004,226,0.004,250,1.263,254,2.205,255,1.236,262,1.113,271,0.702,272,2.947,276,1.714,277,1.143,292,5.069,307,1.156,311,2.675,327,0.711,372,1.664,384,2.233,401,1.893,402,2.233,403,2.043,418,2.494,435,3.772,448,4.539,451,4.403,452,3.333,454,3.725,455,3.225,456,3.484,461,1.753,467,3.772,480,1.273,486,3.377,488,3.484,490,0.311,491,5.834,496,1.692,500,3.847,501,3.377,505,2.314,506,5.399,507,4.041,509,5.309,511,5.918,512,6.941,513,4.403,515,2.964,516,4.041,518,4.041,523,4.403,524,6.355,526,3.581,527,3.595,528,5.834,529,4.403,539,0.982,544,2.912,547,1.828,548,2.043,549,2.592,552,2.043,553,2.233,570,2.912,596,2.675,606,1.828,635,1.828,640,2.233,656,2.592,660,0.673,678,2.764,681,3.716,686,5.233,689,4.894,690,4.152,695,3.377,696,3.887,703,3.725,713,4.539,714,3.556,719,3.089,720,3.089,721,2.969,722,2.969,738,3.223,758,2.764,771,1.136,776,2.233,818,2.132,820,2.043,826,2.132,829,4.288,830,4.288,832,4.288,835,2.352,836,2.132,837,2.352,843,1.964,855,2.673,859,2.912,932,2.233,947,1.664,953,1.964,984,2.233,1123,0.952,1131,1.744,1231,0.989,1287,3.089,1402,4.246,1405,3.333,1451,2.764,1501,2.881,1538,3.195,1575,3.772,1602,3.223,1605,3.377,1611,3.377,1661,4.403,1698,3.725,1733,3.377,1742,2.862,1810,3.772,1816,4.403,1817,5.918,1827,4.873,1832,4.403,1859,3.377,1872,2.673,1873,2.352,1882,2.673,1883,2.673,1968,5.918,1994,2.912,1998,2.912,1999,2.912,2000,5.309,2001,2.912,2002,2.912,2003,3.772,2004,2.912,2006,2.912,2061,3.556,2451,3.772,2526,2.912,2527,6.655,2528,5.97,2529,4.951,2530,4.951,2531,4.951,2532,4.951,2533,4.403,2534,3.275,2535,4.951,2536,6.655,2537,3.275,2538,7.517,2539,3.772,2540,4.403,2541,4.951,2542,3.275,2543,3.275,2544,3.275,2545,4.041,2546,3.275,2547,4.951,2548,3.275,2549,3.275,2550,3.275,2551,3.275,2552,3.275,2553,3.275,2554,3.275,2555,3.275,2556,3.275,2557,3.275,2558,4.403,2559,5.97,2560,3.275,2561,3.275,2562,3.275,2563,4.951,2564,3.275,2565,3.275,2566,3.275,2567,3.275,2568,3.275,2569,3.275,2570,4.951,2571,4.951,2572,3.275,2573,3.275,2574,3.275,2575,3.275,2576,3.275,2577,3.275,2578,3.275,2579,3.275,2580,2.352,2581,3.275,2582,3.275]],["title/modules/HomePageModule.html",[227,1.402,2583,3.537]],["body/modules/HomePageModule.html",[3,0.093,4,0.093,9,0.073,43,0.007,60,0.179,62,0.435,66,0.093,67,0.36,175,2.204,199,3.593,225,0.006,226,0.006,227,1.999,229,2.444,230,3.012,231,4.51,232,3.464,233,3.266,234,2.552,239,4.194,240,3.464,241,2.865,243,3.089,244,3.159,245,4.472,246,3.575,247,4.472,248,3.012,249,4.194,250,2.552,251,3.694,253,3.575,254,2.444,255,2.497,256,3.694,738,4.308,1742,5.386,1871,5.401,2583,7.4,2584,5.884,2585,5.884,2586,5.884,2587,6.693,2588,5.202,2589,6.617,2590,5.884,2591,5.884]],["title/modules/HomePageRoutingModule.html",[227,1.402,2587,3.335]],["body/modules/HomePageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,199,3.265,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,2587,6.081,2590,6.459,2592,7.264]],["title/interfaces/IAuthenticationMapping.html",[655,0.023,2155,2.292]],["body/interfaces/IAuthenticationMapping.html",[3,0.068,4,0.068,9,0.054,11,0.893,21,2.859,27,3.105,32,0.339,33,1.426,38,1.776,42,1.809,43,0.007,44,0.924,45,0.548,46,1.861,58,0.808,60,0.091,66,0.068,68,0.928,110,1.54,225,0.005,226,0.005,277,1.236,279,1.351,280,3.175,307,1.124,313,5.365,330,1.795,432,6.17,442,2.925,490,0.847,576,1.953,655,0.036,657,0.788,663,1.673,1084,3.552,1088,3.632,1175,2.024,1186,2.096,1187,2.361,1193,2.276,1204,2.916,1322,4.166,1417,4.676,1454,5.062,1455,4.785,1481,5.365,1496,3.632,1535,3.071,1693,4.31,1751,3.67,2154,6.345,2155,3.244,2157,5.365,2158,3.67,2159,5.365,2160,3.315,2164,2.714,2165,3.676,2167,2.714,2169,2.714,2170,3.676,2172,2.714,2224,4.053,2232,5.845,2413,3.942,2593,7.638,2594,4.322,2595,5.365,2596,6.573,2597,4.861,2598,4.861,2599,4.861,2600,4.861,2601,5.845,2602,4.861,2603,6.573,2604,6.573,2605,3.164,2606,4.861,2607,4.861,2608,4.861,2609,4.861,2610,4.861]],["title/interfaces/IAuthenticationService.html",[37,1.791,655,0.023]],["body/interfaces/IAuthenticationService.html",[3,0.06,4,0.06,9,0.047,11,0.898,16,5.129,17,5.402,18,4.291,21,2.953,22,1.875,32,0.295,33,1.297,37,2.304,38,1.978,42,1.836,43,0.007,44,0.84,45,0.556,46,1.739,51,4.199,58,0.846,59,3.039,60,0.112,66,0.06,68,0.898,110,1.265,225,0.004,226,0.004,241,2.587,277,1.247,307,1.036,327,0.919,442,3.136,444,4.291,463,3.583,474,4.199,475,1.69,477,3.128,490,0.917,496,1.228,505,3.514,522,4.347,576,1.228,582,1.102,655,0.034,657,0.686,712,4.973,734,3.712,762,1.819,771,1.468,1084,3.105,1088,2.72,1208,1.834,1215,1.875,1287,3.727,1298,4.973,1299,5.313,1306,3.963,1309,3.583,1322,3.424,1375,5.274,1377,5.274,1378,5.274,1379,5.274,1380,5.274,1381,4.551,1382,4.551,1383,4.551,1384,4.551,1385,5.274,1388,3.583,1390,4.551,1396,4.394,1400,4.523,1401,5.129,1402,4.247,1406,5.129,1408,6.58,1413,3.225,1415,4.075,1416,4.551,1421,3.225,1423,4.291,1424,4.551,1425,4.551,1427,3.225,1430,3.225,1433,3.225,1435,4.551,1436,3.225,1459,3.765,1460,3.765,1470,3.765,1481,4.877,1530,2.868,1697,5.729,2231,5.729,2595,4.877,2611,3.765,2612,4.234,2613,4.234,2614,4.234,2615,4.234,2616,4.234,2617,4.234,2618,4.234,2619,5.974,2620,5.313,2621,4.234,2622,4.234,2623,4.234,2624,4.234,2625,4.234,2626,4.234,2627,4.234,2628,4.234,2629,5.313,2630,5.974,2631,4.234,2632,4.234,2633,4.234,2634,4.234,2635,4.234,2636,4.234,2637,4.234,2638,4.234,2639,4.234,2640,4.234,2641,4.234,2642,4.234]],["title/interfaces/ICoinGeko.html",[655,0.023,1713,3.537]],["body/interfaces/ICoinGeko.html",[3,0.105,4,0.105,9,0.083,43,0.007,60,0.161,66,0.105,225,0.006,226,0.006,655,0.036,657,1.212,659,3.639,660,1.537,1497,4.175,1675,6.184,1713,6.559,2643,6.649,2644,7.477]],["title/interfaces/ICryptoBase.html",[655,0.023,1675,3.167]],["body/interfaces/ICryptoBase.html",[3,0.074,4,0.074,5,2.026,9,0.058,11,0.855,13,3.625,32,0.366,33,1.502,38,1.754,42,1.68,43,0.007,44,0.769,45,0.541,46,1.592,58,0.802,60,0.098,66,0.074,68,0.944,225,0.005,226,0.005,307,0.975,309,5.273,329,3.624,401,4.757,435,5.273,463,4.151,475,1.591,480,1.324,490,0.893,539,1.841,655,0.038,657,0.851,717,3.746,734,4.335,771,1.822,947,4.716,1188,2.012,1229,2.305,1231,2.091,1306,4.002,1396,4.486,1400,4.598,1402,4.464,1405,3.864,1432,3.95,1501,4.206,1528,4.783,1538,3.323,1549,4.446,1565,4.318,1566,4.318,1574,3.419,1580,4.721,1581,5.28,1592,3.582,1595,3.864,1596,6.269,1597,6.69,1598,3.582,1599,5.28,1601,3.864,1606,3.582,1607,5.829,1609,5.65,1610,4.971,1611,4.721,1614,6.155,1675,4.721,1677,3.277,1692,4.971,1711,5.65,2348,4.67,2645,4.67,2646,5.252,2647,5.252,2648,6.921,2649,5.273,2650,5.252,2651,5.252,2652,6.921,2653,6.921,2654,4.67,2655,4.67,2656,4.67,2657,4.67]],["title/interfaces/ICryptoBaseMapping.html",[655,0.023,1498,2.684]],["body/interfaces/ICryptoBaseMapping.html",[3,0.081,4,0.081,5,2.205,9,0.063,11,0.883,14,3.246,32,0.398,33,1.587,38,1.719,42,1.75,43,0.007,44,0.801,45,0.559,46,1.658,58,0.793,60,0.107,66,0.081,68,0.838,225,0.006,226,0.005,307,1.232,480,1.769,576,1.902,655,0.039,657,0.927,660,1.848,663,1.114,670,4.855,726,4.319,1124,2.296,1131,2.028,1186,2.059,1187,2.643,1188,2.119,1189,2.252,1190,1.913,1193,1.938,1455,4.387,1492,3.193,1496,4.287,1497,3.193,1498,4.228,1528,4.319,1535,3.418,1537,4.199,1538,4.081,1540,4.107,1548,4.107,1549,3.952,1552,4.107,1565,4.563,1566,4.563,1567,5.085,1589,4.563,1677,3.568,1693,3.952,1711,4.668,2658,5.085,2659,5.718,2660,5.718,2661,7.314,2662,6.504,2663,7.314,2664,5.718,2665,5.718,2666,5.718]],["title/interfaces/ICryptobaseService.html",[655,0.023,1698,2.897]],["body/interfaces/ICryptobaseService.html",[3,0.074,4,0.074,9,0.058,11,0.807,13,3.631,25,2.68,32,0.368,33,1.508,38,1.758,42,1.685,43,0.007,44,0.771,45,0.59,46,1.596,58,0.803,60,0.099,66,0.074,68,0.946,110,1.169,225,0.005,226,0.005,307,0.875,309,5.293,401,5.371,435,5.293,461,3.034,475,1.494,480,1.777,490,0.894,498,1.875,539,1.843,655,0.026,657,0.856,734,4.342,771,1.832,947,4.623,1188,1.889,1306,4.005,1396,4.491,1398,4.167,1400,4.606,1402,4.467,1432,4.223,1528,4.837,1538,3.96,1549,3.754,1565,4.335,1566,4.335,1580,4.739,1581,5.295,1592,3.604,1595,3.88,1596,6.701,1597,6.701,1598,3.604,1599,5.295,1601,3.88,1604,4.739,1606,3.604,1607,5.838,1609,5.672,1612,5.293,1677,5.146,1692,5.924,1697,5.293,1698,4.335,1709,4.025,1873,6.155,2654,4.698,2655,4.698,2656,4.698,2657,4.698,2667,5.283,2668,5.283,2669,8.248,2670,5.283,2671,6.179,2672,5.283]],["title/interfaces/IFirebaseAuthentication.html",[655,0.023,2211,3.537]],["body/interfaces/IFirebaseAuthentication.html",[3,0.106,4,0.106,9,0.083,37,3.505,43,0.007,60,0.141,66,0.106,225,0.006,226,0.006,655,0.037,657,1.219,659,3.651,2211,6.58,2247,5.728,2673,6.686,2674,6.138]],["title/interfaces/IFirebaseMainService.html",[655,0.023,2217,3.167]],["body/interfaces/IFirebaseMainService.html",[3,0.094,4,0.094,9,0.074,27,2.916,32,0.466,33,1.75,38,1.845,41,3.836,43,0.007,45,0.53,58,0.859,60,0.151,66,0.094,225,0.006,226,0.006,469,6.129,655,0.033,657,1.085,2152,4.485,2217,5.5,2230,6.71,2254,5.097,2312,7.698,2313,7.698,2314,7.698,2320,8.307,2321,7.991,2327,5.95,2675,5.95,2676,6.691,2677,6.691,2678,6.691,2679,6.691,2680,6.691,2681,6.691]],["title/interfaces/IFirebaseService.html",[655,0.023,2682,3.537]],["body/interfaces/IFirebaseService.html",[3,0.105,4,0.105,9,0.082,43,0.007,60,0.161,66,0.105,225,0.006,226,0.006,277,1.104,455,4.893,461,2.64,549,3.904,655,0.036,657,1.209,659,3.633,2682,6.548,2683,6.63,2684,4.472]],["title/interfaces/IStrapiAuthentication.html",[655,0.023,2685,3.537]],["body/interfaces/IStrapiAuthentication.html",[3,0.106,4,0.106,9,0.083,37,3.505,43,0.007,60,0.141,66,0.106,225,0.006,226,0.006,655,0.037,657,1.219,659,3.651,2247,5.728,2674,6.138,2685,6.58,2686,6.686]],["title/interfaces/IStrapiService.html",[655,0.023,2687,3.537]],["body/interfaces/IStrapiService.html",[3,0.105,4,0.105,9,0.082,43,0.007,60,0.161,66,0.105,225,0.006,226,0.006,277,1.104,455,4.893,461,2.64,549,3.904,655,0.036,657,1.209,659,3.633,2684,4.472,2687,6.548,2688,6.63]],["title/interfaces/IUserBaseMapping.html",[655,0.023,1118,1.35]],["body/interfaces/IUserBaseMapping.html",[3,0.108,4,0.054,5,1.49,9,0.043,11,0.929,27,2.023,32,0.269,33,1.215,38,1.884,42,1.918,43,0.007,44,0.903,45,0.588,46,1.936,58,0.834,60,0.072,66,0.054,68,0.967,101,1.786,110,1.343,183,1.864,225,0.004,226,0.004,277,1.201,279,1.151,280,2.768,281,3.248,307,1.235,329,3.777,475,1.677,480,1.762,490,0.847,498,1.947,576,1.837,655,0.032,657,0.626,660,1.483,663,1.604,692,6.268,725,3.356,726,2.843,737,1.456,762,1.237,1118,1.627,1120,2.002,1121,2.076,1122,1.062,1131,2.036,1186,1.999,1187,2.318,1188,1.652,1189,1.483,1191,1.827,1194,1.213,1204,3.102,1205,3.165,1207,2.499,1208,1.743,1216,2.179,1217,1.213,1222,2.318,1224,1.723,1226,1.213,1230,2.264,1232,1.213,1237,1.658,1238,1.213,1243,1.213,1253,1.145,1311,3.643,1337,3.643,1454,3.777,1496,4.347,1535,2.615,1537,2.615,1589,3.491,1625,4.92,1677,2.41,1751,3.124,2390,4.568,2391,3.356,2392,3.356,2393,4.568,2394,4.568,2395,4.568,2396,4.568,2397,3.491,2398,3.491,2399,4.568,2400,3.491,2403,2.943,2405,2.775,2409,3.803,2411,2.775,2413,4.592,2416,2.775,2689,3.436,2690,5.596,2691,4.568,2692,3.864,2693,3.864,2694,3.864,2695,7.214,2696,3.864,2697,4.976,2698,3.864,2699,3.864,2700,3.864,2701,5.596,2702,5.596,2703,3.864,2704,3.864,2705,3.864,2706,3.864,2707,3.864,2708,3.864,2709,3.864,2710,3.864,2711,3.864,2712,3.864,2713,3.864,2714,3.864,2715,3.864,2716,3.864,2717,3.864]],["title/interfaces/IUserFirebaseRepository.html",[655,0.023,2718,3.79]],["body/interfaces/IUserFirebaseRepository.html",[3,0.105,4,0.105,9,0.082,43,0.007,60,0.161,66,0.105,225,0.006,226,0.006,277,1.105,327,1.621,655,0.036,657,1.21,659,3.636,2718,7.022,2719,6.64,2720,5.654,2721,5.363]],["title/interfaces/IUserStrapiRepositoy.html",[655,0.023,2722,3.79]],["body/interfaces/IUserStrapiRepositoy.html",[3,0.106,4,0.106,9,0.083,43,0.007,60,0.161,66,0.106,225,0.006,226,0.006,277,0.962,655,0.036,657,1.214,659,3.642,2684,4.491,2720,5.66,2721,5.378,2722,7.033,2723,6.658,2724,7.488]],["title/interfaces/IUserbaseRepositoy.html",[655,0.023,2720,2.897]],["body/interfaces/IUserbaseRepositoy.html",[3,0.046,4,0.046,5,1.248,9,0.036,11,0.915,13,3.306,32,0.225,33,1.435,38,1.857,42,1.891,43,0.007,44,0.866,45,0.579,46,1.853,58,0.828,60,0.111,66,0.046,68,0.994,110,0.825,183,2.667,225,0.004,226,0.004,277,1.224,279,1.538,280,2.705,281,3.265,307,1.148,329,2.568,434,4.487,442,3.246,460,3.737,474,2.739,475,1.74,476,4.837,477,2.568,480,1.819,483,2.65,490,0.928,498,1.324,533,1.911,539,1.658,582,1.477,655,0.029,657,0.524,660,1.462,663,0.63,725,2.942,726,2.492,762,1.571,771,1.122,1120,1.783,1122,0.889,1123,0.941,1130,1.454,1131,2.046,1132,1.756,1191,2.961,1192,1.923,1207,2.373,1208,2.215,1222,1.818,1224,2.036,1237,1.454,1251,1.54,1296,3.801,1306,4.085,1309,2.942,1340,3.524,1388,3.967,1393,6.734,1398,5.44,1400,3.463,1538,3.175,1573,3.061,1595,2.739,1601,2.739,1677,2.018,2391,2.942,2392,2.942,2397,3.061,2398,3.061,2400,3.061,2409,4.325,2413,2.942,2595,4.004,2697,4.362,2720,3.061,2725,6.706,2726,2.877,2727,3.524,2728,3.524,2729,3.524,2730,3.524,2731,3.524,2732,3.524,2733,3.524,2734,3.524,2735,2.877,2736,3.235,2737,5.103,2738,6.983,2739,2.877,2740,4.042,2741,3.235,2742,2.877,2743,3.235,2744,2.324,2745,3.235,2746,2.324,2747,4.75,2748,3.235,2749,4.362,2750,3.524,2751,3.235,2752,2.877,2753,3.235,2754,2.877,2755,3.235,2756,2.877,2757,3.235,2758,3.737,2759,2.877,2760,5.374,2761,3.235,2762,2.877,2763,3.235,2764,2.877,2765,3.235,2766,2.877,2767,3.235,2768,3.235,2769,3.235,2770,3.235,2771,3.235,2772,3.235,2773,3.235,2774,2.877,2775,3.235,2776,3.235,2777,3.235,2778,3.235,2779,2.877,2780,2.877,2781,2.877]],["title/interfaces/IUserbaseService.html",[455,2.508,655,0.023]],["body/interfaces/IUserbaseService.html",[3,0.046,4,0.046,9,0.066,11,0.899,13,3.325,32,0.23,33,1.081,38,1.9,42,1.877,43,0.007,44,0.859,45,0.569,46,1.847,58,0.838,60,0.134,66,0.046,68,0.964,110,1.414,183,2.683,225,0.004,226,0.004,277,1.224,279,1.55,280,2.725,281,3.297,297,1.532,307,1.13,317,3.396,327,0.716,329,3.497,434,4.832,438,4.798,442,2.881,455,2.69,461,3.18,474,2.78,475,1.691,477,2.607,480,1.773,490,0.904,498,1.344,505,3.523,533,2.057,539,1.666,542,2.933,543,1.782,548,5.603,576,1.817,581,3.106,582,1.486,655,0.016,657,0.535,660,1.695,726,3.83,762,1.584,771,1.144,1120,2.235,1121,1.56,1122,0.907,1123,0.959,1131,1.852,1132,1.777,1188,1.141,1189,1.319,1190,1.503,1192,1.942,1207,2.387,1208,2.073,1222,1.836,1224,2.057,1230,1.563,1237,1.475,1251,2.366,1253,0.978,1306,4.124,1309,2.986,1388,4.006,1393,5.414,1396,4.684,1397,3.241,1400,4.399,1443,3.241,1501,3.889,1530,2.39,1538,3.207,1576,2.878,1595,2.78,1601,2.78,1610,4.798,1692,4.798,1709,2.513,1850,3.73,2391,2.986,2392,2.986,2397,3.741,2398,3.106,2400,3.106,2409,4.144,2413,2.986,2727,3.576,2728,3.576,2729,3.576,2730,3.576,2731,3.576,2732,3.576,2733,3.576,2734,3.576,2737,5.141,2738,5.742,2740,3.396,2744,2.369,2746,2.369,2747,4.798,2749,4.427,2750,3.576,2760,4.798,2774,2.933,2779,2.933,2780,2.933,2781,2.933,2782,4.895,2783,5.452,2784,2.693,2785,3.299,2786,2.513,2787,3.299,2788,4.979,2789,2.693,2790,3.299,2791,3.793,2792,3.299,2793,3.299,2794,3.299,2795,4.979,2796,2.693,2797,3.299,2798,3.299,2799,3.299,2800,4.979,2801,2.693,2802,3.299,2803,4.064,2804,4.979,2805,3.299,2806,2.693,2807,3.299,2808,2.693,2809,3.299,2810,4.064,2811,2.693,2812,3.299,2813,3.299,2814,3.299,2815,3.299,2816,3.299,2817,3.299,2818,3.299,2819,3.299,2820,3.299,2821,3.299,2822,3.299,2823,3.299,2824,3.299]],["title/interfaces/Image.html",[101,1.083,655,0.023]],["body/interfaces/Image.html",[3,0.072,4,0.048,9,0.037,11,0.633,23,0.529,32,0.236,43,0.007,44,0.825,45,0.597,58,0.758,60,0.136,62,0.223,66,0.134,67,0.184,68,0.914,101,1.579,107,1.875,109,1.91,110,1.139,116,1.981,133,0.985,158,1.645,225,0.004,226,0.004,263,1.298,271,0.721,277,1.067,279,1.045,297,1.557,307,1.192,327,0.735,330,1.143,354,1.481,475,1.663,480,1.553,490,0.934,493,1.129,496,0.697,498,1.371,533,0.865,539,1.858,576,1.739,582,0.625,655,0.046,657,0.549,660,1.392,663,0.66,665,1.004,666,1.004,674,0.636,737,1.981,762,1.496,873,1.129,1112,2.211,1113,1.129,1114,2.655,1115,2.301,1116,2.875,1117,0.666,1118,1.477,1119,1.064,1120,1.819,1121,1.887,1122,0.932,1123,0.985,1124,1.595,1125,2.3,1126,1.692,1127,1.692,1128,1.152,1129,1.659,1130,2.149,1131,1.888,1132,2.149,1133,1.645,1134,1.106,1135,1.152,1136,1.106,1137,1.659,1138,1.659,1139,1.152,1140,1.659,1141,2.211,1142,1.106,1143,1.152,1144,1.106,1145,1.106,1146,1.152,1147,1.106,1148,1.152,1149,1.152,1150,1.371,1151,1.106,1152,1.659,1153,1.659,1154,1.085,1155,1.152,1156,1.106,1157,1.152,1158,1.106,1159,1.152,1160,1.106,1161,1.152,1162,1.106,1163,1.152,1164,1.106,1165,1.023,1166,1.659,1167,0.949,1168,0.985,1169,0.949,1170,0.949,1171,1.152,1172,1.106,1173,2.301,1174,2.301,1175,2.501,1176,2.588,1177,2.588,1178,2.588,1179,2.301,1180,2.588,1181,1.106,1182,1.99,1183,1.99,1184,0.648,1185,1.085,1186,1.551,1187,1.675,1188,1.164,1189,0.898,1190,1.371,1191,2.368,1192,0.985,1193,0.898,1194,1.064,1195,1.152,1196,1.004,1197,1.085,1198,1.085,1199,1.152,1200,1.152,1201,1.085,1202,1.085,1203,2.588,1204,2.841,1205,2.861,1206,1.085,1207,2.149,1208,0.898,1209,2.368,1210,1.152,1211,1.152,1212,1.626,1213,1.626,1214,1.152,1215,1.064,1216,1.534,1217,1.064,1218,1.152,1219,1.152,1220,1.152,1221,1.064,1222,1.675,1223,1.152,1224,1.564,1225,1.152,1226,1.064,1227,1.152,1228,1.152,1229,1.129,1230,1.064,1231,1.534,1232,1.064,1233,1.152,1234,1.152,1235,1.152,1236,1.152,1237,1.505,1238,1.064,1239,1.152,1240,1.152,1241,1.152,1242,1.152,1243,1.064,1244,1.152,1245,1.152,1246,1.152,1247,1.152,1248,1.152,1249,1.152,1250,1.152,1251,1.064,1252,1.023,1253,1.004,1254,1.152,1255,1.152,1256,1.152,1257,1.152,1258,1.152,1259,1.152,1260,1.152,1261,1.152,1262,1.152,1263,1.152,1264,1.152,1265,1.727,1266,1.727,1267,1.626,1268,1.727,1269,1.152,1270,1.727]],["title/components/ListPage.html",[0,1.083,207,1.831]],["body/components/ListPage.html",[0,1.843,1,1.222,2,2.056,3,0.081,4,0.044,5,1.196,6,1.342,7,1.342,8,1.376,9,0.034,11,0.796,21,1.52,22,2.543,23,0.741,24,3.601,25,1.196,26,3.903,27,3.31,28,2.108,30,2.108,32,0.331,33,1.031,34,3.612,35,1.381,37,2.226,38,1.841,40,1.873,41,1.873,42,1.597,43,0.007,44,0.805,45,0.584,46,1.625,47,3.337,52,3.239,54,3.287,55,3.387,56,3.88,58,0.697,59,2.717,60,0.158,61,1.121,62,0.204,63,1.28,64,1.488,65,1.792,66,0.044,67,0.169,68,0.887,69,1.449,70,2.857,71,1.792,72,2.018,74,3.096,94,2.219,98,2.651,107,0.763,109,0.777,110,1.089,114,1.934,115,1.575,116,1.235,132,1.731,157,1.731,167,1.488,175,1.032,176,2.108,177,2.056,178,1.222,179,2.801,180,1.376,181,1.376,182,1.25,183,1.582,184,2.108,185,1.222,186,1.376,187,1.25,188,1.376,189,1.25,190,1.376,191,1.25,192,1.376,193,1.222,194,1.376,195,1.25,196,1.342,197,1.376,198,1.25,199,1.196,200,1.376,201,1.222,202,1.376,203,1.25,204,1.376,205,2.814,206,1.376,207,3.116,208,1.376,209,1.222,210,1.376,211,1.222,212,1.376,213,1.222,214,1.376,215,1.222,216,1.376,217,1.25,218,1.25,219,1.28,220,1.222,221,1.376,222,1.196,223,1.342,224,1.376,225,0.003,226,0.003,250,1.196,254,1.145,255,1.17,262,1.962,271,0.674,272,2.849,273,3.618,277,1.041,282,2.53,283,5.834,291,6.04,294,5.281,307,0.878,311,2.566,317,3.239,327,0.673,364,1.623,366,1.792,367,1.731,368,3.443,372,3.287,373,2.114,378,1.623,408,4.036,428,4.223,436,5.281,442,2.451,452,4.108,453,4.223,454,4.352,455,3.495,456,3.022,457,4.352,458,3.337,461,1.098,464,4.928,465,4.223,466,3.876,474,2.651,475,1.631,477,3.853,480,1.79,481,3.618,482,3.239,486,4.413,490,0.768,496,1.187,500,2.745,506,3.411,515,2.276,526,2.848,532,3.876,533,1.213,547,1.731,548,1.934,549,1.623,551,2.018,552,2.963,553,2.114,554,2.018,582,0.876,596,3.768,597,2.757,598,2.757,599,2.757,600,2.757,606,3.612,608,3.758,678,3.612,681,3.612,686,5.144,689,3.092,695,3.937,696,3.758,706,3.876,711,4.212,714,3.411,716,3.876,717,2.162,719,2.963,720,2.963,721,2.848,722,2.848,739,2.114,758,2.651,771,1.075,781,2.114,818,2.018,820,1.934,826,2.018,836,2.018,842,2.114,843,1.859,849,2.361,868,2.114,869,2.361,871,3.411,889,2.227,894,3.612,901,3.239,911,2.227,929,4.647,932,2.114,1120,1.622,1121,1.235,1122,0.852,1181,1.012,1188,1.088,1190,1.068,1192,2.297,1206,2.356,1221,2.031,1222,2.273,1287,2.963,1296,3.287,1397,3.092,1496,2.945,1560,2.53,1712,3.239,1752,2.361,1765,2.361,1803,2.53,1831,3.618,1836,3.618,1844,3.876,1859,3.239,1957,3.618,2067,3.876,2069,3.876,2129,2.53,2413,1.859,2459,2.757,2510,2.227,2511,2.114,2516,2.361,2518,6.449,2545,3.876,2580,2.227,2825,2.757,2826,4.749,2827,6.47,2828,6.006,2829,5.772,2830,4.749,2831,4.749,2832,6.47,2833,4.749,2834,4.749,2835,4.749,2836,3.1,2837,4.712,2838,3.876,2839,4.223,2840,3.1,2841,3.1,2842,4.749,2843,3.1,2844,3.1,2845,3.1,2846,4.749,2847,3.876,2848,4.749,2849,4.749,2850,3.1,2851,4.223,2852,3.1,2853,3.1,2854,3.1,2855,3.1,2856,4.749,2857,4.749,2858,3.618,2859,3.1,2860,3.1,2861,3.1,2862,3.1,2863,3.1,2864,3.1,2865,3.1,2866,3.1,2867,3.1,2868,3.1,2869,3.1,2870,3.1,2871,3.1,2872,3.1,2873,3.1,2874,3.1,2875,2.757,2876,3.1,2877,3.1,2878,3.1,2879,3.1,2880,3.1,2881,3.1,2882,3.1,2883,3.1,2884,3.1,2885,3.1,2886,3.1,2887,3.1,2888,3.1,2889,3.1,2890,3.1,2891,3.1,2892,3.1,2893,3.1,2894,3.1,2895,3.1,2896,3.1,2897,3.1,2898,3.1,2899,3.1,2900,3.1,2901,2.757,2902,3.1,2903,3.1,2904,3.1,2905,3.1,2906,3.1,2907,3.1,2908,4.749,2909,4.223,2910,2.757,2911,2.757,2912,4.223,2913,2.757,2914,4.223,2915,4.223,2916,4.223,2917,2.757,2918,2.757,2919,2.757,2920,2.757,2921,2.757,2922,2.757]],["title/modules/ListPageModule.html",[227,1.402,2923,3.537]],["body/modules/ListPageModule.html",[3,0.095,4,0.095,9,0.074,43,0.007,60,0.179,62,0.442,66,0.095,67,0.366,175,2.24,207,3.688,225,0.006,226,0.006,227,2.031,229,2.483,230,3.062,231,4.542,232,3.521,233,3.32,234,2.594,239,4.235,240,3.521,241,2.912,243,3.12,244,3.19,245,4.516,246,3.633,247,4.516,248,3.062,249,4.235,250,2.594,251,3.755,253,3.633,254,2.483,255,2.538,256,3.755,480,1.286,2588,5.222,2923,7.355,2924,5.98,2925,5.98,2926,5.98,2927,6.718,2928,6.725,2929,5.98,2930,4.83]],["title/modules/ListPageRoutingModule.html",[227,1.402,2927,3.335]],["body/modules/ListPageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,207,3.339,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,2927,6.081,2929,6.459,2931,7.264]],["title/components/ListcontentPage.html",[0,1.083,201,1.831]],["body/components/ListcontentPage.html",[0,1.877,1,1.416,2,2.297,3,0.089,4,0.051,5,1.385,6,1.555,7,1.555,8,1.594,9,0.04,11,0.724,13,2.19,21,1.698,22,2.593,25,1.385,26,3.973,27,3.375,28,2.354,30,2.354,32,0.37,33,1.151,35,1.542,36,2.338,37,2.433,38,1.798,40,2.092,41,2.092,42,1.512,43,0.007,44,0.738,45,0.512,46,1.091,47,3.066,52,3.618,54,3.54,55,3.648,56,4.178,58,0.615,59,2.573,60,0.161,61,1.298,62,0.236,63,1.482,64,1.724,65,2.076,66,0.051,67,0.195,68,0.836,69,1.678,70,3.05,71,2.076,72,2.338,74,3.299,94,2.479,95,2.866,96,2.777,97,1.88,98,2.962,102,1.88,107,0.884,109,1.33,115,3.54,116,1.812,120,2.076,122,2.24,123,2.579,132,2.005,146,3.81,158,0.969,160,2.154,165,3.256,167,1.724,170,2.154,175,1.196,176,2.354,177,2.297,178,1.416,179,3.017,180,1.594,181,1.594,182,1.449,183,1.767,184,2.354,185,1.416,186,1.594,187,1.449,188,1.594,189,1.449,190,1.594,191,1.449,192,1.594,193,1.416,194,1.594,195,1.449,196,1.555,197,1.594,198,1.449,199,1.385,200,1.594,201,3.258,202,1.594,203,1.449,204,1.594,205,1.449,206,1.594,207,1.416,208,1.594,209,1.416,210,1.594,211,1.416,212,1.594,213,1.416,214,1.594,215,1.416,216,1.594,217,1.449,218,1.449,219,1.482,220,1.416,221,1.594,222,1.385,223,1.555,224,1.594,225,0.004,226,0.004,254,1.326,255,1.355,261,1.355,271,0.752,277,0.955,307,0.668,327,0.779,364,1.88,366,2.076,367,2.005,368,3.84,372,3.776,373,2.449,378,1.88,385,1.88,408,4.346,420,2.449,436,4.33,448,4.752,454,3.935,455,3.408,456,3.891,457,4.637,458,3.646,461,1.271,470,3.453,471,3.81,474,2.962,475,1.595,477,2.777,480,1.717,490,0.661,496,1.432,500,3.066,501,3.618,505,3.256,506,3.81,507,4.33,515,2.747,527,2.866,533,1.355,547,2.005,548,2.24,549,1.88,551,2.338,552,2.24,553,2.449,554,2.338,606,3.522,608,2.338,678,3.89,680,4.33,681,3.89,688,4.775,695,3.618,701,3.182,709,3.618,710,4.536,719,3.309,721,3.182,722,3.182,739,2.449,742,3.81,758,2.962,771,1.246,777,2.24,781,2.449,842,2.449,843,2.154,849,2.736,868,2.449,869,2.736,871,3.81,889,2.579,893,2.338,894,4.612,901,4.302,911,2.579,929,5.004,932,2.449,933,2.931,935,4.33,1121,1.38,1122,0.987,1130,2.064,1131,1.862,1150,0.969,1154,2.23,1181,1.172,1207,1.572,1216,1.602,1231,1.602,1287,3.309,1402,3.256,1451,2.962,1455,3.182,1496,2.415,1595,2.962,1733,3.618,1752,2.736,1765,4.041,1770,4.717,1778,3.193,1803,2.931,1825,5.149,1826,5.149,1831,4.041,1881,2.931,2061,3.81,2129,2.931,2510,2.579,2511,2.449,2516,2.736,2518,6.743,2539,4.041,2558,3.193,2580,2.579,2837,4.33,2838,4.33,2858,4.041,2909,4.717,2910,3.193,2911,3.193,2912,4.717,2913,3.193,2914,4.717,2915,4.717,2916,4.717,2917,3.193,2918,3.193,2919,3.193,2920,3.193,2921,3.193,2922,3.193,2932,3.193,2933,4.717,2934,6.308,2935,5.305,2936,5.305,2937,5.305,2938,3.591,2939,3.591,2940,5.305,2941,3.591,2942,3.591,2943,5.305,2944,4.717,2945,3.591,2946,3.591,2947,6.308,2948,3.591,2949,3.591,2950,3.591,2951,3.193,2952,3.591,2953,3.591,2954,3.591,2955,3.591,2956,3.591,2957,3.591,2958,3.591,2959,3.193,2960,3.591,2961,3.591,2962,3.591,2963,3.591,2964,3.591,2965,5.305,2966,4.717,2967,4.717,2968,5.305,2969,3.591,2970,3.193,2971,3.591,2972,3.591,2973,3.591,2974,3.193,2975,3.591]],["title/modules/ListcontentPageModule.html",[227,1.402,2976,3.537]],["body/modules/ListcontentPageModule.html",[3,0.095,4,0.095,9,0.074,43,0.007,60,0.179,62,0.442,66,0.095,67,0.366,175,2.24,201,3.688,225,0.006,226,0.006,227,2.031,229,2.483,230,3.062,231,4.542,232,3.521,233,3.32,234,2.594,239,4.235,240,3.521,241,2.912,243,3.12,244,3.19,245,4.516,246,3.633,247,4.516,248,3.062,249,4.235,250,2.594,251,3.755,253,3.633,254,2.483,255,2.538,256,3.755,2588,5.222,2930,4.83,2933,5.98,2976,7.355,2977,5.98,2978,5.98,2979,5.98,2980,6.718,2981,6.725,2982,5.98]],["title/modules/ListcontentPageRoutingModule.html",[227,1.402,2980,3.335]],["body/modules/ListcontentPageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,201,3.339,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,2980,6.081,2982,6.459,2983,7.264]],["title/components/ListcryptoComponent.html",[0,1.083,203,1.873]],["body/components/ListcryptoComponent.html",[0,1.816,1,1.808,2,2.735,3,0.065,4,0.065,5,1.769,6,1.986,7,1.986,8,2.035,9,0.051,11,0.656,25,1.769,26,4.074,27,3.468,28,2.803,30,2.803,32,0.32,33,1.371,35,2.101,38,1.741,42,1.371,43,0.007,44,0.811,45,0.555,46,1.299,52,5.31,58,0.558,59,2.333,60,0.118,62,0.302,66,0.065,67,0.249,68,0.656,74,3.456,99,2.651,104,3.209,107,1.129,110,1.063,115,3.956,116,1.879,120,2.651,122,2.861,127,3.289,131,4.052,132,2.56,134,2.477,135,2.477,141,2.651,145,3.209,146,5.19,147,2.861,148,2.651,149,2.651,150,2.56,151,2.75,152,2.651,156,2.985,158,1.237,159,3.294,160,2.75,165,2.952,167,3.032,175,1.527,176,2.803,177,2.735,178,1.808,179,3.371,180,2.035,181,2.035,182,1.85,183,2.104,184,2.803,185,1.808,186,2.035,187,1.85,188,2.035,189,1.85,190,2.035,191,1.85,192,2.035,193,1.808,194,2.035,195,1.85,196,1.986,197,2.035,198,1.85,199,1.769,200,2.035,201,1.808,202,2.035,203,3.141,204,2.035,205,1.85,206,2.035,207,1.808,208,2.035,209,1.808,210,2.035,211,1.808,212,2.035,213,1.808,214,2.035,215,1.808,216,2.035,217,1.85,218,1.85,219,1.893,220,1.808,221,2.035,222,1.769,223,1.986,224,2.035,225,0.005,226,0.005,276,3.307,315,3.904,383,2.33,401,4.879,407,3.743,475,0.831,477,4.419,480,1.731,490,0.435,500,5.571,582,0.846,634,4.537,635,4.347,716,6.666,720,4.857,893,2.985,914,3.294,924,6.355,953,2.75,1120,1.812,1122,1.261,1190,1.032,1222,2.32,1432,2.201,1488,6.062,1501,1.986,1746,3.743,1748,3.493,1749,3.493,1750,3.743,1751,2.56,1771,5.156,1776,5.898,1781,6.355,1782,6.923,1785,5.156,1789,5.617,1796,3.743,1800,4.078,1805,4.078,2069,3.743,2101,4.078,2837,5.156,2851,4.078,2966,5.617,2967,5.617,2984,4.078,2985,6.317,2986,7.226,2987,6.317,2988,6.317,2989,7.226,2990,4.586,2991,4.586,2992,4.586,2993,6.317,2994,4.586,2995,7.786,2996,7.786,2997,7.786,2998,6.317,2999,4.586,3000,4.586,3001,4.586,3002,4.586,3003,6.317,3004,6.317,3005,4.586,3006,6.317,3007,4.586,3008,4.586,3009,4.586,3010,4.586,3011,4.586]],["title/components/ListformularyComponent.html",[0,1.083,205,1.873]],["body/components/ListformularyComponent.html",[0,1.829,1,1.447,2,2.334,3,0.052,4,0.052,5,1.415,6,1.589,7,1.589,8,1.629,9,0.041,11,0.732,15,3.872,23,0.842,24,3.986,25,1.415,26,3.983,27,3.384,28,2.392,30,2.392,32,0.256,33,1.17,34,3.931,35,1.567,38,1.838,42,0.796,43,0.007,44,0.699,45,0.463,46,0.755,58,0.715,59,2.359,60,0.132,62,0.241,66,0.052,67,0.2,70,1.949,74,4.154,94,1.715,95,1.983,96,3.345,97,3.926,98,3.01,99,2.121,102,2.822,104,1.865,105,2.389,106,2.121,107,1.573,109,0.92,110,0.907,113,2.503,115,1.865,116,0.955,121,2.503,122,3.363,127,2.908,128,3.01,131,3.89,132,2.049,133,1.067,134,2.912,135,2.912,145,3.577,147,2.29,148,2.121,149,2.121,150,2.049,151,2.201,152,2.121,153,2.201,158,1.9,159,2.636,165,1.715,170,3.832,171,2.29,173,2.389,174,2.389,175,1.222,176,2.392,177,2.334,178,1.447,179,3.048,180,1.629,181,1.629,182,1.48,183,1.795,184,2.392,185,1.447,186,1.629,187,1.48,188,1.629,189,1.48,190,1.629,191,1.48,192,1.629,193,1.447,194,1.629,195,1.48,196,1.589,197,1.629,198,1.48,199,1.415,200,1.629,201,1.447,202,1.629,203,1.48,204,1.629,205,2.84,206,1.629,207,1.447,208,1.629,209,1.447,210,1.629,211,1.447,212,1.629,213,1.447,214,1.629,215,1.447,216,1.629,217,1.48,218,1.48,219,1.515,220,1.447,221,1.629,222,1.415,223,1.589,224,1.629,225,0.004,226,0.004,248,1.671,250,1.415,268,4.357,271,0.765,272,3.153,273,5.713,274,6.26,275,6.26,276,2.822,278,4.106,282,2.996,283,5.973,284,4.793,285,4.589,290,5.057,291,5.971,294,2.996,295,4.106,296,6.093,302,5.681,303,3.509,304,3.676,305,4.4,306,4.4,307,1.02,309,4.106,311,4.052,312,2.796,314,2.996,315,4.052,317,4.357,319,4.867,322,5.363,333,3.263,334,3.263,335,3.263,342,4.793,354,1.036,355,3.263,363,6.26,364,2.822,365,2.389,366,3.116,367,3.01,368,4,369,2.796,370,2.636,371,2.636,372,1.865,373,2.503,374,2.201,375,3.931,376,4.4,377,4.357,378,3.345,379,4.4,380,2.996,381,3.233,382,2.996,383,1.865,384,2.503,385,3.926,386,2.996,387,2.996,388,2.636,389,2.796,390,3.263,391,2.996,392,3.233,393,4.793,394,3.263,395,4.793,396,4.793,397,3.263,398,2.796,399,3.263,400,2.796,401,2.121,402,3.676,403,3.363,404,4.793,407,2.996,408,2.29,409,2.503,410,3.263,411,3.263,412,4.4,413,2.049,414,2.503,415,2.996,416,3.263,417,2.796,418,2.796,419,2.996,420,2.503,421,2.996,422,2.996,423,3.263,424,2.996,480,1.59,490,0.348,491,5.747,496,0.755,515,1.447,582,0.677,732,3.01,1120,1.766,1122,1.009,1206,2.254,1221,1.152,1222,1.756,1409,4.589,1501,1.589,1810,2.796,1957,5.973,2446,4.793,2447,5.681,2469,3.263,2470,3.263,2828,2.996,2875,5.681,3012,3.263,3013,5.39,3014,6.388,3015,5.39,3016,5.39,3017,3.67,3018,3.67,3019,3.67,3020,5.39,3021,4.793,3022,7.499,3023,6.388,3024,3.67,3025,5.39,3026,3.67,3027,5.39,3028,3.67,3029,3.67,3030,3.67,3031,6.388,3032,3.67,3033,3.67,3034,3.263,3035,3.67,3036,3.67,3037,3.67,3038,5.39,3039,5.39,3040,3.67,3041,3.67,3042,3.67,3043,3.67,3044,3.67,3045,3.67,3046,3.67,3047,3.67,3048,3.67,3049,3.67,3050,3.67,3051,5.39,3052,5.39,3053,5.39,3054,5.39,3055,5.39,3056,5.39,3057,5.39,3058,5.39]],["title/components/LoginPage.html",[0,1.083,209,1.831]],["body/components/LoginPage.html",[0,1.532,1,1.519,2,2.418,3,0.054,4,0.054,5,1.486,6,1.668,7,1.668,8,1.71,9,0.043,11,0.683,13,2.305,14,2.479,20,3.017,21,2.103,22,2.503,25,1.486,26,4.004,27,3.415,28,2.479,30,2.479,32,0.268,33,1.212,35,2.095,36,2.508,37,2.533,38,1.7,42,1.426,43,0.007,44,0.837,45,0.524,46,1.351,47,3.228,49,3.809,54,2.837,55,2.924,58,0.636,59,2.426,60,0.161,61,1.393,62,0.253,63,1.59,66,0.054,67,0.21,68,0.876,69,1.8,70,3.105,71,2.227,74,3.811,94,2.61,102,2.017,107,0.949,109,0.966,110,0.94,114,2.403,128,2.151,131,2.681,157,2.151,165,2.61,167,3.458,175,1.283,176,2.479,177,2.418,178,1.519,179,3.119,180,1.71,181,1.71,182,1.554,183,1.86,184,2.479,185,1.519,186,1.71,187,1.554,188,1.71,189,1.554,190,1.71,191,1.554,192,1.71,193,1.519,194,1.71,195,1.554,196,2.844,197,1.71,198,1.554,199,1.486,200,1.71,201,1.519,202,1.71,203,1.554,204,1.71,205,1.554,206,1.71,207,1.519,208,1.71,209,3.016,210,1.71,211,1.519,212,1.71,213,1.519,214,1.71,215,1.519,216,1.71,217,1.554,218,2.65,219,1.59,220,1.519,221,1.71,222,1.486,223,1.668,224,1.71,225,0.004,226,0.004,250,1.486,254,2.426,255,1.454,261,1.454,262,1.309,268,2.628,271,0.792,276,2.017,277,0.982,288,4.558,289,3.809,291,4.718,296,4.979,307,0.907,315,3.017,364,2.924,365,2.508,366,2.227,367,3.118,368,3.556,370,2.767,371,2.767,372,3.885,374,3.349,375,4.453,377,3.809,378,3.772,381,2.311,383,1.957,384,2.628,385,3.439,392,2.311,403,2.403,442,1.86,452,3.668,456,3.772,457,4.098,458,4.421,470,3.636,471,4.011,482,3.809,490,0.623,496,1.351,500,3.228,503,3.636,515,1.519,526,2.311,527,3.017,532,4.558,534,3.228,551,2.508,554,2.508,596,3.017,606,2.151,608,2.508,678,4.022,681,4.022,686,5.485,688,4.87,690,5.256,696,3.636,700,3.727,701,3.349,702,2.767,703,5.571,709,3.809,714,4.011,717,2.542,719,3.484,720,3.484,721,3.349,722,3.349,733,4.254,734,2.757,735,4.69,758,3.118,764,3.145,765,3.426,766,3.426,771,1.336,776,2.628,777,2.403,781,2.628,818,2.508,820,2.403,826,2.508,828,3.145,829,4.011,830,4.011,831,3.145,832,4.011,834,3.145,835,2.767,836,2.508,837,2.767,839,3.145,842,2.628,843,2.311,890,2.935,894,3.118,922,4.011,936,3.636,1084,3.104,1190,1.256,1317,2.767,1330,4.966,1401,3.809,1415,3.809,1586,3.349,2307,2.628,2505,4.966,2509,3.145,2510,4.011,2511,2.628,2523,2.935,2533,4.966,2580,2.767,2649,2.935,2662,4.966,3059,3.426,3060,6.569,3061,5.584,3062,4.966,3063,5.88,3064,5.584,3065,5.584,3066,5.841,3067,4.966,3068,3.852,3069,3.852,3070,3.852,3071,5.584,3072,3.852,3073,3.852,3074,4.558,3075,2.935,3076,3.852,3077,3.426,3078,3.852,3079,3.852,3080,3.852,3081,3.426,3082,4.966,3083,3.426,3084,3.426,3085,3.426,3086,4.966,3087,3.426,3088,3.426,3089,3.145,3090,3.426,3091,4.558,3092,4.966,3093,3.426,3094,3.426,3095,3.426]],["title/modules/LoginPageModule.html",[227,1.402,3096,3.537]],["body/modules/LoginPageModule.html",[3,0.095,4,0.095,9,0.074,43,0.007,60,0.179,62,0.441,66,0.095,67,0.365,175,2.234,209,3.686,225,0.006,226,0.006,227,2.026,229,2.477,230,3.054,231,4.537,232,3.512,233,3.311,234,2.587,239,4.229,240,3.512,241,2.905,243,3.115,244,3.185,245,4.509,246,3.624,247,4.509,248,3.054,249,4.229,250,2.587,251,3.745,253,3.624,254,2.477,255,2.531,256,3.745,1084,2.531,2588,5.219,2930,4.818,3096,7.352,3097,5.965,3098,5.965,3099,5.965,3100,6.714,3101,6.708,3102,6.153,3103,5.965]],["title/modules/LoginPageRoutingModule.html",[227,1.402,3100,3.335]],["body/modules/LoginPageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,209,3.339,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,3100,6.081,3103,6.459,3104,7.264]],["title/interfaces/LoginPayLoad.html",[655,0.023,2165,2.292]],["body/interfaces/LoginPayLoad.html",[3,0.103,4,0.103,9,0.081,32,0.512,43,0.007,45,0.56,66,0.12,225,0.006,226,0.006,271,1.209,330,2.025,490,0.879,655,0.041,657,1.19,1167,2.386,1168,2.477,1169,2.057,1170,2.057,2165,4.206,2170,3.625,2224,4.573,3105,5.995]],["title/interfaces/LoginResponse.html",[655,0.023,2158,2.592]],["body/interfaces/LoginResponse.html",[3,0.105,4,0.068,9,0.053,11,0.502,21,2.546,22,1.515,23,1.021,32,0.336,43,0.007,44,0.479,45,0.611,48,2.04,50,1.674,58,0.655,60,0.139,66,0.112,67,0.262,68,0.927,110,0.812,225,0.005,226,0.005,271,0.928,277,1.208,279,0.992,280,2.365,281,3.662,307,1.079,327,1.047,330,1.87,354,1.203,442,2.649,483,3.534,490,0.926,539,0.957,576,1.923,582,1.206,655,0.043,657,0.782,663,1.76,762,1.894,1051,5.713,1084,3.137,1114,2.497,1125,1.458,1186,1.963,1296,3.323,1322,3.621,1394,4.297,1412,4.143,1417,4.164,1454,2.527,1492,4.441,1494,4.081,1530,2.317,1537,2.255,1561,3.291,1589,4.081,1670,3.142,1680,4.461,1683,3.652,1684,3.923,1751,2.694,2148,3.142,2150,2.894,2151,2.452,2152,4.49,2153,3.676,2154,3.291,2155,3.662,2156,5.652,2158,4.441,2160,3.291,2162,3.676,2163,5.652,2164,2.694,2165,2.382,2167,2.694,2169,2.694,2170,3.228,2172,2.694,2174,3.676,2175,2.607,2176,2.607,2177,6.333,2178,6.059,2179,6.059,2180,6.059,2181,5.425,2182,6.082,2183,6.059,2184,5.713,2185,3.676,2186,3.142,2187,3.676,2188,3.676,2189,3.676,2190,3.676,2191,3.676,2192,3.676,2193,3.676,2194,6.059,2195,3.676,2196,3.676,2197,3.676,2198,5.652,2199,4.289,2200,5.652,2201,4.982,2202,4.982,2203,4.982,2204,3.676,2205,3.142,2206,3.142,2207,3.142]],["title/interfaces/Meta.html",[655,0.023,1141,1.516]],["body/interfaces/Meta.html",[3,0.076,4,0.051,9,0.04,11,0.662,23,0.57,43,0.007,44,0.778,58,0.771,60,0.14,62,0.24,66,0.135,67,0.199,68,0.928,101,1.486,107,1.569,109,1.598,110,1.182,116,1.657,133,1.062,158,1.719,225,0.004,226,0.004,263,1.372,277,1.088,279,1.104,297,1.627,307,1.201,327,0.793,330,1.208,354,1.497,475,1.654,480,1.588,490,0.929,493,1.217,496,0.751,498,1.449,533,0.933,539,1.811,576,1.771,582,0.674,655,0.047,657,0.592,660,1.444,663,0.711,665,1.082,666,1.082,674,0.686,737,1.657,762,1.552,873,1.217,1112,2.293,1113,1.217,1114,2.54,1115,2.387,1116,2.75,1117,0.704,1118,1.562,1119,1.147,1120,1.877,1121,1.947,1122,1.004,1123,1.062,1124,1.686,1125,1.924,1126,1.789,1127,1.789,1128,1.241,1129,1.754,1130,2.218,1131,1.918,1132,2.218,1133,1.719,1134,1.193,1135,1.241,1136,1.193,1137,1.754,1138,1.754,1139,1.241,1140,1.754,1141,2.444,1142,1.193,1143,1.241,1144,1.193,1145,1.193,1146,1.241,1147,1.193,1148,1.241,1149,1.241,1150,1.449,1151,1.193,1152,1.754,1153,1.754,1154,1.169,1155,1.241,1156,1.193,1157,1.241,1158,1.193,1159,1.241,1160,1.193,1161,1.241,1162,1.193,1163,1.241,1164,1.193,1165,1.103,1166,1.754,1167,1.023,1168,1.062,1169,1.023,1170,1.023,1171,1.241,1172,1.193,1173,1.241,1174,1.241,1175,1.962,1176,2.165,1177,2.165,1178,2.165,1179,1.241,1180,2.165,1181,1.193,1182,2.08,1183,2.08,1184,0.699,1185,1.169,1186,1.609,1187,1.751,1188,1.23,1189,0.968,1190,1.433,1191,2.444,1192,1.062,1193,0.968,1194,1.147,1195,1.241,1196,1.082,1197,1.169,1198,1.169,1199,1.241,1200,1.241,1201,1.169,1202,1.169,1203,2.66,1204,2.885,1205,2.909,1206,1.169,1207,2.218,1208,0.968,1209,2.444,1210,1.241,1211,1.241,1212,1.719,1213,1.719,1214,1.241,1215,1.147,1216,1.622,1217,1.147,1218,1.241,1219,1.241,1220,1.241,1221,1.147,1222,1.751,1223,1.241,1224,1.654,1225,1.241,1226,1.147,1227,1.241,1228,1.241,1229,1.217,1230,1.147,1231,1.622,1232,1.147,1233,1.241,1234,1.241,1235,1.241,1236,1.241,1237,1.592,1238,1.147,1239,1.241,1240,1.241,1241,1.241,1242,1.241,1243,1.147,1244,1.241,1245,1.241,1246,1.241,1247,1.241,1248,1.241,1249,1.241,1250,1.241,1251,1.147,1252,1.103,1253,1.082,1254,1.241,1255,1.241,1256,1.241,1257,1.241,1258,1.241,1259,1.241,1260,1.241,1261,1.241,1262,1.241,1263,1.241,1264,1.241,1265,1.825,1266,1.825,1267,1.719,1268,1.825,1269,1.241,1270,1.825]],["title/interfaces/Model.html",[655,0.023,663,0.904]],["body/interfaces/Model.html",[3,0.106,4,0.106,9,0.083,32,0.523,43,0.007,45,0.494,66,0.106,225,0.006,226,0.006,271,1.224,475,1.645,490,0.819,655,0.036,657,1.217,663,1.681,1150,2.026,3106,6.677]],["title/pipes/PercentformaterPipe.html",[1829,3.023,2041,3.167]],["body/pipes/PercentformaterPipe.html",[3,0.087,4,0.087,9,0.068,11,0.796,19,3.579,23,0.961,25,2.373,33,1.335,38,1.311,42,1.335,43,0.007,44,0.829,45,0.405,46,1.265,58,0.676,60,0.115,62,0.405,66,0.087,67,0.335,68,0.639,127,2.801,225,0.006,226,0.006,262,2.091,303,5.683,354,0.997,383,3.126,490,0.89,496,1.909,539,1.841,717,3.487,1175,2.359,1209,2.85,1352,5.502,1398,5.236,1536,5.225,1638,7.763,1639,8.141,1640,6.253,1644,6.253,1693,4.138,1728,6.809,1744,6.253,1829,5.683,1835,6.253,2041,5.225,2050,4.687,2055,6.812,2057,6.812,2737,5.225,3034,6.812,3107,5.471,3108,7.66,3109,7.66,3110,5.96,3111,7.66,3112,7.66,3113,7.66,3114,6.153,3115,7.66,3116,7.66,3117,6.153]],["title/interfaces/PricesCryptoFromApi.html",[655,0.023,1531,3.167]],["body/interfaces/PricesCryptoFromApi.html",[3,0.098,4,0.075,9,0.059,11,0.551,14,2.352,23,0.827,32,0.369,43,0.007,44,0.526,45,0.511,58,0.686,60,0.146,62,0.348,66,0.116,67,0.379,68,0.808,101,1.624,110,0.892,225,0.005,226,0.005,271,0.988,307,1.179,329,2.774,354,1.26,475,1.261,480,1.579,488,2.774,490,0.851,539,1.946,576,1.599,655,0.044,656,4.323,657,0.859,660,1.599,665,1.57,666,1.57,670,4.461,674,0.995,726,2.692,1010,3.45,1117,0.913,1131,1.687,1133,1.43,1150,1.43,1184,1.014,1186,1.781,1187,2.27,1188,1.892,1189,2.06,1190,1.749,1196,1.57,1252,1.601,1455,3.178,1490,3.614,1491,3.806,1492,4.611,1493,5.001,1494,3.306,1495,6.161,1496,4.264,1497,2.959,1498,4.024,1499,3.614,1500,3.806,1501,2.294,1502,3.806,1503,4.037,1504,3.614,1505,4.037,1506,4.037,1507,4.037,1508,4.037,1509,4.037,1510,4.037,1511,4.037,1512,4.037,1513,4.037,1514,4.037,1515,4.037,1516,4.037,1517,4.037,1518,4.037,1519,4.037,1520,4.037,1521,4.037,1522,4.037,1523,4.037,1524,4.037,1525,4.037,1526,4.037,1527,5.303,1528,4.358,1529,5.304,1530,3.342,1531,4.748,1532,5.931,1533,6.291,1534,6.291,1535,2.476,1536,3.614,1537,3.859,1538,2.544,1539,4.037,1540,3.806,1541,5.304,1542,4.037,1543,5.304,1544,4.037,1545,5.304,1546,4.037,1547,4.037,1548,3.806,1549,2.863,1550,4.037,1551,3.614,1552,3.806,1553,4.037,1554,4.037,1555,4.037]],["title/components/ProfilePage.html",[0,1.083,211,1.831]],["body/components/ProfilePage.html",[0,1.734,1,0.933,2,1.662,3,0.033,4,0.033,5,0.913,6,1.025,7,1.025,8,1.051,9,0.084,11,0.579,13,1.999,14,1.704,18,2.757,21,2.099,22,2.771,25,0.913,26,3.752,27,3.172,28,1.704,30,1.704,32,0.165,33,0.833,35,1.62,36,1.541,37,1.867,38,1.794,42,1.209,43,0.007,44,0.686,45,0.524,46,1.145,47,2.219,54,2.83,55,2.916,56,2.302,58,0.635,59,2.421,60,0.149,61,0.856,62,0.156,63,0.977,64,1.136,65,1.368,66,0.033,67,0.129,68,0.812,69,1.106,70,2.824,71,1.368,72,1.541,74,3.894,94,2.861,95,2.616,96,3.432,97,3.615,98,2.143,99,1.368,100,5.48,101,1.941,102,2.916,104,2.83,105,3.152,106,1.368,107,1.7,109,1.535,110,0.815,111,1.7,112,1.803,115,2.83,116,1.259,120,1.368,121,1.615,127,3.741,128,3.11,131,2.939,132,2.143,133,0.688,134,3.308,135,3.009,137,2.499,141,1.368,145,2.46,147,2.395,148,2.799,149,2.799,150,1.322,151,2.302,152,2.799,153,1.42,154,2.757,155,2.757,156,3.626,160,1.42,165,1.794,167,2.674,170,1.42,173,1.541,174,1.541,175,0.788,176,1.704,177,1.662,178,0.933,179,2.412,180,1.051,181,1.051,182,0.955,183,1.279,184,1.704,185,0.933,186,1.051,187,0.955,188,1.051,189,0.955,190,1.051,191,0.955,192,1.051,193,0.933,194,1.051,195,0.955,196,1.025,197,1.051,198,0.955,199,0.913,200,1.051,201,0.933,202,1.051,203,0.955,204,1.051,205,0.955,206,1.051,207,0.933,208,1.051,209,0.933,210,1.051,211,2.196,212,1.051,213,0.933,214,1.051,215,0.933,216,1.051,217,0.955,218,1.953,219,0.977,220,0.933,221,1.051,222,0.913,223,1.025,224,1.051,225,0.003,226,0.003,241,2.412,248,1.078,250,0.913,254,0.874,255,0.893,261,0.893,262,2.081,268,1.615,271,0.545,277,1.127,278,2.924,279,0.487,285,4.001,287,3.133,289,3.799,290,2.757,292,2.924,295,4.243,296,4.682,297,0.98,307,0.905,312,1.803,315,3.308,319,3.689,322,2.924,327,0.514,330,0.533,354,0.384,364,2.535,365,1.541,366,2.799,367,3.11,368,3.55,372,3.969,374,2.302,375,4.015,381,2.302,383,2.83,385,2.01,388,1.7,392,1.42,398,2.924,400,1.803,413,3.11,414,1.615,417,1.803,420,1.615,432,2.757,442,1.855,448,3.799,452,3.66,454,3.021,455,2.616,456,2.916,457,4.308,458,2.799,461,0.838,463,2.302,464,4.243,467,2.924,470,3.626,471,2.757,477,2.916,481,2.924,482,2.618,483,2.074,487,3.414,488,3.615,490,0.682,496,1.259,500,4.604,501,2.618,503,2.499,505,1.794,515,2.414,526,2.302,527,3.009,533,1.95,534,2.219,547,1.322,548,1.477,549,1.239,551,1.541,552,1.477,553,1.615,554,1.541,573,2.105,581,1.477,582,0.708,596,2.074,606,3.11,608,2.499,617,3.133,618,3.133,634,1.7,635,2.143,678,3.11,681,3.11,686,4.268,688,4.157,689,3.626,696,3.626,700,1.794,701,2.302,702,2.757,709,2.618,711,2.499,713,3.799,719,2.395,720,2.395,721,2.302,722,2.302,726,1.95,731,3.133,739,4.176,758,2.143,771,0.821,776,1.615,777,1.477,781,1.615,805,2.105,806,2.105,817,2.105,818,1.541,820,1.477,821,2.105,824,2.105,826,1.541,842,1.615,843,1.42,846,2.105,849,1.803,851,2.105,855,1.932,857,1.803,872,2.105,885,3.133,889,1.7,891,1.7,893,1.541,894,2.704,896,6.067,898,2.105,899,2.105,900,4.953,901,3.303,902,3.414,903,2.924,904,2.105,905,2.105,906,2.105,907,2.105,908,3.414,909,2.105,910,1.803,911,1.7,912,2.105,913,4.306,914,1.7,915,3.414,916,2.105,917,4.001,918,4.997,919,4.397,920,2.105,921,2.105,922,4.397,923,4.306,924,1.932,926,2.105,929,1.7,935,1.932,936,1.541,937,2.105,947,1.203,950,1.932,953,2.302,1126,1.279,1215,1.205,1221,1.205,1222,1.898,1231,1.159,1252,1.159,1276,2.395,1286,2.143,1296,2.83,1317,1.7,1321,3.414,1397,2.499,1402,3.063,1405,1.322,1415,2.618,1451,2.143,1478,3.152,1479,1.932,1483,2.757,1486,2.924,1530,1.843,1586,3.341,1611,2.618,1733,3.799,1747,2.105,1748,3.689,1749,2.924,1763,2.105,1783,3.414,1795,3.414,1811,3.414,1836,2.924,1844,3.133,1852,3.414,1859,2.618,1935,2.105,2067,3.133,2079,3.414,2104,3.689,2186,2.499,2221,3.133,2224,4.277,2351,1.932,2431,3.953,2432,3.953,2434,4.547,2439,4.547,2443,3.133,2451,2.924,2456,4.997,2464,2.105,2478,2.105,2479,2.105,2484,3.133,2485,3.133,2502,3.414,2503,3.414,2512,1.932,2521,1.932,2539,4.243,2540,3.414,2828,3.133,2858,2.924,2970,3.414,3074,1.932,3118,2.105,3119,3.839,3120,5.829,3121,4.842,3122,3.839,3123,4.842,3124,4.842,3125,5.57,3126,3.839,3127,5.57,3128,4.842,3129,3.839,3130,3.839,3131,5.57,3132,3.839,3133,3.839,3134,2.367,3135,2.367,3136,2.367,3137,3.839,3138,2.367,3139,3.839,3140,2.367,3141,3.839,3142,2.367,3143,3.839,3144,3.839,3145,3.839,3146,2.367,3147,2.367,3148,2.367,3149,2.367,3150,2.367,3151,2.367,3152,2.367,3153,2.367,3154,2.367,3155,2.367,3156,2.367,3157,2.367,3158,2.367,3159,2.367,3160,2.367,3161,2.367,3162,2.367,3163,2.367,3164,2.367,3165,2.367,3166,2.367,3167,2.367,3168,2.367,3169,2.367,3170,2.367,3171,2.367,3172,2.367,3173,2.367,3174,2.367,3175,2.367,3176,2.367,3177,2.367,3178,2.367,3179,2.367,3180,2.367,3181,2.367,3182,2.367,3183,2.367,3184,2.367,3185,3.839,3186,3.839,3187,3.839,3188,3.839,3189,3.839,3190,3.839,3191,3.839,3192,2.367,3193,3.414,3194,2.367,3195,2.367,3196,2.367,3197,2.367,3198,4.842,3199,2.367,3200,2.367,3201,2.367,3202,2.367,3203,3.839,3204,2.367,3205,6.556,3206,4.842,3207,4.842,3208,3.414,3209,2.367,3210,2.367,3211,2.367]],["title/modules/ProfilePageModule.html",[227,1.402,3212,3.537]],["body/modules/ProfilePageModule.html",[3,0.091,4,0.091,9,0.071,43,0.007,60,0.182,62,0.425,66,0.091,67,0.352,100,4.209,175,2.153,211,3.654,225,0.006,226,0.006,227,1.953,229,2.387,230,2.943,231,4.465,232,3.385,233,3.191,234,2.493,239,4.135,240,3.385,241,2.799,243,3.046,244,3.114,245,4.409,246,3.493,247,4.409,248,2.943,249,4.135,250,2.493,251,3.61,253,3.493,254,2.387,255,2.439,256,3.61,966,5.749,967,6.447,968,4.925,1012,5.749,1013,5.749,2045,7.023,2046,5.749,2588,5.174,2930,4.644,3102,6.016,3212,7.313,3213,5.749,3214,5.749,3215,5.749,3216,6.656,3217,6.465,3218,5.749,3219,7.898,3220,6.465,3221,7.898,3222,6.465]],["title/modules/ProfilePageRoutingModule.html",[227,1.402,3216,3.335]],["body/modules/ProfilePageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,211,3.339,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,3216,6.081,3218,6.459,3223,7.264]],["title/components/RegisterPage.html",[0,1.083,213,1.831]],["body/components/RegisterPage.html",[0,1.47,1,1.413,2,2.293,3,0.05,4,0.05,5,1.382,6,1.552,7,1.552,8,1.591,9,0.04,11,0.655,14,2.351,18,4.526,21,1.696,22,2.44,25,1.382,26,3.972,27,3.408,28,2.351,30,2.351,32,0.25,33,1.15,35,2.024,37,2.43,38,1.797,42,1.367,43,0.007,44,0.82,45,0.543,46,1.295,47,3.642,49,3.613,54,2.691,55,2.773,58,0.656,59,2.57,60,0.161,61,1.296,62,0.236,63,1.479,64,1.72,65,2.072,66,0.05,67,0.195,68,0.876,69,1.675,70,3.101,71,2.072,74,3.742,94,3.252,102,1.876,107,0.883,109,0.899,110,0.891,114,2.236,122,2.236,128,2.001,131,2.543,145,1.821,157,2.001,165,2.475,167,3.565,175,1.194,176,2.351,177,2.293,178,1.413,179,3.014,180,1.591,181,1.591,182,1.446,183,1.764,184,2.351,185,1.413,186,1.591,187,1.446,188,1.591,189,1.446,190,1.591,191,1.446,192,1.591,193,1.413,194,1.591,195,1.446,196,2.728,197,1.591,198,1.446,199,1.382,200,1.591,201,1.413,202,1.591,203,1.446,204,1.591,205,1.446,206,1.591,207,1.413,208,1.591,209,1.413,210,1.591,211,1.413,212,1.591,213,2.929,214,1.591,215,1.413,216,1.591,217,1.446,218,1.446,219,1.479,220,1.413,221,1.591,222,1.382,223,1.552,224,1.591,225,0.004,226,0.004,248,1.632,250,1.382,254,2.327,255,1.352,261,1.352,262,1.218,268,2.444,271,0.751,276,1.876,277,0.68,285,5.584,292,4.035,296,4.835,300,4.324,303,3.448,307,0.667,315,2.862,364,2.773,365,2.333,366,2.072,367,2.957,368,3.436,370,2.574,371,2.574,372,3.773,374,3.177,375,4.34,377,3.613,378,3.644,381,2.149,383,1.821,384,2.444,385,3.299,391,2.925,392,3.177,403,2.236,418,2.73,434,2.149,442,1.764,452,3.518,456,3.644,457,3.931,458,4.293,470,3.448,471,3.805,486,3.613,490,0.763,496,1.527,500,3.062,515,2.485,526,2.149,527,2.862,534,3.062,551,2.333,554,2.333,582,0.661,596,2.862,606,2.001,608,2.333,678,3.886,681,3.886,686,5.375,688,4.649,689,3.448,690,5.151,696,4.102,700,3.633,701,3.177,703,5.598,717,2.411,721,3.177,722,3.177,733,4.035,734,2.615,735,4.531,758,2.957,771,1.243,773,3.187,776,2.444,777,2.236,781,2.444,818,2.333,820,2.236,826,2.333,828,2.925,829,3.805,830,3.805,831,2.925,832,3.805,834,2.925,835,2.574,836,2.333,837,2.574,839,2.925,842,2.444,843,2.149,890,2.73,894,2.957,922,3.805,936,3.448,1088,3.169,1190,1.192,1206,1.147,1283,2.574,1286,2.001,1317,2.574,1322,2.411,1401,2.444,1412,2.957,1451,2.957,1586,3.177,1735,6.189,1752,2.73,1834,4.71,1856,4.035,1872,2.925,2061,2.574,2104,4.035,2111,4.324,2224,3.95,2431,5.143,2432,5.143,2434,5.681,2439,5.681,2443,4.324,2456,6.062,2484,4.324,2485,4.324,2504,4.71,2509,2.925,2510,3.805,2511,2.444,2523,2.73,2580,2.574,2649,2.73,2944,4.71,3021,3.187,3062,4.71,3063,5.681,3066,4.71,3067,4.71,3074,5.143,3077,3.187,3081,3.187,3082,4.71,3083,3.187,3084,3.187,3085,3.187,3086,4.71,3087,3.187,3088,3.187,3089,2.925,3090,3.187,3091,4.324,3092,4.71,3093,3.187,3094,3.187,3095,3.187,3120,3.187,3224,3.187,3225,6.301,3226,5.297,3227,5.297,3228,5.297,3229,5.297,3230,5.297,3231,5.297,3232,3.584,3233,3.584,3234,3.584,3235,5.297,3236,3.584,3237,3.584,3238,3.584,3239,3.584,3240,3.584,3241,3.584,3242,3.187,3243,3.584,3244,3.584,3245,3.584,3246,3.584]],["title/modules/RegisterPageModule.html",[227,1.402,3247,3.537]],["body/modules/RegisterPageModule.html",[3,0.095,4,0.095,9,0.074,43,0.007,60,0.179,62,0.441,66,0.095,67,0.365,175,2.234,213,3.686,225,0.006,226,0.006,227,2.026,229,2.477,230,3.054,231,4.537,232,3.512,233,3.311,234,2.587,239,4.229,240,3.512,241,2.905,243,3.115,244,3.185,245,4.509,246,3.624,247,4.509,248,3.054,249,4.229,250,2.587,251,3.745,253,3.624,254,2.477,255,2.531,256,3.745,1088,3.054,2588,5.219,2930,4.818,3102,6.153,3247,7.352,3248,5.965,3249,5.965,3250,5.965,3251,6.714,3252,6.708,3253,5.965]],["title/modules/RegisterPageRoutingModule.html",[227,1.402,3251,3.335]],["body/modules/RegisterPageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,213,3.339,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,3251,6.081,3253,6.459,3254,7.264]],["title/interfaces/RegisterPayLoad.html",[655,0.023,2170,2.292]],["body/interfaces/RegisterPayLoad.html",[3,0.102,4,0.102,9,0.08,32,0.502,43,0.007,45,0.605,66,0.119,225,0.006,226,0.006,271,1.195,279,1.836,280,3.229,330,2.009,490,0.916,655,0.041,657,1.168,1167,2.36,1168,2.45,1169,2.018,1170,2.018,2165,3.557,2170,4.159,2224,4.538,3105,5.881]],["title/components/SearchPage.html",[0,1.083,215,1.831]],["body/components/SearchPage.html",[0,1.601,1,1.034,2,1.805,3,0.037,4,0.037,5,1.011,6,1.136,7,1.136,8,1.164,9,0.029,11,0.713,13,1.083,19,1.226,20,3.192,22,2.475,23,0.651,24,3.236,25,1.011,26,3.813,27,3.227,28,1.85,30,1.85,32,0.183,33,0.905,34,3.299,35,1.718,36,1.707,37,2,38,1.932,42,1.49,43,0.007,44,0.764,45,0.554,46,1.411,47,2.409,50,1.446,54,3.002,55,3.094,56,2.5,58,0.766,59,2.658,60,0.156,61,1.875,62,0.172,63,1.083,64,1.259,65,1.516,66,0.037,67,0.143,68,0.875,69,1.226,70,2.85,71,1.516,72,1.707,74,3.315,94,3.363,96,1.373,97,2.182,104,2.118,106,2.409,107,1.588,109,1.045,120,1.516,122,3.236,125,2.713,126,3.402,127,3.276,128,2.327,131,2.49,134,2.252,135,2.252,137,1.707,138,2.332,141,2.998,142,1.789,143,1.789,144,2.141,145,2.635,147,1.636,148,3.415,149,3.415,150,2.896,152,2.998,153,2.5,159,1.884,165,1.948,167,2.49,170,1.573,173,4.197,174,1.707,175,0.873,176,1.85,177,1.805,178,1.034,179,2.791,180,1.164,181,1.164,182,1.058,183,1.388,184,1.85,185,1.034,186,1.164,187,1.058,188,1.164,189,1.058,190,1.164,191,1.058,192,1.164,193,1.034,194,1.164,195,1.058,196,1.136,197,1.164,198,1.058,199,1.011,200,1.164,201,1.034,202,1.164,203,1.058,204,1.164,205,1.058,206,1.164,207,1.034,208,1.164,209,1.034,210,1.164,211,1.034,212,1.164,213,1.034,214,1.164,215,2.33,216,1.164,217,1.058,218,1.058,219,1.083,220,1.034,221,1.164,222,1.011,223,1.136,224,1.164,225,0.005,226,0.003,254,0.968,255,0.99,261,0.99,262,1.763,271,0.591,277,1.082,289,2.843,304,4.908,305,4.823,307,0.744,311,3.192,315,3.483,327,0.569,354,0.841,368,1.295,378,1.373,383,2.118,401,1.516,402,1.789,409,1.789,412,2.141,452,4.755,454,3.236,455,2.802,456,3.094,457,4.022,458,2.998,461,1.476,470,2.713,475,1.607,480,1.611,483,2.252,488,2.182,490,0.83,496,1.684,498,1.125,500,3.727,503,2.713,504,2.6,505,1.948,515,3.109,518,3.402,526,2.5,528,2.141,533,1.064,547,1.464,548,1.636,549,2.182,551,1.707,552,1.636,553,1.789,554,1.707,582,1.327,590,3.706,596,2.802,606,3.6,628,4.612,645,3.706,660,1.066,678,2.327,681,3.299,688,4.317,700,2.761,701,3.111,703,1.636,709,2.843,710,3.847,711,2.713,717,1.897,719,2.6,720,2.6,721,2.5,722,2.5,725,2.5,732,2.896,735,2.713,742,6.118,758,2.327,771,0.91,777,1.636,843,1.573,869,1.998,891,2.994,894,1.464,914,1.884,917,1.884,919,2.994,936,1.707,944,2.141,947,1.332,948,2.332,953,1.573,984,1.789,1123,0.763,1130,1.537,1131,1.983,1190,0.938,1207,1.235,1216,0.792,1231,1.785,1237,2.034,1286,1.464,1287,2.6,1295,3.175,1347,3.111,1398,1.573,1402,1.948,1443,4.197,1448,3.402,1451,1.464,1496,1.897,1605,1.789,1698,3.236,1780,5.254,1781,3.402,1796,2.141,1825,4.234,1826,4.234,1827,4.234,1831,3.175,1859,2.843,1873,1.884,1881,2.141,1882,2.141,1883,2.141,2061,1.884,2231,3.175,2311,3.706,2317,3.706,2391,2.5,2392,2.5,2409,3.727,2451,3.175,2545,3.402,2671,3.706,2737,4.682,2740,4.03,2786,1.998,2791,3.175,2951,2.332,2959,2.332,3075,1.998,3242,2.332,3255,2.141,3256,5.186,3257,4.168,3258,4.168,3259,4.168,3260,5.186,3261,7.574,3262,5.186,3263,4.168,3264,5.186,3265,4.168,3266,4.168,3267,5.909,3268,5.909,3269,5.909,3270,5.909,3271,4.168,3272,4.168,3273,4.168,3274,3.402,3275,4.168,3276,4.168,3277,2.623,3278,2.623,3279,5.186,3280,2.623,3281,4.168,3282,2.623,3283,2.623,3284,4.168,3285,2.623,3286,2.623,3287,2.623,3288,4.168,3289,2.623,3290,7.468,3291,4.168,3292,2.623,3293,4.168,3294,5.909,3295,4.168,3296,4.168,3297,2.623,3298,2.623,3299,6.447,3300,2.623,3301,5.909,3302,6.447,3303,4.168,3304,2.623,3305,2.623,3306,5.263,3307,4.168,3308,4.168,3309,2.623,3310,2.623,3311,2.623,3312,2.623,3313,2.623,3314,2.623,3315,2.623,3316,4.234,3317,2.623,3318,2.623,3319,2.623,3320,2.623,3321,2.623,3322,2.332,3323,2.332,3324,2.623,3325,2.623,3326,2.623,3327,2.623,3328,2.623,3329,2.623,3330,2.623,3331,2.623,3332,2.623,3333,2.623,3334,2.623,3335,2.623,3336,2.623,3337,2.623,3338,2.623,3339,2.623,3340,2.623,3341,2.623,3342,2.623,3343,4.168,3344,2.623,3345,2.623,3346,2.623,3347,2.623,3348,2.623,3349,2.623,3350,2.623,3351,2.623,3352,2.623,3353,5.186,3354,2.623,3355,5.186,3356,2.623,3357,2.623,3358,2.623,3359,2.623,3360,2.623,3361,2.623,3362,2.623,3363,2.623,3364,2.623,3365,2.623,3366,2.623,3367,2.623,3368,2.623,3369,2.623,3370,2.623,3371,2.623,3372,2.623,3373,2.332,3374,2.332,3375,2.623,3376,2.623,3377,2.623,3378,2.623,3379,2.623,3380,2.623,3381,2.623,3382,2.623,3383,2.623,3384,2.623,3385,2.623,3386,2.623,3387,2.623,3388,2.623,3389,2.623,3390,2.623,3391,4.168,3392,2.623,3393,2.623,3394,2.623,3395,4.168,3396,2.623,3397,2.623,3398,4.168,3399,2.623,3400,2.332,3401,2.623,3402,2.623,3403,2.623,3404,2.623,3405,2.623,3406,2.332,3407,2.623,3408,2.332,3409,2.623,3410,2.623,3411,2.623,3412,4.168,3413,2.623]],["title/modules/SearchPageModule.html",[227,1.402,3414,3.537]],["body/modules/SearchPageModule.html",[3,0.094,4,0.094,9,0.074,43,0.007,60,0.18,62,0.439,66,0.094,67,0.363,175,2.223,215,3.682,225,0.006,226,0.006,227,2.016,229,2.465,230,3.039,231,4.527,232,3.495,233,3.295,234,2.574,239,4.216,240,3.495,241,2.89,243,3.105,244,3.175,245,4.496,246,3.606,247,4.496,248,3.039,249,4.216,250,2.574,251,3.727,253,3.606,254,2.465,255,2.519,256,3.727,742,4.794,2588,5.213,2591,5.935,3414,7.347,3415,5.935,3416,5.935,3417,5.935,3418,6.706,3419,6.675,3420,5.935,3421,8.052,3422,6.675]],["title/modules/SearchPageRoutingModule.html",[227,1.402,3418,3.335]],["body/modules/SearchPageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,215,3.339,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,3418,6.081,3420,6.459,3423,7.264]],["title/modules/SharedModule.html",[227,1.402,2588,2.592]],["body/modules/SharedModule.html",[3,0.079,4,0.079,9,0.062,43,0.007,60,0.182,62,0.37,66,0.079,67,0.306,175,1.873,182,3.788,183,1.873,189,3.788,191,3.788,195,3.788,196,2.434,198,3.788,203,3.788,205,3.788,222,3.45,225,0.005,226,0.005,227,1.698,229,2.076,230,2.559,231,4.189,232,2.944,233,2.775,234,2.79,239,3.788,240,2.944,241,2.434,243,2.79,244,2.853,245,4.04,246,3.037,247,4.04,248,2.559,249,3.788,250,2.168,253,3.037,254,2.076,255,2.121,256,3.139,260,3.788,261,2.121,266,4.283,550,4.999,1742,5.171,2041,6.102,2059,4.589,2588,5.522,3102,5.512,3424,4.999,3425,4.999,3426,5.622,3427,4.999,3428,5.622,3429,5.622,3430,5.622,3431,5.622,3432,5.622,3433,5.622,3434,5.622,3435,5.622,3436,5.622,3437,5.622,3438,7.235,3439,5.622,3440,5.622,3441,5.622,3442,5.622]],["title/injectables/SharedService.html",[458,2.684,1117,0.609]],["body/injectables/SharedService.html",[3,0.086,4,0.086,9,0.067,11,0.634,22,1.914,27,2.204,32,0.425,33,1.653,35,1.773,38,1.623,42,1.653,43,0.007,44,0.757,45,0.501,46,1.566,58,0.538,60,0.156,62,0.401,66,0.086,67,0.332,68,0.792,70,2.204,74,3.687,94,2.849,98,3.404,104,4.22,114,3.803,132,4.252,225,0.005,226,0.005,250,2.351,254,2.251,255,2.3,262,2.072,364,3.192,452,4.638,456,4.556,457,3.803,458,4.403,470,6.151,482,5.195,490,0.866,527,3.294,596,3.294,635,5.231,674,1.145,705,7.387,717,3.467,820,3.803,836,3.969,1117,0.998,1184,1.166,1364,4.976,1372,2.64,1412,3.404,1448,4.976,1610,5.471,1682,5.421,1733,5.195,2309,5.421,2838,4.976,2839,5.421,2901,8.549,3075,6.328,3443,5.421,3444,7.616,3445,6.096,3446,8.701,3447,6.096,3448,7.616,3449,7.616,3450,6.096,3451,7.616,3452,7.616,3453,7.616,3454,7.616,3455,6.096,3456,6.096,3457,6.096,3458,6.096,3459,6.096]],["title/interfaces/Small.html",[655,0.023,1182,1.516]],["body/interfaces/Small.html",[3,0.073,4,0.049,9,0.039,11,0.644,23,0.545,32,0.243,43,0.007,44,0.832,45,0.56,58,0.763,60,0.138,62,0.229,66,0.135,67,0.19,68,0.919,101,1.446,107,1.896,109,1.93,110,1.156,116,2.002,133,1.014,158,1.673,225,0.004,226,0.004,263,1.875,271,0.736,277,1.075,279,1.067,297,1.584,307,1.196,327,0.757,330,1.168,354,1.487,475,1.642,480,1.567,490,0.933,493,1.162,496,0.717,498,1.401,533,0.891,539,1.852,576,1.752,582,0.643,655,0.046,657,0.565,660,1.412,663,0.679,665,1.034,666,1.034,674,0.655,737,2.002,762,1.518,873,1.162,1112,2.243,1113,1.162,1114,2.503,1115,2.334,1116,2.709,1117,0.68,1118,1.51,1119,1.095,1120,1.841,1121,1.91,1122,0.959,1123,1.014,1124,1.63,1125,1.873,1126,1.729,1127,1.729,1128,1.185,1129,1.695,1130,2.176,1131,1.9,1132,2.176,1133,1.673,1134,1.139,1135,1.185,1136,1.139,1137,1.695,1138,1.695,1139,1.185,1140,1.695,1141,2.243,1142,1.139,1143,1.185,1144,1.139,1145,1.139,1146,1.185,1147,1.139,1148,1.185,1149,1.185,1150,1.401,1151,1.139,1152,1.695,1153,1.695,1154,1.117,1155,1.185,1156,1.139,1157,1.185,1158,1.139,1159,1.185,1160,1.139,1161,1.185,1162,1.139,1163,1.185,1164,1.139,1165,1.054,1166,1.695,1167,0.977,1168,1.014,1169,0.977,1170,0.977,1171,1.185,1172,1.139,1173,1.185,1174,1.185,1175,1.909,1176,2.616,1177,2.616,1178,2.616,1179,1.185,1180,2.616,1181,1.139,1182,2.243,1183,2.025,1184,0.667,1185,1.117,1186,1.573,1187,1.705,1188,1.189,1189,0.924,1190,1.395,1191,2.397,1192,1.014,1193,0.924,1194,1.095,1195,1.185,1196,1.034,1197,1.117,1198,1.117,1199,1.185,1200,1.185,1201,1.117,1202,1.117,1203,2.616,1204,2.858,1205,2.88,1206,1.117,1207,2.176,1208,0.924,1209,2.397,1210,1.185,1211,1.185,1212,1.662,1213,1.662,1214,1.185,1215,1.095,1216,1.568,1217,1.095,1218,1.185,1219,1.185,1220,1.185,1221,1.095,1222,1.705,1223,1.185,1224,1.598,1225,1.185,1226,1.095,1227,1.185,1228,1.185,1229,1.162,1230,1.095,1231,1.568,1232,1.095,1233,1.185,1234,1.185,1235,1.185,1236,1.185,1237,1.538,1238,1.095,1239,1.185,1240,1.185,1241,1.185,1242,1.185,1243,1.095,1244,1.185,1245,1.185,1246,1.185,1247,1.185,1248,1.185,1249,1.185,1250,1.185,1251,1.095,1252,1.054,1253,1.034,1254,1.185,1255,1.185,1256,1.185,1257,1.185,1258,1.185,1259,1.185,1260,1.185,1261,1.185,1262,1.185,1263,1.185,1264,1.185,1265,1.764,1266,1.764,1267,1.662,1268,1.764,1269,1.185,1270,1.764]],["title/components/SplashPage.html",[0,1.083,217,1.873]],["body/components/SplashPage.html",[0,2.061,1,1.714,2,2.635,3,0.061,4,0.061,5,1.677,6,1.882,7,1.882,8,1.929,9,0.048,13,2.899,15,4.372,19,2.031,21,2.248,23,0.95,24,4.382,25,1.677,26,4.053,27,3.459,28,2.701,30,2.701,32,0.303,33,1.321,34,4.248,35,1.77,37,2.709,38,1.817,42,0.943,43,0.007,44,0.756,45,0.462,46,0.894,50,2.111,54,3.866,55,3.984,56,3.65,58,0.672,59,2.958,60,0.16,61,1.572,62,0.286,63,1.795,64,2.087,65,2.513,66,0.061,67,0.236,69,2.031,70,2.896,74,1.929,97,2.276,102,2.276,106,2.513,107,1.499,127,1.979,167,2.087,175,1.448,176,2.701,177,2.635,178,1.714,179,3.294,180,1.929,181,1.929,182,1.754,183,2.027,184,2.701,185,1.714,186,1.929,187,1.754,188,1.929,189,1.754,190,1.929,191,1.754,192,1.929,193,1.714,194,1.929,195,1.754,196,1.882,197,1.929,198,1.754,199,1.677,200,1.929,201,1.714,202,1.929,203,1.754,204,1.929,205,1.754,206,1.929,207,1.714,208,1.929,209,1.714,210,1.929,211,1.714,212,1.929,213,1.714,214,1.929,215,1.714,216,1.929,217,3.069,218,3.231,219,1.795,220,1.714,221,1.929,222,1.677,223,1.882,224,1.929,225,0.004,226,0.004,243,2.347,249,3.187,250,1.677,254,1.605,261,1.64,262,2.068,263,1.554,271,0.863,277,0.558,311,4.111,364,3.187,366,2.513,367,3.398,368,4.097,372,2.209,373,2.965,374,3.65,375,4.472,376,4.968,377,5.661,378,3.187,379,4.968,380,3.548,381,2.607,382,3.548,383,2.209,384,2.965,385,3.187,392,2.607,414,2.965,448,5.189,481,3.312,496,1.251,501,4.151,515,2.4,519,3.548,522,2.513,606,3.398,608,3.962,678,4.998,680,4.968,681,4.248,688,4.398,700,3.555,709,2.965,731,4.968,738,2.83,758,3.921,771,1.508,774,2.712,777,2.712,877,3.312,884,3.312,894,3.921,932,2.965,957,3.866,1007,5.35,1084,1.64,1279,4.968,1283,3.122,1297,2.712,1352,3.122,1611,4.151,1835,3.548,1836,4.637,1855,4.968,1856,5.35,1946,5.733,2472,3.866,2511,4.79,2512,3.548,2513,3.866,2514,3.866,2515,3.866,2516,3.312,2517,3.866,2521,3.548,2539,4.637,2629,3.866,3075,3.312,3460,3.866,3461,6.086,3462,7.023,3463,6.086,3464,7.609,3465,4.347,3466,4.347,3467,6.086,3468,7.023,3469,6.086,3470,4.347,3471,6.086,3472,4.347,3473,7.023,3474,4.347,3475,7.023,3476,6.086,3477,4.347,3478,4.347,3479,4.347,3480,4.347,3481,6.086,3482,4.347,3483,4.347,3484,4.347,3485,4.347,3486,4.347,3487,4.347,3488,4.347,3489,4.347,3490,4.347,3491,4.347,3492,4.347,3493,4.347,3494,4.347,3495,4.347,3496,6.086,3497,4.347,3498,4.347,3499,4.347,3500,4.347,3501,4.347]],["title/modules/SplashPageRoutingModule.html",[227,1.402,3502,3.79]],["body/modules/SplashPageRoutingModule.html",[0,1.694,3,0.102,4,0.102,9,0.08,43,0.007,60,0.168,62,0.478,66,0.102,67,0.395,217,3.415,225,0.006,226,0.006,229,2.683,234,2.801,243,2.801,244,3.339,258,3.924,259,4.079,260,4.433,261,2.741,262,2.469,263,1.855,264,4.056,3502,6.911,3503,7.264,3504,7.264]],["title/injectables/StrapiAutenticationService.html",[993,3.335,1117,0.609]],["body/injectables/StrapiAutenticationService.html",[3,0.091,4,0.053,9,0.042,11,0.848,19,1.756,21,2.613,23,0.587,32,0.262,33,1.19,35,1.595,38,1.966,42,1.816,43,0.007,44,0.831,45,0.57,46,1.721,50,1.303,51,3.062,58,0.825,59,2.92,60,0.16,61,1.359,62,0.247,66,0.053,67,0.204,68,0.74,70,2.858,165,1.756,225,0.004,226,0.004,241,1.627,271,0.778,272,2.707,277,1.231,307,1.053,327,0.816,354,1.383,442,3.115,444,3.939,461,1.33,474,3.062,475,1.639,477,2.871,482,5.392,490,0.905,496,0.773,498,1.014,505,3.026,515,1.482,522,4.377,533,0.96,534,2.172,543,2.03,582,1.194,640,2.563,659,2.318,674,0.706,712,4.652,717,1.711,734,1.855,762,1.212,771,1.303,973,3.847,978,2.699,979,2.699,987,2.699,988,2.699,990,2.563,993,3.939,995,3.067,1005,2.699,1084,2.983,1088,3.241,1117,0.719,1184,0.719,1193,2.094,1208,1.886,1296,1.909,1297,3.421,1298,5.114,1306,3.967,1310,2.863,1311,2.446,1313,2.446,1322,2.497,1341,2.699,1347,2.254,1371,6.689,1372,1.627,1374,3.067,1375,4.933,1377,4.933,1378,4.933,1379,4.933,1380,4.933,1381,4.178,1382,4.178,1383,4.178,1384,4.178,1385,4.933,1388,3.289,1389,6.501,1390,4.178,1393,5.438,1396,1.855,1400,3.391,1401,3.74,1402,3.694,1403,4.178,1404,2.863,1405,3.062,1406,2.563,1408,5.768,1409,3.939,1412,3.062,1413,4.178,1415,4.417,1416,4.178,1417,3.728,1419,5.759,1420,6.219,1421,2.863,1423,3.939,1424,4.178,1425,4.178,1427,2.863,1429,4.933,1430,2.863,1432,1.804,1433,2.863,1435,2.863,1436,2.863,1438,5.118,1439,3.067,1441,3.067,1442,3.067,1443,2.446,1444,3.067,1454,3.728,1462,3.341,1463,3.341,1535,2.563,1582,2.699,1593,5.722,1617,2.446,1624,2.699,1625,4.856,1712,3.74,1829,2.446,2155,3.197,2175,2.03,2176,2.03,2212,4.877,2213,4.877,2214,4.877,2215,4.877,2231,5.424,2235,3.341,2236,3.341,2237,3.341,2238,3.341,2239,3.341,2240,3.341,2241,3.341,2242,3.341,2243,3.341,2244,3.341,2245,3.341,2247,2.863,2256,3.067,2257,3.341,2258,3.341,2259,3.341,2260,3.341,2261,3.341,2262,3.341,2263,3.341,2264,3.341,2265,3.341,2342,5.114,2345,4.877,2620,6.331,2685,4.178,2758,4.178,2847,6.453,3505,3.421,3506,3.758,3507,3.758,3508,4.227,3509,3.758,3510,3.758,3511,7.12,3512,7.12,3513,3.758,3514,3.758,3515,3.758,3516,3.758,3517,2.254,3518,2.254,3519,3.758,3520,3.341,3521,4.877,3522,3.758,3523,3.758,3524,3.758,3525,5.484,3526,5.484,3527,3.758,3528,5.484,3529,3.758,3530,3.758,3531,3.758,3532,3.758,3533,3.758,3534,3.758,3535,3.758,3536,3.758,3537,3.758]],["title/injectables/StrapiAuthMappingService.html",[1004,2.684,1117,0.609]],["body/injectables/StrapiAuthMappingService.html",[3,0.065,4,0.065,9,0.051,11,0.852,14,4.024,23,0.723,32,0.323,33,1.38,38,1.746,42,1.778,43,0.007,44,0.814,45,0.539,46,1.685,48,3.304,50,2.936,58,0.8,60,0.146,62,0.304,66,0.119,67,0.252,68,0.88,110,1.553,225,0.005,226,0.005,277,1.25,279,1.307,280,2.299,307,0.8,330,1.759,354,1.328,442,2.984,490,0.741,576,1.969,655,0.04,663,1.649,674,0.87,1004,3.675,1084,3.421,1088,4.02,1117,0.833,1165,1.398,1167,1.781,1168,1.849,1169,1.781,1170,1.781,1184,0.885,1186,1.939,1190,1.987,1193,2.071,1322,3.854,1372,2.004,1417,4.832,1432,3.052,1438,5.077,1693,4.223,1850,4.365,2151,2.352,2155,3.138,2157,5.19,2158,3.55,2159,5.19,2160,3.157,2164,3.55,2165,3.584,2167,3.55,2169,3.55,2170,3.584,2171,4.117,2172,3.55,2175,2.501,2176,2.501,2199,2.676,2224,4.301,2408,3.813,2605,3.014,2684,2.777,3110,4.139,3505,5.281,3508,5.374,3517,4.914,3518,4.355,3538,4.629,3539,4.629,3540,4.877,3541,5.332,3542,4.629,3543,4.877,3544,4.629,3545,4.336,3546,4.336,3547,2.888,3548,3.157,3549,3.157,3550,3.157,3551,3.157,3552,3.157,3553,3.157,3554,3.157,3555,3.157,3556,3.157,3557,3.157,3558,3.157,3559,4.336,3560,4.336,3561,4.336,3562,4.336,3563,4.336,3564,4.336,3565,4.953,3566,3.157,3567,3.157,3568,3.157,3569,3.157,3570,3.157]],["title/interfaces/StrapiLoginResponse.html",[655,0.023,3517,2.785]],["body/interfaces/StrapiLoginResponse.html",[3,0.077,4,0.077,9,0.061,14,3.849,23,0.856,32,0.382,43,0.007,45,0.468,48,3.009,50,1.902,58,0.766,60,0.157,62,0.361,66,0.125,67,0.298,68,0.924,110,1.495,225,0.005,226,0.005,271,1.01,277,1.238,279,1.128,280,1.983,307,0.69,330,1.602,354,1.406,442,2.787,490,0.75,576,1.923,655,0.042,657,0.889,663,1.54,674,1.03,1004,3.17,1084,3.157,1088,3.599,1117,0.933,1165,1.656,1167,1.994,1168,2.07,1169,1.994,1170,1.994,1184,1.049,1186,1.811,1190,1.883,1193,1.886,1322,3.599,1417,4.653,1432,2.633,1438,5.33,1693,3.846,1850,3.975,2151,2.786,2155,3.514,2164,3.062,2165,2.707,2167,3.062,2169,3.062,2170,2.707,2172,3.062,2175,2.963,2176,2.963,2199,3.17,2224,4.017,2408,3.289,2605,3.57,2684,3.289,3110,3.57,3505,3.421,3508,5.258,3517,4.27,3518,4.741,3540,4.442,3541,4.856,3543,4.442,3545,4.856,3546,4.856,3547,3.421,3548,3.74,3549,3.74,3550,3.74,3551,3.74,3552,3.74,3553,3.74,3554,3.74,3555,3.74,3556,3.74,3557,3.74,3558,3.74,3559,4.856,3560,4.856,3561,4.856,3562,4.856,3563,4.856,3564,4.856,3565,5.392,3566,3.74,3567,3.74,3568,3.74,3569,3.74,3570,3.74]],["title/classes/StrapiMediaService.html",[67,0.253,3571,3.537]],["body/classes/StrapiMediaService.html",[3,0.074,4,0.074,9,0.085,11,0.804,21,2.213,22,2.581,32,0.365,33,1.5,35,2.01,37,2.983,38,1.649,40,2.726,41,3.243,42,1.5,43,0.007,44,0.687,45,0.455,46,1.421,50,2.682,58,0.726,60,0.164,61,1.895,62,0.345,63,2.164,64,2.516,66,0.074,67,0.421,68,0.855,69,2.45,70,3.173,110,1.384,225,0.005,226,0.005,262,2.349,272,3.818,318,5.266,354,1.254,413,4.901,432,5.906,442,3.061,461,1.856,490,0.734,539,1.371,543,2.832,576,1.59,581,5.872,582,0.967,659,3.475,700,3.23,737,1.798,771,1.818,774,3.27,973,4.908,989,3.765,1188,1.584,1193,1.831,1215,2.17,1306,3.612,1311,3.413,1376,4.965,1393,6.305,1396,3.412,1446,3.765,1454,3.619,1478,5.714,1480,3.993,1482,5.643,1483,6.525,1484,5.643,1486,5.266,1496,3.147,1574,4.5,1576,4.753,1577,4.313,1586,4.932,1593,3.27,1601,3.859,1617,3.413,1624,3.765,1625,3.575,2117,4.661,2149,4.279,2338,7.312,2339,4.661,2341,6.147,2342,5.906,2351,4.279,2358,4.661,2359,4.661,3063,5.643,3508,4.901,3520,7.805,3521,6.877,3571,6.264,3572,6.877,3573,8.223,3574,5.242,3575,5.242,3576,6.913,3577,5.242,3578,6.913,3579,8.547,3580,5.242,3581,5.242,3582,5.242,3583,5.242]],["title/interfaces/StrapiRegister.html",[655,0.023,3543,2.897]],["body/interfaces/StrapiRegister.html",[3,0.076,4,0.076,9,0.06,14,3.831,23,0.844,32,0.377,43,0.007,45,0.547,48,2.981,50,1.875,58,0.762,60,0.156,62,0.355,66,0.125,67,0.294,68,0.92,110,1.489,225,0.005,226,0.005,271,1.001,277,1.221,279,1.711,280,3.009,307,0.681,330,1.942,354,1.399,442,2.772,490,0.877,576,1.918,655,0.042,657,0.876,663,1.529,674,1.015,1004,3.125,1084,3.14,1088,3.574,1117,0.925,1165,1.633,1167,1.976,1168,2.051,1169,1.976,1170,1.976,1184,1.034,1186,1.799,1190,1.872,1193,1.869,1322,3.574,1417,4.635,1432,2.595,1438,4.709,1693,3.811,1850,3.938,2151,2.747,2155,3.482,2164,3.018,2165,2.669,2167,3.018,2169,3.018,2170,2.669,2172,3.018,2175,2.921,2176,2.921,2199,3.125,2224,4.498,2408,3.242,2605,3.52,2684,3.242,3110,3.52,3505,3.373,3508,5.247,3517,3.242,3518,3.242,3540,4.401,3541,4.811,3543,4.898,3545,4.811,3546,4.811,3547,3.373,3548,3.687,3549,3.687,3550,3.687,3551,3.687,3552,3.687,3553,3.687,3554,3.687,3555,3.687,3556,3.687,3557,3.687,3558,3.687,3559,4.811,3560,4.811,3561,4.811,3562,4.811,3563,4.811,3564,4.811,3565,5.355,3566,3.687,3567,3.687,3568,3.687,3569,3.687,3570,3.687]],["title/interfaces/StrapiRegisterResponse.html",[655,0.023,3547,2.897]],["body/interfaces/StrapiRegisterResponse.html",[3,0.077,4,0.077,9,0.061,14,3.849,23,0.856,32,0.382,43,0.007,45,0.468,48,3.009,50,1.902,58,0.766,60,0.157,62,0.361,66,0.125,67,0.298,68,0.924,110,1.495,225,0.005,226,0.005,271,1.01,277,1.238,279,1.128,280,1.983,307,0.69,330,1.602,354,1.406,442,2.787,490,0.75,576,1.923,655,0.042,657,0.889,663,1.54,674,1.03,1004,3.17,1084,3.157,1088,3.599,1117,0.933,1165,1.656,1167,1.994,1168,2.07,1169,1.994,1170,1.994,1184,1.049,1186,1.811,1190,1.883,1193,1.886,1322,3.599,1417,4.653,1432,2.633,1438,5.33,1693,3.846,1850,3.975,2151,2.786,2155,3.514,2164,3.062,2165,2.707,2167,3.062,2169,3.062,2170,2.707,2172,3.062,2175,2.963,2176,2.963,2199,3.17,2224,4.017,2408,3.289,2605,3.57,2684,3.289,3110,3.57,3505,3.421,3508,5.258,3517,3.289,3518,4.741,3540,4.442,3541,4.856,3543,4.442,3545,4.856,3546,4.856,3547,4.442,3548,3.74,3549,3.74,3550,3.74,3551,3.74,3552,3.74,3553,3.74,3554,3.74,3555,3.74,3556,3.74,3557,3.74,3558,3.74,3559,4.856,3560,4.856,3561,4.856,3562,4.856,3563,4.856,3564,4.856,3565,5.392,3566,3.74,3567,3.74,3568,3.74,3569,3.74,3570,3.74]],["title/interfaces/StrapiSignIn.html",[655,0.023,3540,2.897]],["body/interfaces/StrapiSignIn.html",[3,0.077,4,0.077,9,0.061,14,3.849,23,0.856,32,0.382,43,0.007,45,0.468,48,3.009,50,1.902,58,0.766,60,0.157,62,0.361,66,0.125,67,0.298,68,0.924,110,1.495,225,0.005,226,0.005,271,1.01,277,1.223,279,1.128,280,1.983,307,0.69,330,1.602,354,1.406,442,2.787,490,0.822,576,1.923,655,0.042,657,0.889,663,1.54,674,1.03,1004,3.17,1084,3.157,1088,3.599,1117,0.933,1165,1.656,1167,1.994,1168,2.07,1169,1.994,1170,1.994,1184,1.049,1186,1.811,1190,1.883,1193,1.886,1322,3.599,1417,4.653,1432,4.017,1438,4.741,1693,3.846,1850,3.975,2151,2.786,2155,3.514,2164,3.062,2165,2.707,2167,3.062,2169,3.062,2170,2.707,2172,3.062,2175,2.963,2176,2.963,2199,3.17,2224,4.515,2408,3.289,2605,3.57,2684,3.289,3110,3.57,3505,3.421,3508,5.258,3517,3.289,3518,3.289,3540,4.932,3541,4.856,3543,4.442,3545,4.856,3546,4.856,3547,3.421,3548,3.74,3549,3.74,3550,3.74,3551,3.74,3552,3.74,3553,3.74,3554,3.74,3555,3.74,3556,3.74,3557,3.74,3558,3.74,3559,4.856,3560,4.856,3561,4.856,3562,4.856,3563,4.856,3564,4.856,3565,5.392,3566,3.74,3567,3.74,3568,3.74,3569,3.74,3570,3.74]],["title/interfaces/StrapiUser.html",[655,0.023,3518,2.785]],["body/interfaces/StrapiUser.html",[3,0.074,4,0.074,9,0.058,14,3.788,23,0.815,32,0.364,43,0.007,45,0.604,48,2.914,50,1.811,58,0.754,60,0.154,62,0.343,66,0.124,67,0.284,68,0.911,110,1.475,225,0.005,226,0.005,271,0.978,273,5.88,277,1.215,279,1.688,280,2.968,307,0.657,330,1.92,354,1.384,442,2.735,475,1.398,490,0.897,539,1.367,576,1.906,655,0.041,657,0.846,663,1.503,674,0.981,762,1.814,1004,3.018,1084,3.098,1088,3.514,1117,0.904,1125,2.331,1127,2.571,1165,1.577,1167,1.931,1168,2.005,1169,1.931,1170,1.931,1184,0.999,1186,1.768,1190,1.847,1193,1.827,1322,3.514,1417,4.591,1432,2.507,1438,4.63,1693,3.725,1850,3.85,2151,2.653,2155,3.403,2164,2.915,2165,2.577,2167,2.915,2169,2.915,2170,2.577,2172,2.915,2175,2.821,2176,2.821,2199,3.018,2224,3.922,2408,3.132,2605,3.399,2684,3.132,3110,3.399,3505,3.258,3508,5.218,3517,3.132,3518,4.135,3540,4.301,3541,4.703,3543,4.301,3545,4.703,3546,4.703,3547,3.258,3548,3.561,3549,3.561,3550,3.561,3551,3.561,3552,3.561,3553,3.561,3554,3.561,3555,3.561,3556,3.561,3557,3.561,3558,3.561,3559,4.703,3560,4.703,3561,4.703,3562,4.703,3563,4.703,3564,4.703,3565,5.265,3566,3.561,3567,3.561,3568,3.561,3569,3.561,3570,3.561,3584,7.719,3585,7.719]],["title/injectables/StrapiUserMapping.html",[1117,0.609,1185,1.486]],["body/injectables/StrapiUserMapping.html",[3,0.079,4,0.041,9,0.033,11,0.907,23,0.46,32,0.205,33,0.991,38,1.769,42,1.801,43,0.007,44,0.887,45,0.546,46,1.707,58,0.806,60,0.128,62,0.194,66,0.133,67,0.16,68,0.888,101,1.304,107,1.376,109,1.402,110,1.307,116,1.454,133,0.856,158,1.699,225,0.003,226,0.003,263,1.166,277,1.139,279,0.939,297,1.841,307,1.214,327,0.639,330,1.027,354,1.448,475,1.674,480,1.683,490,0.923,493,1.52,496,0.605,498,1.699,533,1.166,539,1.745,576,1.859,582,0.842,655,0.046,660,1.676,663,0.889,665,0.873,666,0.873,674,0.553,737,1.454,762,1.391,873,0.981,1112,2.056,1113,0.981,1114,2.36,1115,2.14,1116,2.555,1117,0.598,1118,1.327,1119,0.924,1120,2.082,1121,2.159,1122,0.809,1123,0.856,1124,1.977,1125,1.688,1126,1.52,1127,1.52,1128,1.001,1129,1.49,1130,2.136,1131,1.982,1132,2.303,1133,1.699,1134,1.49,1135,1.001,1136,0.961,1137,1.49,1138,1.49,1139,1.001,1140,2.056,1141,2.056,1142,1.49,1143,1.001,1144,0.961,1145,1.49,1146,1.001,1147,0.961,1148,1.001,1149,1.001,1150,1.232,1151,1.825,1152,1.49,1153,1.49,1154,1.461,1155,1.001,1156,0.961,1157,1.001,1158,1.49,1159,1.001,1160,0.961,1161,1.001,1162,0.961,1163,1.001,1164,0.961,1165,0.889,1166,2.056,1167,0.825,1168,0.856,1169,0.825,1170,0.825,1171,1.001,1172,0.961,1173,1.001,1174,1.001,1175,1.721,1176,1.9,1177,1.9,1178,1.9,1179,1.001,1180,1.9,1181,0.961,1182,1.825,1183,1.825,1184,0.563,1185,1.461,1186,1.78,1187,1.981,1188,1.442,1189,1.209,1190,1.622,1191,2.662,1192,1.327,1193,1.209,1194,1.433,1195,1.001,1196,0.873,1197,0.943,1198,0.943,1199,1.001,1200,1.001,1201,0.943,1202,0.943,1203,2.864,1204,3.006,1205,3.041,1206,1.461,1207,2.416,1208,1.481,1209,2.662,1210,1.551,1211,1.001,1212,1.461,1213,1.461,1214,1.001,1215,1.433,1216,1.902,1217,1.433,1218,1.001,1219,1.001,1220,1.001,1221,1.433,1222,1.981,1223,1.001,1224,1.939,1225,1.551,1226,1.433,1227,1.001,1228,1.001,1229,1.52,1230,1.433,1231,1.688,1232,1.433,1233,1.001,1234,1.001,1235,1.001,1236,1.001,1237,1.866,1238,1.433,1239,1.001,1240,1.001,1241,1.001,1242,1.001,1243,1.433,1244,1.001,1245,1.001,1246,1.001,1247,1.001,1248,1.551,1249,1.001,1250,1.001,1251,1.433,1252,1.379,1253,1.353,1254,1.001,1255,1.001,1256,1.001,1257,1.001,1258,1.001,1259,1.001,1260,1.001,1261,1.001,1262,1.001,1263,1.001,1264,1.001,1265,1.551,1266,1.551,1267,1.461,1268,1.551,1269,1.001,1270,1.551,1372,1.275,2390,3.726,2391,2.738,2392,2.738,2393,3.726,2394,3.726,2395,3.726,2396,3.726,2397,2.848,2398,2.848,2399,3.726,2400,2.848,2405,2.115,2411,2.115,2416,2.115,3586,2.945,3587,2.945,3588,2.945,3589,2.945,3590,2.945,3591,2.945,3592,2.945,3593,2.945,3594,2.945,3595,2.945,3596,2.945,3597,2.945]],["title/interfaces/StsTokenManager.html",[655,0.023,2182,3.167]],["body/interfaces/StsTokenManager.html",[3,0.115,4,0.072,9,0.057,11,0.532,21,2.446,22,1.606,23,1.062,32,0.357,43,0.007,44,0.508,45,0.503,48,2.163,50,1.775,58,0.675,60,0.143,66,0.115,67,0.278,68,0.939,110,0.861,225,0.005,226,0.005,271,0.965,277,1.218,279,1.052,280,2.459,307,1.097,327,1.11,330,1.53,354,1.239,442,2.824,483,3.675,490,0.907,539,1.516,576,1.928,582,1.255,655,0.044,657,0.829,663,1.782,762,1.503,1051,3.675,1084,3.073,1114,1.606,1125,1.545,1186,1.997,1296,3.456,1322,3.708,1394,4.4,1412,4.267,1417,4.264,1454,2.679,1492,4.547,1494,3.192,1530,2.456,1537,2.391,1561,3.49,1589,4.244,1670,3.331,1680,4.64,1683,3.798,1684,4.08,1751,2.857,2148,3.331,2150,3.069,2151,2.6,2152,4.528,2153,3.898,2154,3.49,2155,3.772,2156,5.822,2158,4.267,2160,3.49,2162,3.898,2163,5.822,2164,2.857,2165,2.526,2167,2.857,2169,2.857,2170,3.358,2172,2.857,2174,3.898,2175,2.764,2176,2.764,2177,5.182,2178,3.898,2179,3.898,2180,3.898,2181,4.64,2182,5.555,2183,3.898,2184,3.675,2185,3.898,2186,3.331,2187,3.898,2188,3.898,2189,3.898,2190,3.898,2191,5.182,2192,5.182,2193,6.204,2194,6.204,2195,6.204,2196,3.898,2197,3.898,2198,5.822,2199,4.418,2200,5.822,2201,5.182,2202,5.182,2203,5.182,2204,3.898,2205,3.331,2206,3.331,2207,3.331]],["title/interfaces/Thumbnail.html",[655,0.023,1183,1.516]],["body/interfaces/Thumbnail.html",[3,0.073,4,0.049,9,0.039,11,0.644,23,0.545,32,0.243,43,0.007,44,0.832,45,0.56,58,0.763,60,0.138,62,0.229,66,0.135,67,0.19,68,0.919,101,1.446,107,1.896,109,1.93,110,1.156,116,2.002,133,1.014,158,1.673,225,0.004,226,0.004,263,1.875,271,0.736,277,1.075,279,1.067,297,1.584,307,1.196,327,0.757,330,1.168,354,1.487,475,1.642,480,1.567,490,0.933,493,1.162,496,0.717,498,1.401,533,0.891,539,1.852,576,1.752,582,0.643,655,0.046,657,0.565,660,1.412,663,0.679,665,1.034,666,1.034,674,0.655,737,2.002,762,1.518,873,1.162,1112,2.243,1113,1.162,1114,2.503,1115,2.334,1116,2.709,1117,0.68,1118,1.51,1119,1.095,1120,1.841,1121,1.91,1122,0.959,1123,1.014,1124,1.63,1125,1.873,1126,1.729,1127,1.729,1128,1.185,1129,1.695,1130,2.176,1131,1.9,1132,2.176,1133,1.673,1134,1.139,1135,1.185,1136,1.139,1137,1.695,1138,1.695,1139,1.185,1140,1.695,1141,2.243,1142,1.139,1143,1.185,1144,1.139,1145,1.139,1146,1.185,1147,1.139,1148,1.185,1149,1.185,1150,1.401,1151,1.139,1152,1.695,1153,1.695,1154,1.117,1155,1.185,1156,1.139,1157,1.185,1158,1.139,1159,1.185,1160,1.139,1161,1.185,1162,1.139,1163,1.185,1164,1.139,1165,1.054,1166,1.695,1167,0.977,1168,1.014,1169,0.977,1170,0.977,1171,1.185,1172,1.139,1173,1.185,1174,1.185,1175,1.909,1176,2.616,1177,2.616,1178,2.616,1179,1.185,1180,2.616,1181,1.139,1182,2.025,1183,2.243,1184,0.667,1185,1.117,1186,1.573,1187,1.705,1188,1.189,1189,0.924,1190,1.395,1191,2.397,1192,1.014,1193,0.924,1194,1.095,1195,1.185,1196,1.034,1197,1.117,1198,1.117,1199,1.185,1200,1.185,1201,1.117,1202,1.117,1203,2.616,1204,2.858,1205,2.88,1206,1.117,1207,2.176,1208,0.924,1209,2.397,1210,1.185,1211,1.185,1212,1.662,1213,1.662,1214,1.185,1215,1.095,1216,1.568,1217,1.095,1218,1.185,1219,1.185,1220,1.185,1221,1.095,1222,1.705,1223,1.185,1224,1.598,1225,1.185,1226,1.095,1227,1.185,1228,1.185,1229,1.162,1230,1.095,1231,1.568,1232,1.095,1233,1.185,1234,1.185,1235,1.185,1236,1.185,1237,1.538,1238,1.095,1239,1.185,1240,1.185,1241,1.185,1242,1.185,1243,1.095,1244,1.185,1245,1.185,1246,1.185,1247,1.185,1248,1.185,1249,1.185,1250,1.185,1251,1.095,1252,1.054,1253,1.034,1254,1.185,1255,1.185,1256,1.185,1257,1.185,1258,1.185,1259,1.185,1260,1.185,1261,1.185,1262,1.185,1263,1.185,1264,1.185,1265,1.764,1266,1.764,1267,1.662,1268,1.764,1269,1.185,1270,1.764]],["title/injectables/TranslationService.html",[690,2.897,1117,0.609]],["body/injectables/TranslationService.html",[3,0.078,4,0.078,9,0.061,11,0.823,16,4.866,22,2.792,27,3.216,32,0.383,33,1.548,35,2.074,38,1.85,40,2.813,41,3.304,42,1.548,43,0.007,44,0.709,45,0.521,46,1.467,58,0.74,59,2.634,60,0.134,62,0.362,66,0.078,67,0.299,68,0.741,70,3.029,74,4.018,225,0.005,226,0.005,254,3.205,255,2.076,262,1.869,271,1.012,311,4.526,354,0.892,378,4.657,456,4.386,460,5.434,488,3.735,490,0.87,496,1.131,503,4.644,505,3.915,515,3.423,674,1.033,689,5.79,690,5.226,702,5.124,703,6.013,704,6.344,717,3.248,732,3.983,733,6.031,734,4.39,735,4.644,1117,0.935,1184,1.052,1372,2.382,1389,6.382,1400,3.735,1403,6.382,1406,4.866,1412,3.983,1429,5.434,1712,4.866,2088,4.891,2111,5.823,2307,4.866,3598,4.891,3599,7.134,3600,7.917,3601,7.917,3602,8.377,3603,8.377,3604,7.134,3605,7.134,3606,7.134,3607,5.501,3608,5.501,3609,7.134,3610,7.134,3611,5.501,3612,7.134,3613,5.501,3614,5.501,3615,5.501,3616,5.501,3617,5.501,3618,5.501,3619,5.501]],["title/interfaces/User.html",[277,0.596,655,0.023]],["body/interfaces/User.html",[3,0.099,4,0.099,9,0.077,32,0.488,43,0.007,45,0.612,60,0.131,66,0.117,225,0.006,226,0.006,271,1.175,277,1.064,279,1.814,280,3.19,281,4.355,297,1.787,330,1.985,442,2.939,490,0.921,655,0.04,657,1.134,659,3.729,663,1.776,664,5.026,1167,2.32,1169,2.32,1170,2.32,1559,5.712,1560,5.712,1561,4.773,1562,6.223,1563,6.223]],["title/injectables/UserBaseRepository.html",[1117,0.609,3620,3.79]],["body/injectables/UserBaseRepository.html",[3,0.059,4,0.059,9,0.046,11,0.432,13,2.829,23,0.649,32,0.29,33,1.279,35,1.714,38,1.961,40,2.325,41,2.325,42,1.996,43,0.007,44,0.914,45,0.605,46,1.891,58,0.806,60,0.164,61,1.502,62,0.273,66,0.059,67,0.226,68,0.712,225,0.004,226,0.004,277,1.012,279,1.409,280,2.477,281,3.382,307,0.991,327,0.902,442,3.042,461,2.087,475,1.426,476,5.593,480,1.565,490,0.945,539,1.622,543,2.245,582,1.684,660,1.73,674,0.78,700,2.755,737,1.533,762,1.514,771,1.441,973,4.545,990,2.834,992,3.165,1117,0.773,1118,1.992,1119,1.304,1120,1.87,1121,1.782,1122,1.142,1123,1.208,1131,1.618,1132,2.031,1184,0.795,1208,2.277,1306,4.071,1372,1.799,1394,4.934,1496,3.83,1535,3.202,1537,2.755,1576,3.408,1577,3.678,1582,2.984,1616,3.391,1617,2.705,1669,4.812,1670,3.838,1679,5.593,1683,5.099,1684,5.478,1751,3.292,2256,3.391,2391,3.536,2392,3.536,2397,3.678,2398,3.678,2400,3.678,2409,4.552,2413,3.536,2720,3.678,2721,2.984,2727,4.234,2728,4.234,2729,4.234,2730,4.234,2731,4.234,2732,4.234,2733,4.234,2734,4.234,2735,3.694,2739,5.242,2740,4.674,2742,5.242,2744,4.234,2746,4.234,2747,4.922,2750,4.234,2752,3.694,2754,5.242,2756,5.242,2759,5.242,2760,5.875,2762,5.242,2764,5.242,2766,5.242,3620,6.087,3621,3.694,3622,4.155,3623,5.895,3624,4.155,3625,4.155,3626,4.155,3627,4.155,3628,4.155,3629,4.155,3630,4.155,3631,4.155,3632,4.155,3633,4.155,3634,4.155,3635,4.155,3636,4.155,3637,4.155,3638,4.155,3639,4.155,3640,4.155,3641,4.155,3642,4.155,3643,4.155,3644,4.155,3645,4.155]],["title/injectables/UserFirebaseService.html",[1117,0.609,3646,3.537]],["body/injectables/UserFirebaseService.html",[3,0.09,4,0.052,9,0.06,11,0.936,13,2.905,20,1.981,21,1.725,22,2.209,23,0.997,32,0.256,33,1.169,35,1.567,37,2.463,38,1.959,40,2.124,41,2.124,42,1.939,43,0.007,44,0.887,45,0.592,46,1.866,50,2.719,58,0.801,60,0.156,61,2.309,62,0.241,63,2.224,64,1.761,66,0.052,67,0.199,68,0.731,101,1.489,133,1.066,183,2.698,225,0.004,226,0.004,263,0.937,271,0.764,277,1.226,279,1.447,280,2.545,281,2.659,297,1.631,307,1.186,317,2.501,327,0.796,329,2.821,330,0.825,431,4.104,434,4.221,438,5.055,442,2.912,461,1.299,463,4.701,474,2.048,475,1.632,477,1.92,479,2.994,480,1.649,490,0.909,496,0.754,498,0.99,504,2.288,505,3.289,515,2.124,522,2.12,533,2.002,539,1.555,543,1.981,576,0.754,581,2.288,582,1.383,655,0.026,659,2.277,660,1.447,674,0.689,685,7.129,700,2.518,725,3.231,737,1.95,762,1.19,769,2.994,774,2.288,903,2.794,973,4.05,991,2.634,1029,3.675,1117,0.706,1120,2.127,1121,0.954,1131,1.841,1132,1.596,1184,0.701,1188,0.84,1189,0.972,1190,1.212,1192,1.066,1207,2.086,1208,1.865,1222,1.935,1224,1.659,1230,1.151,1237,1.087,1251,2.005,1253,1.087,1296,3.576,1297,2.288,1306,4.057,1337,2.388,1372,1.588,1388,3.231,1396,4.481,1397,2.388,1398,4.497,1400,2.821,1443,5.103,1446,2.634,1451,2.048,1501,3.734,1538,2.586,1573,4.89,1575,4.104,1576,4.531,1593,5.701,1595,2.048,1601,2.048,1678,3.87,1687,4.104,1688,2.794,1712,2.501,2152,2.586,2186,2.388,2207,2.388,2391,3.231,2392,3.231,2397,3.984,2398,3.361,2400,3.361,2409,3.691,2413,3.231,2682,5.361,2720,3.984,2721,2.634,2725,2.794,2727,3.87,2728,3.87,2729,3.87,2730,3.87,2731,3.87,2732,3.87,2733,3.87,2734,3.87,2737,4.355,2738,5.971,2740,2.501,2744,2.634,2746,2.634,2747,3.87,2750,2.634,2758,2.794,2760,3.87,2782,5.213,2783,5.213,2784,2.994,2786,2.794,2789,2.994,2791,2.794,2796,2.994,2801,2.994,2803,2.994,2806,2.994,2808,2.994,2810,2.994,2811,2.994,3646,5.361,3647,4.791,3648,2.994,3649,4.791,3650,3.261,3651,3.261,3652,3.261,3653,3.261,3654,3.261,3655,3.261,3656,3.261,3657,3.261,3658,3.261,3659,3.261,3660,3.261,3661,3.261,3662,3.261,3663,3.261,3664,3.261,3665,3.261,3666,3.261,3667,3.261,3668,3.261,3669,3.261,3670,3.261,3671,3.261,3672,3.261,3673,4.104,3674,3.667,3675,3.261,3676,3.261,3677,3.261,3678,3.667,3679,3.261]],["title/injectables/UserStrapiService.html",[1117,0.609,3680,3.537]],["body/injectables/UserStrapiService.html",[3,0.09,4,0.052,9,0.059,11,0.936,13,2.904,20,1.98,21,1.724,22,2.209,23,0.997,32,0.255,33,1.169,35,1.566,37,2.462,38,1.959,40,2.123,41,2.123,42,1.938,43,0.007,44,0.887,45,0.592,46,1.866,49,3.673,50,2.882,58,0.801,60,0.156,61,2.308,62,0.241,63,2.223,64,1.759,66,0.09,67,0.199,68,0.731,101,1.489,133,1.066,183,2.698,225,0.004,226,0.004,263,0.936,271,0.764,277,1.22,279,1.447,280,2.544,281,2.658,297,1.63,307,1.178,317,2.5,327,0.795,329,2.819,330,0.825,434,4.22,438,5.053,442,2.824,461,1.298,463,3.23,474,2.046,475,1.631,477,1.919,479,2.992,480,1.649,490,0.909,496,0.754,498,0.989,504,2.286,505,3.288,515,2.123,522,2.119,533,2.001,539,1.554,543,1.98,576,0.754,581,2.286,582,1.382,655,0.026,659,2.276,660,1.447,674,0.688,685,7.129,700,2.516,737,1.95,762,1.19,769,2.992,774,2.286,903,2.792,973,4.234,991,2.632,1117,0.706,1120,2.127,1121,0.953,1131,1.84,1132,1.596,1184,0.701,1188,0.84,1189,0.971,1190,1.212,1192,1.066,1207,2.085,1208,1.864,1222,1.934,1224,1.658,1230,1.151,1237,1.086,1251,2.004,1253,1.086,1276,3.359,1296,3.575,1297,2.286,1306,4.057,1337,2.386,1372,1.587,1388,3.23,1396,4.48,1397,2.386,1398,4.495,1400,2.819,1443,5.102,1446,2.632,1451,2.046,1454,2.819,1501,3.733,1538,2.585,1573,4.889,1576,4.682,1577,3.359,1593,5.7,1595,2.046,1601,2.046,1678,3.868,1687,4.102,1688,2.792,1712,2.5,2186,2.386,2207,2.386,2391,3.23,2392,3.23,2397,3.982,2398,3.359,2400,3.359,2409,3.69,2413,3.23,2687,5.36,2720,3.982,2721,2.632,2725,2.792,2727,3.868,2728,3.868,2729,3.868,2730,3.868,2731,3.868,2732,3.868,2733,3.868,2734,3.868,2737,4.354,2738,5.97,2740,2.5,2744,2.632,2746,2.632,2747,3.868,2750,2.632,2758,2.792,2760,3.868,2782,5.211,2783,5.211,2784,2.992,2786,2.792,2789,2.992,2791,2.792,2796,2.992,2801,2.992,2803,2.992,2806,2.992,2808,2.992,2810,2.992,2811,2.992,3508,3.007,3648,2.992,3649,4.788,3650,3.259,3651,3.259,3652,3.259,3653,3.259,3654,3.259,3655,3.259,3656,3.259,3657,3.259,3658,3.259,3659,3.259,3660,3.259,3661,3.259,3662,3.259,3663,3.259,3664,3.259,3665,3.259,3666,3.259,3667,3.259,3668,3.259,3669,3.259,3670,3.259,3671,3.259,3672,3.259,3673,4.102,3675,3.259,3676,3.259,3677,3.259,3679,3.259,3680,5.36,3681,4.788,3682,5.385,3683,5.385,3684,5.385,3685,3.665]],["title/interfaces/addcrypto.html",[655,0.023,1154,1.486]],["body/interfaces/addcrypto.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.207,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.212,1131,1.915,1132,2.212,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.711,1155,1.233,1156,2.072,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.184,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/addlistresponse.html",[655,0.023,1140,1.516]],["body/interfaces/addlistresponse.html",[3,0.075,4,0.051,9,0.04,11,0.658,23,0.564,32,0.252,43,0.007,44,0.774,45,0.35,58,0.769,60,0.14,62,0.237,66,0.135,67,0.196,68,0.926,101,1.476,107,1.558,109,1.587,110,1.175,116,1.646,133,1.05,158,1.708,225,0.004,226,0.004,263,1.36,271,0.755,277,1.085,279,1.095,297,1.616,307,1.211,327,0.784,330,1.198,354,1.494,475,1.651,480,1.583,490,0.929,493,1.203,496,0.742,498,1.437,533,0.922,539,1.808,576,1.766,582,0.666,655,0.046,657,0.585,660,1.436,663,0.703,665,1.07,666,1.07,674,0.678,737,1.646,762,1.543,873,1.203,1112,2.281,1113,1.203,1114,2.531,1115,2.374,1116,2.74,1117,0.698,1118,1.549,1119,1.133,1120,1.868,1121,1.938,1122,0.993,1123,1.05,1124,1.672,1125,1.911,1126,1.774,1127,1.774,1128,1.227,1129,1.739,1130,2.207,1131,1.913,1132,2.207,1133,1.708,1134,1.179,1135,1.227,1136,1.179,1137,1.739,1138,1.739,1139,1.227,1140,2.066,1141,2.758,1142,1.179,1143,1.227,1144,1.179,1145,1.179,1146,1.227,1147,1.179,1148,1.227,1149,1.227,1150,1.437,1151,1.179,1152,1.739,1153,1.739,1154,1.156,1155,1.227,1156,1.179,1157,1.227,1158,1.179,1159,1.227,1160,1.179,1161,1.227,1162,1.179,1163,1.227,1164,1.179,1165,1.091,1166,1.739,1167,1.011,1168,1.05,1169,1.011,1170,1.011,1171,1.227,1172,1.179,1173,1.227,1174,1.227,1175,1.948,1176,2.15,1177,2.15,1178,2.15,1179,1.227,1180,2.15,1181,1.179,1182,2.066,1183,2.066,1184,0.691,1185,1.156,1186,1.6,1187,1.74,1188,1.22,1189,0.957,1190,1.424,1191,2.432,1192,1.05,1193,0.957,1194,1.133,1195,1.227,1196,1.07,1197,1.156,1198,1.156,1199,1.227,1200,1.227,1201,1.156,1202,1.156,1203,2.649,1204,2.878,1205,2.902,1206,1.156,1207,2.207,1208,0.957,1209,2.432,1210,1.227,1211,1.227,1212,1.705,1213,1.705,1214,1.227,1215,1.133,1216,1.609,1217,1.133,1218,1.227,1219,1.227,1220,1.227,1221,1.133,1222,1.74,1223,1.227,1224,1.64,1225,1.227,1226,1.133,1227,1.227,1228,1.227,1229,1.203,1230,1.133,1231,1.609,1232,1.133,1233,1.227,1234,1.227,1235,1.227,1236,1.227,1237,1.578,1238,1.133,1239,1.227,1240,1.227,1241,1.227,1242,1.227,1243,1.133,1244,1.227,1245,1.227,1246,1.227,1247,1.227,1248,1.227,1249,1.227,1250,1.227,1251,1.133,1252,1.091,1253,1.07,1254,1.227,1255,1.227,1256,1.227,1257,1.227,1258,1.227,1259,1.227,1260,1.227,1261,1.227,1262,1.227,1263,1.227,1264,1.227,1265,1.81,1266,1.81,1267,1.705,1268,1.81,1269,1.227,1270,1.81]],["title/interfaces/basicuseresponse.html",[655,0.023,1172,1.516]],["body/interfaces/basicuseresponse.html",[3,0.073,4,0.049,9,0.039,11,0.645,23,0.546,32,0.244,43,0.007,44,0.765,45,0.551,58,0.764,60,0.138,62,0.23,66,0.135,67,0.19,68,0.92,101,1.912,107,1.529,109,1.557,110,1.157,116,1.615,133,1.016,158,1.675,225,0.004,226,0.004,263,1.328,271,0.737,277,1.076,279,1.511,297,1.585,307,1.196,327,0.758,330,1.653,354,1.487,475,1.67,480,1.568,490,0.933,493,1.164,496,0.719,498,1.403,533,0.893,539,1.82,576,1.753,582,0.645,655,0.046,657,0.567,660,1.414,663,0.681,665,1.036,666,1.036,674,0.656,737,1.615,762,1.811,873,1.164,1112,2.245,1113,1.164,1114,2.676,1115,2.336,1116,2.897,1117,0.681,1118,1.512,1119,1.097,1120,1.843,1121,1.912,1122,0.961,1123,1.016,1124,1.632,1125,2.327,1126,2.448,1127,2.448,1128,1.188,1129,1.697,1130,2.178,1131,1.901,1132,2.178,1133,1.675,1134,1.141,1135,1.188,1136,1.141,1137,1.697,1138,1.697,1139,1.188,1140,1.697,1141,2.245,1142,1.141,1143,1.188,1144,1.141,1145,1.141,1146,1.188,1147,1.141,1148,1.188,1149,1.188,1150,1.403,1151,1.141,1152,1.697,1153,1.697,1154,1.119,1155,1.188,1156,1.141,1157,1.188,1158,1.141,1159,1.188,1160,1.141,1161,1.188,1162,1.141,1163,1.188,1164,1.141,1165,1.056,1166,1.697,1167,0.979,1168,1.016,1169,0.979,1170,0.979,1171,1.188,1172,1.697,1173,1.188,1174,1.188,1175,1.911,1176,2.11,1177,2.11,1178,2.11,1179,1.188,1180,2.11,1181,1.141,1182,2.027,1183,2.027,1184,0.668,1185,1.119,1186,1.575,1187,1.707,1188,1.191,1189,0.926,1190,1.397,1191,2.399,1192,1.016,1193,0.926,1194,1.097,1195,1.188,1196,1.036,1197,1.119,1198,1.119,1199,1.188,1200,1.188,1201,1.119,1202,1.119,1203,2.618,1204,2.859,1205,2.881,1206,1.119,1207,2.178,1208,0.926,1209,2.399,1210,1.188,1211,1.188,1212,1.664,1213,1.664,1214,1.188,1215,1.097,1216,1.57,1217,1.097,1218,1.188,1219,1.188,1220,1.188,1221,1.097,1222,1.707,1223,1.188,1224,1.601,1225,1.188,1226,1.097,1227,1.188,1228,1.188,1229,1.164,1230,1.097,1231,1.57,1232,1.097,1233,1.188,1234,1.188,1235,1.188,1236,1.188,1237,1.541,1238,1.097,1239,1.188,1240,1.188,1241,1.188,1242,1.188,1243,1.097,1244,1.188,1245,1.188,1246,1.188,1247,1.188,1248,1.188,1249,1.188,1250,1.188,1251,1.097,1252,1.056,1253,1.036,1254,1.188,1255,1.188,1256,1.188,1257,1.188,1258,1.188,1259,1.188,1260,1.188,1261,1.188,1262,1.188,1263,1.188,1264,1.188,1265,1.767,1266,1.767,1267,1.664,1268,1.767,1269,1.188,1270,1.767]],["title/interfaces/bodyupdate.html",[655,0.023,1144,1.516]],["body/interfaces/bodyupdate.html",[3,0.075,4,0.051,9,0.04,11,0.81,23,0.564,32,0.252,43,0.007,44,0.774,45,0.35,58,0.769,60,0.14,62,0.237,66,0.135,67,0.196,68,0.926,101,1.476,107,1.558,109,1.587,110,1.175,116,1.646,133,1.05,158,2.103,225,0.004,226,0.004,263,1.36,271,0.755,277,1.085,279,1.095,297,1.616,307,1.2,327,0.784,330,1.198,354,1.494,475,1.651,480,1.583,490,0.931,493,1.203,496,0.742,498,1.437,533,0.922,539,1.808,576,1.766,582,0.666,655,0.046,657,0.585,660,1.436,663,0.703,665,1.07,666,1.07,674,0.678,737,1.646,762,1.543,873,1.203,1112,2.281,1113,1.203,1114,2.531,1115,2.374,1116,2.74,1117,0.698,1118,1.549,1119,1.133,1120,1.868,1121,1.938,1122,0.993,1123,1.05,1124,1.672,1125,1.911,1126,1.774,1127,1.774,1128,1.227,1129,1.739,1130,2.207,1131,1.913,1132,2.207,1133,1.708,1134,1.179,1135,1.227,1136,1.179,1137,1.739,1138,1.739,1139,1.227,1140,1.739,1141,2.281,1142,1.179,1143,1.227,1144,1.739,1145,1.179,1146,1.227,1147,1.179,1148,1.227,1149,1.227,1150,1.437,1151,1.179,1152,1.739,1153,1.739,1154,1.156,1155,1.227,1156,1.179,1157,1.227,1158,1.179,1159,1.227,1160,1.179,1161,1.227,1162,1.179,1163,1.227,1164,1.179,1165,1.091,1166,1.739,1167,1.011,1168,1.05,1169,1.011,1170,1.011,1171,1.227,1172,1.179,1173,1.227,1174,1.227,1175,1.948,1176,2.15,1177,2.15,1178,2.15,1179,1.227,1180,2.15,1181,1.179,1182,2.066,1183,2.066,1184,0.691,1185,1.156,1186,1.6,1187,1.74,1188,1.22,1189,0.957,1190,1.424,1191,2.432,1192,1.05,1193,0.957,1194,1.133,1195,1.227,1196,1.07,1197,1.156,1198,1.156,1199,1.227,1200,1.227,1201,1.156,1202,1.156,1203,2.649,1204,2.878,1205,2.902,1206,1.156,1207,2.207,1208,0.957,1209,2.432,1210,1.227,1211,1.227,1212,1.705,1213,1.705,1214,1.227,1215,1.133,1216,1.609,1217,1.133,1218,1.227,1219,1.227,1220,1.227,1221,1.133,1222,1.74,1223,1.227,1224,1.64,1225,1.227,1226,1.133,1227,1.227,1228,1.227,1229,1.203,1230,1.133,1231,1.609,1232,1.133,1233,1.227,1234,1.227,1235,1.227,1236,1.227,1237,1.578,1238,1.133,1239,1.227,1240,1.227,1241,1.227,1242,1.227,1243,1.133,1244,1.227,1245,1.227,1246,1.227,1247,1.227,1248,1.227,1249,1.227,1250,1.227,1251,1.133,1252,1.091,1253,1.07,1254,1.227,1255,1.227,1256,1.227,1257,1.227,1258,1.227,1259,1.227,1260,1.227,1261,1.227,1262,1.227,1263,1.227,1264,1.227,1265,1.81,1266,1.81,1267,1.705,1268,1.81,1269,1.227,1270,1.81]],["title/coverage.html",[3686,5.665]],["body/coverage.html",[0,2.122,1,1.254,9,0.035,10,2.829,37,1.227,43,0.007,45,0.209,50,2.887,63,1.313,67,0.263,101,0.742,127,4.499,128,5.312,178,1.91,182,1.283,185,1.254,187,1.283,189,1.283,191,1.283,193,1.254,195,1.283,198,1.283,199,1.227,201,1.254,203,1.283,205,1.283,207,1.254,209,1.254,211,1.254,213,1.254,215,1.254,217,1.283,220,1.254,222,1.227,225,0.003,226,0.003,265,2.597,266,2.423,267,2.829,277,0.842,297,0.812,307,0.4,375,1.776,425,2.423,426,2.285,427,2.829,455,1.719,458,1.839,461,1.715,547,1.776,548,1.985,582,0.587,629,2.829,655,0.048,656,1.665,658,4.468,660,0.654,663,0.62,670,1.719,673,2.829,685,2.423,690,1.985,965,2.597,978,2.285,979,2.285,980,2.423,981,2.285,982,2.285,983,2.285,984,2.17,985,2.423,986,2.285,987,2.285,988,2.285,989,2.285,990,2.17,991,2.285,992,2.423,993,2.285,996,2.597,997,2.597,998,2.597,999,2.597,1000,2.597,1001,2.597,1002,2.597,1004,1.839,1008,2.423,1010,2.071,1014,3.954,1016,2.285,1020,4.788,1031,2.597,1070,2.423,1072,2.423,1074,2.423,1112,1.039,1113,3.156,1117,1.209,1118,0.925,1120,0.798,1121,0.827,1124,0.999,1129,1.039,1130,0.943,1131,0.69,1132,0.943,1134,1.039,1136,1.039,1140,1.039,1141,1.039,1142,1.039,1144,1.039,1145,1.039,1147,1.039,1151,1.039,1152,1.039,1153,1.039,1154,1.018,1156,1.039,1158,1.039,1160,1.039,1162,1.039,1164,1.039,1166,1.039,1172,1.039,1175,0.979,1182,1.039,1183,1.039,1185,1.018,1271,3.818,1273,2.829,1319,2.829,1333,2.829,1349,2.829,1371,2.285,1373,2.829,1374,3.954,1432,1.527,1478,2.071,1479,2.597,1480,4.468,1490,2.17,1491,4.71,1498,1.839,1504,2.17,1531,2.17,1556,3.954,1559,3.954,1571,2.423,1572,2.829,1579,2.423,1613,2.829,1636,2.829,1642,8.444,1664,2.829,1675,2.17,1685,2.423,1686,2.829,1698,1.985,1700,2.423,1707,2.423,1708,2.829,1709,4.468,1710,2.829,1713,2.423,1724,2.829,1742,1.839,1766,2.829,1808,2.829,1829,3.153,1873,2.285,1932,2.597,1939,4.307,1942,2.829,1949,2.829,1967,2.829,2041,2.17,2051,2.829,2058,2.829,2059,2.597,2060,2.829,2148,2.071,2150,4.232,2151,4.412,2155,1.57,2158,1.776,2165,1.57,2170,1.57,2181,2.17,2182,2.17,2208,2.423,2209,2.829,2211,2.423,2217,2.17,2306,2.829,2336,2.423,2337,2.829,2384,2.17,2385,4.995,2414,2.285,2420,2.285,2430,2.829,2526,2.829,2593,2.829,2594,2.829,2611,2.829,2643,2.829,2645,2.829,2658,2.829,2673,2.829,2674,3.954,2675,2.829,2682,2.423,2683,2.829,2685,2.423,2686,2.829,2687,2.423,2688,2.829,2689,2.829,2718,2.597,2719,2.829,2720,1.985,2722,2.597,2723,2.829,2725,2.423,2726,2.829,2825,2.829,2932,2.829,2984,2.829,3012,2.829,3059,2.829,3105,3.954,3106,2.829,3107,2.829,3118,2.829,3224,2.829,3255,3.954,3274,2.597,3316,2.597,3443,2.829,3460,2.829,3505,4.822,3517,1.908,3518,1.908,3540,1.985,3543,1.985,3547,1.985,3571,2.423,3572,2.829,3598,2.829,3620,2.597,3621,2.829,3646,2.423,3647,2.829,3648,4.788,3673,2.423,3680,2.423,3681,2.829,3686,2.829,3687,3.181,3688,3.181,3689,2.829,3690,9.549,3691,3.181,3692,3.181,3693,7.433,3694,6.557,3695,7.056,3696,7.056,3697,8.462,3698,5.865,3699,8.58,3700,8.462,3701,6.661,3702,2.829,3703,2.829,3704,7.056,3705,6.557,3706,5.865,3707,3.181,3708,5.216,3709,3.181,3710,3.181,3711,2.829,3712,3.181,3713,3.181,3714,2.597,3715,3.181,3716,3.181,3717,3.181,3718,3.181,3719,4.843,3720,5.865,3721,4.843,3722,3.181,3723,4.843,3724,3.181,3725,3.181,3726,3.181,3727,3.181,3728,8.17,3729,2.829,3730,2.829,3731,7.056,3732,4.843,3733,3.181,3734,3.181,3735,3.181,3736,3.181,3737,5.865,3738,5.865,3739,4.843,3740,3.181,3741,3.181,3742,5.865,3743,3.181,3744,3.181,3745,3.181,3746,3.181,3747,3.181,3748,3.181,3749,3.181,3750,3.181,3751,4.843,3752,3.181,3753,3.181,3754,3.181,3755,3.181,3756,4.843,3757,4.843,3758,3.181,3759,3.181,3760,3.181,3761,3.181,3762,3.181,3763,3.181,3764,3.181,3765,3.181,3766,3.181,3767,3.181,3768,3.181,3769,3.181,3770,3.181,3771,3.181,3772,3.181,3773,3.181,3774,2.829,3775,2.829,3776,3.181]],["title/interfaces/createListRemote.html",[655,0.023,1134,1.516]],["body/interfaces/createListRemote.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.207,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.212,1131,1.915,1132,2.212,1133,1.712,1134,1.745,1135,1.233,1136,2.072,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.184,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/cryptoid.html",[655,0.023,1132,1.376]],["body/interfaces/cryptoid.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.2,327,0.787,330,1.202,354,1.495,475,1.679,480,1.585,490,0.93,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.212,1131,1.915,1132,2.314,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.184,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/cryptos.html",[655,0.023,1130,1.376]],["body/interfaces/cryptos.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.2,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.314,1131,1.915,1132,2.392,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.184,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,2.379,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/cryptosxd.html",[655,0.023,2420,3.335]],["body/interfaces/cryptosxd.html",[3,0.074,4,0.074,9,0.058,11,0.544,14,2.322,21,1.675,22,1.642,23,1.078,32,0.365,43,0.007,44,0.849,45,0.508,46,1.756,50,1.815,58,0.682,60,0.16,62,0.344,66,0.109,67,0.285,68,0.93,101,1.61,110,0.88,158,1.412,183,1.742,225,0.005,226,0.005,271,0.979,277,1.201,279,1.076,280,2.496,281,2.582,297,1.973,307,1.177,327,1.135,354,1.385,475,1.399,480,1.478,490,0.892,576,1.689,582,1.694,655,0.038,657,0.848,663,1.505,674,0.983,692,3.758,725,3.138,737,1.361,1005,3.758,1084,1.974,1117,0.905,1118,2.247,1119,1.642,1120,1.938,1121,2.137,1122,1.438,1133,2.217,1150,1.863,1184,1.001,1186,1.581,1187,2.348,1188,1.77,1189,1.386,1190,1.177,1192,1.521,1193,1.386,1194,1.642,1196,1.55,1197,1.675,1198,1.675,1201,1.675,1202,1.675,1208,1.386,1212,1.675,1213,1.675,1216,2.085,1217,1.642,1226,1.642,1232,1.642,1238,1.642,1243,1.642,1253,1.55,1267,1.675,1309,3.138,1337,3.406,1340,3.758,1394,4.905,1530,2.511,1535,2.445,1537,3.226,1683,5.07,1684,5.446,1850,2.921,2150,3.138,2151,2.658,2152,3.709,2158,3.855,2205,3.406,2206,3.406,2307,3.568,2384,3.568,2385,3.985,2386,4.271,2387,4.271,2388,4.271,2389,4.271,2403,3.985,2405,3.758,2408,4.141,2409,3.024,2411,3.758,2414,4.959,2416,3.758,2419,4.271,2420,4.959,2421,4.271,2422,4.271,2423,4.271,2424,4.271,2425,4.271,2426,4.271,2427,4.271,2428,4.271,2429,4.271]],["title/interfaces/cryptoxd.html",[655,0.023,1156,1.516]],["body/interfaces/cryptoxd.html",[3,0.075,4,0.051,9,0.04,11,0.656,23,0.561,32,0.25,43,0.007,44,0.838,45,0.415,58,0.768,60,0.139,62,0.236,66,0.135,67,0.195,68,0.925,101,1.472,107,1.554,109,1.583,110,1.173,116,1.641,133,1.045,158,1.703,225,0.004,226,0.004,263,1.355,271,0.753,277,1.084,279,1.091,297,1.612,307,1.199,327,0.78,330,1.194,354,1.493,475,1.65,480,1.58,490,0.932,493,1.197,496,0.739,498,1.432,533,0.918,539,1.806,576,1.764,582,0.663,655,0.046,657,0.583,660,1.433,663,0.7,665,1.065,666,1.065,674,0.675,737,1.641,762,1.54,873,1.197,1112,2.275,1113,1.197,1114,2.527,1115,2.368,1116,2.735,1117,0.696,1118,1.543,1119,1.128,1120,1.864,1121,1.934,1122,0.988,1123,1.045,1124,1.666,1125,1.906,1126,1.768,1127,1.768,1128,1.221,1129,1.733,1130,2.203,1131,1.912,1132,2.448,1133,2.1,1134,1.173,1135,1.221,1136,1.173,1137,1.733,1138,1.733,1139,1.221,1140,1.733,1141,2.275,1142,1.173,1143,1.221,1144,1.173,1145,1.173,1146,1.221,1147,1.173,1148,1.221,1149,1.221,1150,1.432,1151,1.173,1152,1.733,1153,1.733,1154,1.15,1155,1.221,1156,1.733,1157,1.221,1158,1.173,1159,1.221,1160,1.173,1161,1.221,1162,1.173,1163,1.221,1164,1.173,1165,1.085,1166,1.733,1167,1.006,1168,1.045,1169,1.006,1170,1.006,1171,1.221,1172,1.173,1173,1.221,1174,1.221,1175,1.943,1176,2.145,1177,2.145,1178,2.145,1179,1.221,1180,2.145,1181,1.173,1182,2.06,1183,2.06,1184,0.687,1185,1.15,1186,1.596,1187,1.735,1188,1.216,1189,0.952,1190,1.42,1191,2.427,1192,1.045,1193,0.952,1194,1.128,1195,1.221,1196,1.065,1197,1.15,1198,1.15,1199,1.221,1200,1.221,1201,1.15,1202,1.15,1203,2.644,1204,2.876,1205,2.899,1206,1.15,1207,2.203,1208,0.952,1209,2.427,1210,1.221,1211,1.221,1212,1.699,1213,1.699,1214,1.221,1215,1.128,1216,1.603,1217,1.128,1218,1.221,1219,1.221,1220,1.221,1221,1.128,1222,1.735,1223,1.221,1224,1.634,1225,1.221,1226,1.128,1227,1.221,1228,1.221,1229,1.197,1230,1.128,1231,1.603,1232,1.128,1233,1.221,1234,1.221,1235,1.221,1236,1.221,1237,1.573,1238,1.128,1239,1.221,1240,1.221,1241,1.221,1242,1.221,1243,1.128,1244,1.221,1245,1.221,1246,1.221,1247,1.221,1248,1.221,1249,1.221,1250,1.221,1251,1.128,1252,1.085,1253,1.065,1254,1.221,1255,1.221,1256,1.221,1257,1.221,1258,1.221,1259,1.221,1260,1.221,1261,1.221,1262,1.221,1263,1.221,1264,1.221,1265,1.804,1266,1.804,1267,1.699,1268,1.804,1269,1.221,1270,1.804]],["title/interfaces/datadelete.html",[655,0.023,1147,1.516]],["body/interfaces/datadelete.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.2,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.549,1131,1.915,1132,2.212,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.745,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.184,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/deletecryptofromfavoritelist.html",[655,0.023,1145,1.516]],["body/interfaces/deletecryptofromfavoritelist.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.207,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.212,1131,1.915,1132,2.212,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.745,1146,1.233,1147,2.072,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.184,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/dependencies.html",[230,2.546,3777,3.433]],["body/dependencies.html",[9,0.073,43,0.007,62,0.433,127,2.997,225,0.006,226,0.006,230,2.997,246,3.557,248,2.997,250,2.539,254,3.174,255,2.484,261,2.484,546,5.855,771,2.284,772,5.855,967,6.519,968,6.084,976,5.855,977,5.855,1007,6.084,1036,5.375,1839,5.375,2152,3.161,3261,5.855,3306,5.375,3322,5.855,3323,5.855,3400,5.855,3408,5.855,3778,6.584,3779,9.503,3780,6.584,3781,6.584,3782,6.584,3783,6.584,3784,6.584,3785,6.584,3786,6.584,3787,7.986,3788,6.584,3789,8.596,3790,6.584,3791,6.584,3792,6.584,3793,6.584,3794,6.584,3795,6.584,3796,6.584,3797,6.584,3798,6.584,3799,5.855,3800,6.584,3801,6.584,3802,6.584,3803,6.584,3804,6.584,3805,7.986,3806,6.584,3807,6.584,3808,6.584,3809,6.584,3810,6.584,3811,5.855,3812,6.584,3813,6.584,3814,6.584,3815,6.584,3816,6.584,3817,6.584,3818,6.584,3819,6.584,3820,6.584,3821,6.584]],["title/miscellaneous/functions.html",[469,3.815,3822,2.941]],["body/miscellaneous/functions.html",[11,0.834,21,2.123,22,2.707,32,0.462,40,3.163,41,3.163,42,1.872,43,0.007,44,0.857,45,0.567,46,1.773,48,3.391,58,0.586,225,0.006,226,0.006,230,3.02,277,1.031,288,5.415,307,0.835,383,4.076,442,2.872,461,2.84,469,4.524,490,0.884,582,1.223,700,3.1,737,2.087,965,5.415,973,5.177,1021,5.899,1031,6.548,1118,2.333,1320,5.899,1496,4.244,1498,4.637,1501,3.473,1535,4.357,1537,3.1,1571,5.053,1576,4.985,1577,5.005,1589,4.138,2342,4.765,2691,5.415,3701,5.415,3702,7.133,3703,7.133,3714,5.415,3822,5.053,3823,7.133,3824,6.633,3825,6.633,3826,8.96,3827,7.133,3828,5.899,3829,6.633,3830,6.633,3831,6.633]],["title/interfaces/getallresponse.html",[655,0.023,1151,1.516]],["body/interfaces/getallresponse.html",[3,0.075,4,0.051,9,0.04,11,0.658,23,0.564,32,0.252,43,0.007,44,0.775,45,0.351,58,0.769,60,0.14,62,0.238,66,0.135,67,0.197,68,0.926,101,1.477,107,1.56,109,1.588,110,1.176,116,1.647,133,1.051,158,1.709,225,0.004,226,0.004,263,1.362,271,0.756,277,1.085,279,1.096,297,1.617,307,1.207,327,0.785,330,1.199,354,1.495,475,1.651,480,1.583,490,0.929,493,1.204,496,0.743,498,1.439,533,0.923,539,1.808,576,1.767,582,0.667,655,0.046,657,0.586,660,1.437,663,0.704,665,1.071,666,1.071,674,0.679,737,1.647,762,1.545,873,1.204,1112,2.282,1113,1.204,1114,2.532,1115,2.375,1116,2.741,1117,0.699,1118,1.55,1119,1.135,1120,1.869,1121,1.939,1122,0.994,1123,1.051,1124,1.674,1125,1.913,1126,1.776,1127,1.776,1128,1.229,1129,1.741,1130,2.209,1131,1.914,1132,2.209,1133,1.709,1134,1.18,1135,1.229,1136,1.18,1137,1.741,1138,1.741,1139,1.229,1140,1.741,1141,2.633,1142,1.18,1143,1.229,1144,1.18,1145,1.18,1146,1.229,1147,1.18,1148,1.229,1149,1.229,1150,1.439,1151,1.741,1152,2.282,1153,1.741,1154,1.157,1155,1.229,1156,1.18,1157,1.229,1158,1.18,1159,1.229,1160,1.18,1161,1.229,1162,1.18,1163,1.229,1164,1.18,1165,1.092,1166,1.741,1167,1.013,1168,1.051,1169,1.013,1170,1.013,1171,1.229,1172,1.18,1173,1.229,1174,1.229,1175,1.95,1176,2.152,1177,2.152,1178,2.152,1179,1.229,1180,2.152,1181,1.18,1182,2.068,1183,2.068,1184,0.692,1185,1.157,1186,1.601,1187,1.741,1188,1.221,1189,0.958,1190,1.425,1191,2.433,1192,1.051,1193,0.958,1194,1.135,1195,1.229,1196,1.071,1197,1.157,1198,1.157,1199,1.229,1200,1.229,1201,1.157,1202,1.157,1203,2.65,1204,2.879,1205,2.903,1206,1.157,1207,2.209,1208,0.958,1209,2.433,1210,1.229,1211,1.229,1212,1.707,1213,1.707,1214,1.229,1215,1.135,1216,1.61,1217,1.135,1218,1.229,1219,1.229,1220,1.229,1221,1.135,1222,1.741,1223,1.229,1224,1.641,1225,1.229,1226,1.135,1227,1.229,1228,1.229,1229,1.204,1230,1.135,1231,1.61,1232,1.135,1233,1.229,1234,1.229,1235,1.229,1236,1.229,1237,1.58,1238,1.135,1239,1.229,1240,1.229,1241,1.229,1242,1.229,1243,1.135,1244,1.229,1245,1.229,1246,1.229,1247,1.229,1248,1.229,1249,1.229,1250,1.229,1251,1.135,1252,1.092,1253,1.071,1254,1.229,1255,1.229,1256,1.229,1257,1.229,1258,1.229,1259,1.229,1260,1.229,1261,1.229,1262,1.229,1263,1.229,1264,1.229,1265,1.812,1266,1.812,1267,1.707,1268,1.812,1269,1.229,1270,1.812]],["title/index.html",[32,0.269,3832,3.861,3833,3.861]],["body/index.html",[17,3.236,27,2.256,43,0.007,52,3.072,167,4.723,171,5.974,218,2.887,225,0.004,226,0.004,367,4.687,368,4.451,369,4.753,372,4.918,378,4.967,385,4.967,392,4.293,403,4.466,419,3.677,420,3.072,461,1.595,527,3.867,698,4.006,700,3.345,735,4.66,738,2.933,844,5.453,875,4.006,883,7.653,885,3.677,889,5.55,890,4.753,894,3.484,897,4.006,944,5.093,950,3.677,1007,4.753,1036,3.677,1084,1.7,1088,2.051,1279,3.677,1357,5.093,1405,3.484,1454,3.267,1496,2.051,1602,4.062,1839,5.843,1970,5.548,2003,4.753,2050,4.753,2152,3.436,2230,3.236,2523,4.753,2974,4.006,3089,5.093,3091,3.677,3193,7.653,3208,4.006,3306,5.093,3373,6.365,3374,6.365,3406,4.006,3508,3.996,3799,5.548,3811,5.548,3834,9.187,3835,4.505,3836,8.114,3837,7.158,3838,7.158,3839,6.239,3840,6.239,3841,7.158,3842,8.606,3843,4.505,3844,4.505,3845,4.505,3846,4.505,3847,6.239,3848,6.239,3849,6.239,3850,4.505,3851,7.727,3852,7.158,3853,4.505,3854,8.114,3855,4.505,3856,4.505,3857,7.158,3858,4.505,3859,4.505,3860,6.239,3861,4.505,3862,4.505,3863,4.505,3864,7.727,3865,7.158,3866,6.239,3867,7.727,3868,4.505,3869,4.505,3870,4.505,3871,4.505,3872,4.505,3873,4.505,3874,6.239,3875,4.505,3876,4.505,3877,4.505,3878,4.505,3879,4.505,3880,4.505,3881,7.158,3882,4.505,3883,4.505,3884,6.239,3885,4.505,3886,4.505,3887,6.239,3888,6.239,3889,4.505,3890,4.505,3891,4.505,3892,4.505,3893,4.505,3894,4.505,3895,4.505,3896,4.505,3897,7.158,3898,4.505,3899,4.505,3900,4.505,3901,4.505,3902,6.239,3903,7.727,3904,4.505,3905,4.505,3906,4.505,3907,5.548,3908,4.505,3909,7.158,3910,7.158,3911,6.239,3912,4.505,3913,6.239,3914,4.505,3915,7.158,3916,6.239,3917,4.505,3918,4.505,3919,4.505,3920,6.239,3921,4.505,3922,4.505,3923,4.505,3924,6.239,3925,8.114,3926,6.239,3927,4.505,3928,6.239,3929,6.239,3930,4.505,3931,4.505,3932,4.505,3933,6.239,3934,4.505,3935,4.505,3936,6.239,3937,4.505,3938,4.505,3939,4.505,3940,4.505,3941,4.505,3942,4.505,3943,4.505,3944,4.505,3945,4.505,3946,4.505,3947,6.239,3948,4.505,3949,4.505,3950,4.505,3951,4.505,3952,6.239,3953,4.505,3954,4.505,3955,4.505,3956,6.239,3957,4.505,3958,4.505,3959,6.239,3960,4.505,3961,4.505,3962,6.239,3963,4.505,3964,6.239,3965,4.505,3966,4.505,3967,4.505,3968,4.505,3969,4.505,3970,4.505,3971,4.505,3972,4.505,3973,4.505,3974,4.505,3975,6.239,3976,4.505]],["title/modules.html",[229,2.353]],["body/modules.html",[43,0.006,225,0.006,226,0.006,228,5.091,229,2.468,238,4.8,318,7.409,648,5.091,652,4.8,959,5.091,964,4.8,968,7.409,2036,5.091,2040,4.8,2063,8.649,2583,5.091,2587,4.8,2588,3.731,2923,5.091,2927,4.8,2976,5.091,2980,4.8,3096,5.091,3100,4.8,3212,5.091,3216,4.8,3247,5.091,3251,4.8,3414,5.091,3418,4.8,3502,5.455,3977,9.726,3978,9.932,3979,9.726]],["title/overview.html",[3980,5.665]],["body/overview.html",[1,2.975,2,2.16,43,0.007,175,1.661,182,3.566,185,2.975,187,3.566,189,3.566,191,3.566,193,2.975,195,3.566,198,3.566,199,2.91,201,2.975,203,3.566,205,3.566,207,2.975,209,2.975,211,2.975,213,2.975,215,2.975,219,2.059,220,2.975,222,3.109,225,0.005,226,0.005,227,1.506,228,6.593,229,1.842,230,2.271,231,2.611,232,2.611,233,2.462,234,1.924,235,4.435,236,4.435,237,4.435,238,5.419,239,3.501,240,2.611,241,2.16,259,2.271,641,6.709,648,6.593,649,4.435,650,4.435,651,4.435,652,5.419,657,0.809,959,6.734,960,4.435,961,4.435,962,4.435,963,4.435,964,5.419,1272,3.8,1372,2.16,1742,4.86,1932,4.071,2036,7.197,2037,4.435,2038,4.435,2039,4.435,2040,5.419,2041,5.498,2050,3.8,2149,4.071,2583,7.005,2584,4.435,2585,4.435,2586,4.435,2587,5.419,2588,5.507,2923,6.844,2924,4.435,2925,4.435,2926,4.435,2927,5.419,2976,6.844,2977,4.435,2978,4.435,2979,4.435,2980,5.419,3096,6.844,3097,4.435,3098,4.435,3099,4.435,3100,5.419,3212,6.844,3213,4.435,3214,4.435,3215,4.435,3216,5.419,3247,6.844,3248,4.435,3249,4.435,3250,4.435,3251,5.419,3414,6.844,3415,4.435,3416,4.435,3417,4.435,3418,5.419,3424,4.435,3425,4.435,3427,4.435,3708,4.435,3980,4.435,3981,4.988,3982,4.988,3983,4.988,3984,4.988]],["title/properties.html",[271,0.793,3777,3.433]],["body/properties.html",[11,0.787,43,0.007,118,6.734,199,2.92,225,0.006,226,0.006,271,1.074,527,4.685,3907,6.734,3985,7.573,3986,7.573,3987,7.573,3988,7.573]],["title/interfaces/providedata.html",[655,0.023,2181,3.167]],["body/interfaces/providedata.html",[3,0.107,4,0.071,9,0.056,11,0.525,21,2.43,22,1.585,23,1.053,32,0.352,43,0.007,44,0.502,45,0.571,48,2.134,50,1.751,58,0.67,60,0.142,66,0.114,67,0.275,68,0.936,110,0.85,225,0.005,226,0.005,271,0.956,277,1.221,279,1.038,280,2.438,307,1.116,327,1.096,330,1.899,354,1.231,442,2.698,483,3.643,490,0.911,539,1.001,576,1.924,582,1.244,655,0.044,657,0.818,663,1.777,762,1.49,1051,3.627,1084,3.057,1114,1.585,1125,2.037,1186,1.989,1296,3.426,1322,3.688,1394,4.377,1412,4.239,1417,4.242,1454,2.643,1492,4.523,1494,3.15,1530,2.424,1537,2.359,1561,3.444,1589,4.207,1670,3.287,1680,4.599,1683,3.765,1684,4.044,1751,2.819,2148,3.287,2150,3.028,2151,2.565,2152,4.493,2153,3.846,2154,3.444,2155,3.747,2156,5.783,2158,4.239,2160,3.444,2162,3.846,2163,5.783,2164,2.819,2165,2.492,2167,2.819,2169,2.819,2170,3.328,2172,2.819,2174,3.846,2175,2.728,2176,2.728,2177,6.431,2178,3.846,2179,3.846,2180,3.846,2181,5.178,2182,5.178,2183,3.846,2184,3.627,2185,3.846,2186,4.39,2187,6.171,2188,6.171,2189,6.171,2190,6.171,2191,3.846,2192,3.846,2193,3.846,2194,3.846,2195,3.846,2196,3.846,2197,3.846,2198,5.783,2199,4.388,2200,5.783,2201,5.136,2202,5.136,2203,5.136,2204,3.846,2205,3.287,2206,3.287,2207,3.287]],["title/interfaces/rawbasiclist.html",[655,0.023,2414,3.335]],["body/interfaces/rawbasiclist.html",[3,0.073,4,0.073,9,0.057,11,0.851,14,2.302,21,1.66,22,1.628,23,1.072,32,0.361,43,0.007,44,0.682,45,0.538,46,1.835,50,1.799,58,0.679,60,0.16,62,0.341,66,0.108,67,0.282,68,0.928,101,1.601,110,0.873,158,2.21,183,1.727,225,0.005,226,0.005,271,0.974,277,1.199,279,1.066,280,2.482,281,2.56,297,1.965,307,1.175,327,1.126,354,1.381,475,1.393,480,1.472,490,0.891,576,1.684,582,1.692,655,0.037,657,0.841,663,1.498,674,0.974,692,3.725,725,3.11,737,1.349,1005,3.725,1084,1.957,1117,0.9,1118,2.237,1119,1.628,1120,1.929,1121,2.13,1122,1.426,1130,2.28,1133,1.399,1150,1.852,1184,0.992,1186,1.572,1187,2.341,1188,1.762,1189,1.374,1190,1.167,1192,1.508,1193,1.374,1194,1.628,1196,1.537,1197,1.66,1198,1.66,1201,1.66,1202,1.66,1208,1.374,1212,1.66,1213,1.66,1216,2.073,1217,1.628,1226,1.628,1232,1.628,1238,1.628,1243,1.628,1253,1.537,1267,1.66,1309,3.11,1337,3.376,1340,3.725,1394,4.896,1530,2.49,1535,2.423,1537,3.207,1683,5.06,1684,5.435,1850,2.896,2150,3.11,2151,2.635,2152,3.693,2158,3.832,2205,3.376,2206,3.376,2307,3.537,2384,3.537,2385,3.951,2386,4.233,2387,4.233,2388,4.233,2389,4.233,2403,3.951,2405,3.725,2408,4.117,2409,2.998,2411,3.725,2414,5.526,2416,3.725,2419,4.233,2420,5.526,2421,4.233,2422,4.233,2423,4.233,2424,4.233,2425,4.233,2426,4.233,2427,4.233,2428,4.233,2429,4.233]],["title/routes.html",[259,2.9]],["body/routes.html",[43,0.006,225,0.006,226,0.006,259,3.517]],["title/interfaces/updateCryptoData.html",[655,0.023,1160,1.516]],["body/interfaces/updateCryptoData.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.2,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.455,1131,1.915,1132,2.212,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.745,1161,1.233,1162,2.072,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/updateCryptoId.html",[655,0.023,1164,1.516]],["body/interfaces/updateCryptoId.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.2,327,0.787,330,1.202,354,1.495,475,1.679,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.83,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.212,1131,1.915,1132,2.212,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.184,1163,1.233,1164,1.745,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/updateCryptos.html",[655,0.023,1162,1.516]],["body/interfaces/updateCryptos.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.2,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.212,1131,1.915,1132,2.212,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.184,1159,1.233,1160,1.184,1161,1.233,1162,1.745,1163,1.233,1164,2.072,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,2.379,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/updatecryptofromfavoritelist.html",[655,0.023,1158,1.516]],["body/interfaces/updatecryptofromfavoritelist.html",[3,0.075,4,0.051,9,0.04,11,0.659,23,0.566,32,0.253,43,0.007,44,0.776,45,0.239,58,0.77,60,0.14,62,0.239,66,0.135,67,0.197,68,0.926,101,1.48,107,1.563,109,1.591,110,1.178,116,1.65,133,1.055,158,1.712,225,0.004,226,0.004,263,1.365,271,0.758,277,1.086,279,1.099,297,1.621,307,1.207,327,0.787,330,1.202,354,1.495,475,1.652,480,1.585,490,0.929,493,1.208,496,0.746,498,1.442,533,0.926,539,1.809,576,1.768,582,0.669,655,0.046,657,0.588,660,1.44,663,0.707,665,1.075,666,1.075,674,0.681,737,1.65,762,1.547,873,1.208,1112,2.286,1113,1.208,1114,2.534,1115,2.379,1116,2.744,1117,0.701,1118,1.554,1119,1.139,1120,1.872,1121,1.941,1122,0.997,1123,1.055,1124,1.678,1125,1.917,1126,1.78,1127,1.78,1128,1.233,1129,1.745,1130,2.212,1131,1.915,1132,2.212,1133,1.712,1134,1.184,1135,1.233,1136,1.184,1137,1.745,1138,1.745,1139,1.233,1140,1.745,1141,2.286,1142,1.184,1143,1.233,1144,1.184,1145,1.184,1146,1.233,1147,1.184,1148,1.233,1149,1.233,1150,1.442,1151,1.184,1152,1.745,1153,1.745,1154,1.161,1155,1.233,1156,1.184,1157,1.233,1158,1.745,1159,1.233,1160,2.072,1161,1.233,1162,1.184,1163,1.233,1164,1.184,1165,1.096,1166,1.745,1167,1.016,1168,1.055,1169,1.016,1170,1.016,1171,1.233,1172,1.184,1173,1.233,1174,1.233,1175,1.954,1176,2.156,1177,2.156,1178,2.156,1179,1.233,1180,2.156,1181,1.184,1182,2.072,1183,2.072,1184,0.694,1185,1.161,1186,1.604,1187,1.744,1188,1.224,1189,0.961,1190,1.428,1191,2.437,1192,1.055,1193,0.961,1194,1.139,1195,1.233,1196,1.075,1197,1.161,1198,1.161,1199,1.233,1200,1.233,1201,1.161,1202,1.161,1203,2.653,1204,2.881,1205,2.905,1206,1.161,1207,2.212,1208,0.961,1209,2.437,1210,1.233,1211,1.233,1212,1.711,1213,1.711,1214,1.233,1215,1.139,1216,1.614,1217,1.139,1218,1.233,1219,1.233,1220,1.233,1221,1.139,1222,1.744,1223,1.233,1224,1.646,1225,1.233,1226,1.139,1227,1.233,1228,1.233,1229,1.208,1230,1.139,1231,1.614,1232,1.139,1233,1.233,1234,1.233,1235,1.233,1236,1.233,1237,1.584,1238,1.139,1239,1.233,1240,1.233,1241,1.233,1242,1.233,1243,1.139,1244,1.233,1245,1.233,1246,1.233,1247,1.233,1248,1.233,1249,1.233,1250,1.233,1251,1.139,1252,1.096,1253,1.075,1254,1.233,1255,1.233,1256,1.233,1257,1.233,1258,1.233,1259,1.233,1260,1.233,1261,1.233,1262,1.233,1263,1.233,1264,1.233,1265,1.816,1266,1.816,1267,1.711,1268,1.816,1269,1.233,1270,1.816]],["title/interfaces/updateuser.html",[655,0.023,1166,1.516]],["body/interfaces/updateuser.html",[3,0.074,4,0.05,9,0.039,11,0.651,23,0.554,32,0.247,43,0.007,44,0.769,45,0.509,58,0.766,60,0.139,62,0.233,66,0.135,67,0.193,68,0.923,101,1.807,107,1.543,109,1.571,110,1.165,116,1.629,133,1.032,158,1.69,225,0.004,226,0.004,263,1.343,271,0.746,277,1.08,279,1.521,280,2.265,297,1.6,307,1.198,327,0.77,330,1.664,354,1.491,475,1.674,480,1.575,490,0.933,493,1.182,496,0.73,498,1.419,533,0.906,539,1.803,576,1.759,582,0.654,655,0.046,657,0.575,660,1.424,663,0.691,665,1.051,666,1.051,674,0.666,737,1.629,762,1.531,873,1.182,1112,2.261,1113,1.182,1114,2.517,1115,2.354,1116,2.724,1117,0.689,1118,1.529,1119,1.114,1120,1.855,1121,1.924,1122,0.975,1123,1.032,1124,1.651,1125,1.892,1126,1.751,1127,1.751,1128,1.206,1129,1.717,1130,2.192,1131,1.907,1132,2.192,1133,1.69,1134,1.158,1135,1.206,1136,1.158,1137,1.717,1138,1.717,1139,1.206,1140,1.717,1141,2.261,1142,1.158,1143,1.206,1144,1.158,1145,1.158,1146,1.206,1147,1.158,1148,1.206,1149,1.206,1150,1.419,1151,1.158,1152,1.717,1153,1.717,1154,1.136,1155,1.206,1156,1.158,1157,1.206,1158,1.158,1159,1.206,1160,1.158,1161,1.206,1162,1.158,1163,1.206,1164,1.158,1165,1.072,1166,2.045,1167,0.994,1168,1.032,1169,0.994,1170,0.994,1171,1.206,1172,1.158,1173,1.206,1174,1.206,1175,1.929,1176,2.129,1177,2.129,1178,2.129,1179,1.206,1180,2.129,1181,1.158,1182,2.045,1183,2.045,1184,0.679,1185,1.136,1186,1.587,1187,1.722,1188,1.204,1189,0.94,1190,1.409,1191,2.415,1192,1.032,1193,0.94,1194,1.114,1195,1.206,1196,1.051,1197,1.136,1198,1.136,1199,1.206,1200,1.206,1201,1.136,1202,1.136,1203,2.632,1204,2.868,1205,2.891,1206,1.136,1207,2.192,1208,0.94,1209,2.415,1210,1.206,1211,1.206,1212,1.683,1213,1.683,1214,1.206,1215,1.114,1216,1.588,1217,1.114,1218,1.206,1219,1.206,1220,1.206,1221,1.114,1222,1.722,1223,1.206,1224,1.619,1225,1.206,1226,1.114,1227,1.206,1228,1.206,1229,1.182,1230,1.114,1231,1.588,1232,1.114,1233,1.206,1234,1.206,1235,1.206,1236,1.206,1237,1.558,1238,1.114,1239,1.206,1240,1.206,1241,1.206,1242,1.206,1243,1.114,1244,1.206,1245,1.206,1246,1.206,1247,1.206,1248,1.206,1249,1.206,1250,1.206,1251,1.114,1252,1.072,1253,1.051,1254,1.206,1255,1.206,1256,1.206,1257,1.206,1258,1.206,1259,1.206,1260,1.206,1261,1.206,1262,1.206,1263,1.206,1264,1.206,1265,1.787,1266,1.787,1267,1.683,1268,1.787,1269,1.206,1270,1.787,2224,3.182]],["title/miscellaneous/variables.html",[3822,2.941,3989,4.974]],["body/miscellaneous/variables.html",[19,1.449,21,2.529,22,2.595,32,0.216,40,1.873,41,3.442,43,0.007,45,0.574,48,2.948,50,1.075,58,0.762,63,3.162,110,0.799,225,0.003,226,0.003,230,3.35,277,1.096,289,4.413,307,0.727,354,1.415,413,2.651,434,2.848,438,2.227,442,2.451,461,1.098,469,2.114,483,3.975,496,1.944,515,3.775,527,1.675,547,3.612,582,1.803,655,0.036,702,2.227,725,3.462,732,3.223,737,1.992,774,1.934,844,2.361,973,3.495,978,4.146,979,5.01,980,6.298,981,3.411,982,3.411,983,3.411,984,3.239,985,3.618,986,5.01,987,4.146,988,4.146,989,4.146,990,4.413,991,4.146,992,5.314,993,2.227,996,3.876,997,3.876,998,3.876,999,3.876,1000,3.876,1001,3.876,1002,3.876,1004,2.745,1014,5.281,1024,6.811,1029,4.757,1030,6.202,1032,6.202,1061,2.757,1084,1.17,1125,2.313,1131,0.673,1185,1.52,1215,2.404,1286,4.108,1322,1.411,1347,1.859,1394,5.138,1420,5.834,1454,4.926,1478,3.092,1483,2.227,1496,3.35,1501,1.342,1530,3.532,1535,3.439,1537,1.449,1573,4.352,1574,5.273,1576,5.135,1577,4.352,1586,4.413,1610,2.227,1637,2.53,1669,5.281,1670,2.018,1680,5.019,1683,5.24,1700,3.618,2148,3.092,2152,4.492,2184,2.227,2208,2.361,2310,4.223,2336,2.361,2342,5.01,2384,3.239,2450,5.753,2601,6.543,2649,5.605,2691,2.53,2847,6.252,2858,4.397,3255,2.53,3274,3.876,3316,3.876,3508,5.06,3571,2.361,3646,2.361,3673,4.928,3680,2.361,3689,4.223,3701,2.53,3711,2.757,3714,2.53,3728,2.757,3729,4.223,3730,4.223,3774,2.757,3775,2.757,3822,2.361,3823,6.811,3827,4.223,3828,6.202,3989,2.757,3990,9.155,3991,3.1,3992,3.1,3993,3.1,3994,3.1,3995,3.1,3996,3.1,3997,3.1,3998,3.1,3999,3.1,4000,3.1,4001,3.1,4002,3.1,4003,3.1,4004,3.1,4005,3.1,4006,3.1,4007,4.749,4008,3.1,4009,3.1,4010,3.1,4011,3.1,4012,3.1,4013,3.1,4014,7.659,4015,5.772,4016,7.659,4017,9.527,4018,9.384,4019,7.901,4020,5.772,4021,7.358,4022,6.975,4023,7.358,4024,3.1,4025,3.1,4026,3.1,4027,3.1,4028,6.47,4029,3.1,4030,3.1,4031,3.1,4032,3.1,4033,4.749,4034,3.1,4035,3.1,4036,3.1,4037,3.1,4038,3.1,4039,3.1,4040,4.749,4041,3.1,4042,3.1,4043,3.1,4044,3.1,4045,4.749,4046,3.1,4047,3.1,4048,3.1,4049,3.1,4050,4.749,4051,3.1,4052,3.1,4053,3.1,4054,3.1,4055,3.1,4056,3.1,4057,3.1,4058,3.1,4059,3.1,4060,4.749,4061,3.1,4062,6.975,4063,3.1,4064,3.1,4065,3.1,4066,3.1,4067,3.1,4068,3.1,4069,3.1,4070,3.1,4071,3.1,4072,4.749,4073,4.749,4074,4.749,4075,3.1,4076,3.1,4077,3.1,4078,3.1,4079,3.1]]],"invertedIndex":[["",{"_index":43,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"routes.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":127,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"dependencies.html":{}}}],["0.0.1",{"_index":3986,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":153,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["0.14",{"_index":864,"title":{},"body":{"components/AppComponent.html":{}}}],["0.14.2",{"_index":3821,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":914,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["0.2s",{"_index":3412,"title":{},"body":{"components/SearchPage.html":{}}}],["0.3",{"_index":930,"title":{},"body":{"components/AppComponent.html":{}}}],["0.3s",{"_index":918,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ProfilePage.html":{}}}],["0.4",{"_index":1935,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ProfilePage.html":{}}}],["0.5rem",{"_index":412,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{}}}],["0.5s",{"_index":1745,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["0.8rem",{"_index":1807,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["0.9em",{"_index":940,"title":{},"body":{"components/AppComponent.html":{}}}],["0.9rem",{"_index":1805,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{}}}],["0/1",{"_index":3690,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":3720,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":3723,"title":{},"body":{"coverage.html":{}}}],["0/18",{"_index":3722,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":3699,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":3697,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":3696,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":3693,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":3698,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":3719,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":3721,"title":{},"body":{"coverage.html":{}}}],["00eaff",{"_index":1991,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["0px",{"_index":628,"title":{},"body":{"components/AdminPanelPage.html":{},"components/SearchPage.html":{}}}],["0px!important",{"_index":3405,"title":{},"body":{"components/SearchPage.html":{}}}],["1",{"_index":1231,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/Image.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["1).padstart(2",{"_index":1896,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["1+\"\",title:\"\",description:\"\",cryptos",{"_index":2947,"title":{},"body":{"components/ListcontentPage.html":{}}}],["1.1em",{"_index":939,"title":{},"body":{"components/AppComponent.html":{}}}],["1.1rem",{"_index":163,"title":{},"body":{"components/AboutPage.html":{},"components/CryptosimplecardComponent.html":{}}}],["1.2em",{"_index":2013,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["1.2rem",{"_index":117,"title":{},"body":{"components/AboutPage.html":{}}}],["1.3em",{"_index":2014,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["1.4em",{"_index":892,"title":{},"body":{"components/AppComponent.html":{}}}],["1.4rem",{"_index":1798,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["1.5",{"_index":124,"title":{},"body":{"components/AboutPage.html":{}}}],["1.5rem",{"_index":159,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{}}}],["1.6",{"_index":2973,"title":{},"body":{"components/ListcontentPage.html":{}}}],["1.6rem",{"_index":2969,"title":{},"body":{"components/ListcontentPage.html":{}}}],["1/1",{"_index":3700,"title":{},"body":{"coverage.html":{}}}],["1/13",{"_index":3733,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":3724,"title":{},"body":{"coverage.html":{}}}],["1/27",{"_index":3707,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":3772,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":3706,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":3764,"title":{},"body":{"coverage.html":{}}}],["1/6",{"_index":3765,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":3734,"title":{},"body":{"coverage.html":{}}}],["10",{"_index":1732,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["10/15",{"_index":3716,"title":{},"body":{"coverage.html":{}}}],["10/16",{"_index":3758,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":128,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"coverage.html":{}}}],["100%!important",{"_index":2016,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["1000",{"_index":2919,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["100px",{"_index":3191,"title":{},"body":{"components/ProfilePage.html":{}}}],["100vh",{"_index":2509,"title":{},"body":{"components/FormularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["10px",{"_index":120,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["11.6.0",{"_index":3803,"title":{},"body":{"dependencies.html":{}}}],["11/12",{"_index":3718,"title":{},"body":{"coverage.html":{}}}],["11/14",{"_index":3755,"title":{},"body":{"coverage.html":{}}}],["11/15",{"_index":3750,"title":{},"body":{"coverage.html":{}}}],["11/18",{"_index":3752,"title":{},"body":{"coverage.html":{}}}],["12.0.0",{"_index":3807,"title":{},"body":{"dependencies.html":{}}}],["12.34",{"_index":3115,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["12/12",{"_index":3727,"title":{},"body":{"coverage.html":{}}}],["12/15",{"_index":3712,"title":{},"body":{"coverage.html":{}}}],["120px",{"_index":2909,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["12px",{"_index":151,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["13/25",{"_index":3760,"title":{},"body":{"coverage.html":{}}}],["135px",{"_index":108,"title":{},"body":{"components/AboutPage.html":{}}}],["14",{"_index":1949,"title":{},"body":{"components/CryptoviewPage.html":{},"coverage.html":{}}}],["14/14",{"_index":3726,"title":{},"body":{"coverage.html":{}}}],["14px",{"_index":1754,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["15",{"_index":540,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["15/16",{"_index":3748,"title":{},"body":{"coverage.html":{}}}],["15/18",{"_index":3732,"title":{},"body":{"coverage.html":{}}}],["150",{"_index":853,"title":{},"body":{"components/AppComponent.html":{}}}],["150px",{"_index":424,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/CryptoviewPage.html":{},"components/ListformularyComponent.html":{}}}],["15px",{"_index":113,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["16",{"_index":1967,"title":{},"body":{"components/CryptoviewPage.html":{},"coverage.html":{}}}],["16.0.0",{"_index":3796,"title":{},"body":{"dependencies.html":{}}}],["16.0.3",{"_index":3795,"title":{},"body":{"dependencies.html":{}}}],["16/16",{"_index":3743,"title":{},"body":{"coverage.html":{}}}],["16/18",{"_index":3736,"title":{},"body":{"coverage.html":{}}}],["16px",{"_index":156,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{}}}],["17.18.12",{"_index":3812,"title":{},"body":{"dependencies.html":{}}}],["175",{"_index":1938,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["18.0.0",{"_index":3779,"title":{},"body":{"dependencies.html":{}}}],["18.0.1",{"_index":3784,"title":{},"body":{"dependencies.html":{}}}],["18.2.0",{"_index":3781,"title":{},"body":{"dependencies.html":{}}}],["18/18",{"_index":3742,"title":{},"body":{"coverage.html":{}}}],["18px",{"_index":857,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/ProfilePage.html":{}}}],["19",{"_index":3982,"title":{},"body":{"overview.html":{}}}],["1:643452286872:web:5bc55e732f97813fa4dded",{"_index":1062,"title":{},"body":{"modules/AppModule.html":{}}}],["1].id",{"_index":567,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["1fr",{"_index":2578,"title":{},"body":{"components/HomePage.html":{}}}],["1px",{"_index":643,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{}}}],["1rem",{"_index":122,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["2",{"_index":641,"title":{},"body":{"components/AdminPanelPage.html":{},"overview.html":{}}}],["2.0.0",{"_index":3818,"title":{},"body":{"dependencies.html":{}}}],["2.0.5",{"_index":3802,"title":{},"body":{"dependencies.html":{}}}],["2.8.1",{"_index":3815,"title":{},"body":{"dependencies.html":{}}}],["2/2",{"_index":3740,"title":{},"body":{"coverage.html":{}}}],["2/6",{"_index":3769,"title":{},"body":{"coverage.html":{}}}],["20",{"_index":3763,"title":{},"body":{"coverage.html":{}}}],["200",{"_index":1972,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["2000",{"_index":3457,"title":{},"body":{"injectables/SharedService.html":{}}}],["200px",{"_index":900,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["206",{"_index":2033,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["20px",{"_index":99,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["20px!important",{"_index":103,"title":{},"body":{"components/AboutPage.html":{}}}],["22",{"_index":3983,"title":{},"body":{"overview.html":{}}}],["22px",{"_index":855,"title":{},"body":{"components/AppComponent.html":{},"components/HomePage.html":{},"components/ProfilePage.html":{}}}],["24",{"_index":3981,"title":{},"body":{"overview.html":{}}}],["24px",{"_index":868,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["25",{"_index":3705,"title":{},"body":{"coverage.html":{}}}],["250",{"_index":2551,"title":{},"body":{"components/HomePage.html":{}}}],["26px",{"_index":859,"title":{},"body":{"components/AppComponent.html":{},"components/HomePage.html":{}}}],["28a745",{"_index":2015,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["2e7d32",{"_index":2034,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["2px",{"_index":891,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["2rem",{"_index":390,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["3",{"_index":1932,"title":{},"body":{"components/CryptoviewPage.html":{},"coverage.html":{},"overview.html":{}}}],["3.1.0",{"_index":3801,"title":{},"body":{"dependencies.html":{}}}],["3.3.1",{"_index":3809,"title":{},"body":{"dependencies.html":{}}}],["3/12",{"_index":3768,"title":{},"body":{"coverage.html":{}}}],["3/3",{"_index":3695,"title":{},"body":{"coverage.html":{}}}],["3/4",{"_index":3746,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":1614,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"interfaces/ICryptoBase.html":{}}}],["3000",{"_index":3390,"title":{},"body":{"components/SearchPage.html":{}}}],["300px",{"_index":2519,"title":{},"body":{"components/FormularyComponent.html":{}}}],["30px",{"_index":849,"title":{},"body":{"components/AppComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{}}}],["33",{"_index":3708,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["333",{"_index":1954,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["350px",{"_index":2512,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["3rem",{"_index":416,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["4.4.6",{"_index":3797,"title":{},"body":{"dependencies.html":{}}}],["4/12",{"_index":3709,"title":{},"body":{"coverage.html":{}}}],["4/4",{"_index":3694,"title":{},"body":{"coverage.html":{}}}],["4/5",{"_index":3744,"title":{},"body":{"coverage.html":{}}}],["4/8",{"_index":3773,"title":{},"body":{"coverage.html":{}}}],["4/9",{"_index":3771,"title":{},"body":{"coverage.html":{}}}],["400",{"_index":164,"title":{},"body":{"components/AboutPage.html":{}}}],["400px",{"_index":129,"title":{},"body":{"components/AboutPage.html":{},"components/CryptosimplecardComponent.html":{}}}],["400px!important",{"_index":2021,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["40px",{"_index":1756,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["44",{"_index":3770,"title":{},"body":{"coverage.html":{}}}],["450px!important",{"_index":2018,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["48",{"_index":3005,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["4caf50",{"_index":1930,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["4px",{"_index":150,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["5",{"_index":3501,"title":{},"body":{"components/SplashPage.html":{}}}],["5.0.0",{"_index":3785,"title":{},"body":{"dependencies.html":{}}}],["5.00",{"_index":3116,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["5.12.2",{"_index":3806,"title":{},"body":{"dependencies.html":{}}}],["5/5",{"_index":3725,"title":{},"body":{"coverage.html":{}}}],["5/6",{"_index":3737,"title":{},"body":{"coverage.html":{}}}],["5/7",{"_index":3762,"title":{},"body":{"coverage.html":{}}}],["5/8",{"_index":3739,"title":{},"body":{"coverage.html":{}}}],["50",{"_index":375,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{},"coverage.html":{}}}],["50%!important",{"_index":136,"title":{},"body":{"components/AboutPage.html":{}}}],["500",{"_index":866,"title":{},"body":{"components/AppComponent.html":{}}}],["50px",{"_index":869,"title":{},"body":{"components/AppComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["52",{"_index":3759,"title":{},"body":{"coverage.html":{}}}],["54",{"_index":3691,"title":{},"body":{"coverage.html":{}}}],["56",{"_index":3766,"title":{},"body":{"coverage.html":{}}}],["5px",{"_index":406,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{}}}],["6",{"_index":1942,"title":{},"body":{"components/CryptoviewPage.html":{},"coverage.html":{}}}],["6.0.2",{"_index":3789,"title":{},"body":{"dependencies.html":{}}}],["6.0.3",{"_index":3792,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":3787,"title":{},"body":{"dependencies.html":{}}}],["6/10",{"_index":3757,"title":{},"body":{"coverage.html":{}}}],["6/11",{"_index":3692,"title":{},"body":{"coverage.html":{}}}],["6/6",{"_index":3704,"title":{},"body":{"coverage.html":{}}}],["60",{"_index":3756,"title":{},"body":{"coverage.html":{}}}],["600",{"_index":161,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{}}}],["600px",{"_index":126,"title":{},"body":{"components/AboutPage.html":{},"components/CryptosimplecardComponent.html":{},"components/SearchPage.html":{}}}],["60px",{"_index":1762,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["61",{"_index":3751,"title":{},"body":{"coverage.html":{}}}],["616e7e",{"_index":865,"title":{},"body":{"components/AppComponent.html":{}}}],["62",{"_index":3738,"title":{},"body":{"coverage.html":{}}}],["623g40jnkj",{"_index":1065,"title":{},"body":{"modules/AppModule.html":{}}}],["643452286872",{"_index":1060,"title":{},"body":{"modules/AppModule.html":{}}}],["66",{"_index":3715,"title":{},"body":{"coverage.html":{}}}],["666",{"_index":1966,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["6px",{"_index":409,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{}}}],["7",{"_index":1613,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"coverage.html":{}}}],["7.0.0",{"_index":3805,"title":{},"body":{"dependencies.html":{}}}],["7.8.0",{"_index":3813,"title":{},"body":{"dependencies.html":{}}}],["70",{"_index":3984,"title":{},"body":{"overview.html":{}}}],["700px!important",{"_index":2017,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["70px",{"_index":2910,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["71",{"_index":3761,"title":{},"body":{"coverage.html":{}}}],["73",{"_index":3749,"title":{},"body":{"coverage.html":{}}}],["73849a",{"_index":870,"title":{},"body":{"components/AppComponent.html":{}}}],["75",{"_index":3745,"title":{},"body":{"coverage.html":{}}}],["757575",{"_index":858,"title":{},"body":{"components/AppComponent.html":{}}}],["768px",{"_index":415,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/CryptocardComponent.html":{},"components/ListformularyComponent.html":{}}}],["777",{"_index":941,"title":{},"body":{"components/AppComponent.html":{}}}],["78",{"_index":3754,"title":{},"body":{"coverage.html":{}}}],["7l1r.onrender.com/api",{"_index":4063,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7l1r.onrender.com/api/auth/local",{"_index":4065,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7l1r.onrender.com/api/auth/local/register",{"_index":4067,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7l1r.onrender.com/api/upload",{"_index":4071,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7l1r.onrender.com/api/users/me",{"_index":4069,"title":{},"body":{"miscellaneous/variables.html":{}}}],["8",{"_index":586,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["8.0.0",{"_index":3794,"title":{},"body":{"dependencies.html":{}}}],["8/13",{"_index":3753,"title":{},"body":{"coverage.html":{}}}],["80",{"_index":1939,"title":{},"body":{"components/CryptoviewPage.html":{},"coverage.html":{}}}],["83",{"_index":3731,"title":{},"body":{"coverage.html":{}}}],["85%!important",{"_index":3411,"title":{},"body":{"components/SearchPage.html":{}}}],["88",{"_index":3735,"title":{},"body":{"coverage.html":{}}}],["8c8c8c",{"_index":2573,"title":{},"body":{"components/HomePage.html":{}}}],["8px",{"_index":147,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["8px!important",{"_index":2019,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["9",{"_index":340,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["9._",{"_index":339,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["9/16",{"_index":3767,"title":{},"body":{"coverage.html":{}}}],["90",{"_index":138,"title":{},"body":{"components/AboutPage.html":{},"components/SearchPage.html":{}}}],["90%!important",{"_index":3402,"title":{},"body":{"components/SearchPage.html":{}}}],["90vw!important",{"_index":2020,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["91",{"_index":3717,"title":{},"body":{"coverage.html":{}}}],["93",{"_index":3747,"title":{},"body":{"coverage.html":{}}}],["96",{"_index":642,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["991px",{"_index":887,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{}}}],["992px",{"_index":878,"title":{},"body":{"components/AppComponent.html":{}}}],["abierto",{"_index":3919,"title":{},"body":{"index.html":{}}}],["ability",{"_index":3119,"title":{},"body":{"components/ProfilePage.html":{}}}],["about'},{'name",{"_index":181,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["about.page",{"_index":252,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{}}}],["about.page.html",{"_index":31,"title":{},"body":{"components/AboutPage.html":{}}}],["about.page.scss",{"_index":29,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutpage",{"_index":1,"title":{"components/AboutPage.html":{}},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["aboutpagemodule",{"_index":228,"title":{"modules/AboutPageModule.html":{}},"body":{"modules/AboutPageModule.html":{},"modules.html":{},"overview.html":{}}}],["aboutpageroutingmodule",{"_index":238,"title":{"modules/AboutPageRoutingModule.html":{}},"body":{"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["aboutus.presentation1",{"_index":75,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.presentation2",{"_index":77,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.presentation3",{"_index":88,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.presentation4",{"_index":89,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.presentation5",{"_index":90,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.presentation6",{"_index":91,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.presentation7",{"_index":92,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.skills.skill1",{"_index":83,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.skills.skill2",{"_index":84,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.skills.skill3",{"_index":85,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.skills.skill4",{"_index":86,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.skills.skill5",{"_index":87,"title":{},"body":{"components/AboutPage.html":{}}}],["aboutus.skills.title",{"_index":82,"title":{},"body":{"components/AboutPage.html":{}}}],["absolute",{"_index":374,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["absoluto",{"_index":958,"title":{},"body":{"components/AppComponent.html":{}}}],["abstract",{"_index":1376,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{}}}],["abstractcontrol",{"_index":3031,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["acceder",{"_index":3878,"title":{},"body":{"index.html":{}}}],["acceso",{"_index":3858,"title":{},"body":{"index.html":{}}}],["access",{"_index":1276,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"components/ProfilePage.html":{},"injectables/UserStrapiService.html":{}}}],["accessing",{"_index":1320,"title":{},"body":{"guards/AuthGuard2.html":{},"miscellaneous/functions.html":{}}}],["accessors",{"_index":278,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["accesstoken",{"_index":2194,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["accesstoken:string",{"_index":2185,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["accordingly",{"_index":1836,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["account",{"_index":3120,"title":{},"body":{"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["action",{"_index":716,"title":{},"body":{"components/AppComponent.html":{},"components/ListPage.html":{},"components/ListcryptoComponent.html":{}}}],["actions",{"_index":2851,"title":{},"body":{"components/ListPage.html":{},"components/ListcryptoComponent.html":{}}}],["activated",{"_index":1295,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/SearchPage.html":{}}}],["activatedroute",{"_index":1826,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["activatedroutesnapshot",{"_index":1290,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["activateroute",{"_index":1825,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["activateroute:activatedroute",{"_index":1881,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["active",{"_index":503,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"injectables/TranslationService.html":{}}}],["activeelement",{"_index":1978,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["activeelement.element.x",{"_index":1980,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["actual",{"_index":1667,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["actual_component",{"_index":224,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["actualizados",{"_index":3871,"title":{},"body":{"index.html":{}}}],["actualizar",{"_index":3972,"title":{},"body":{"index.html":{}}}],["actualuser",{"_index":441,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["add",{"_index":1207,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["addcrypto",{"_index":1154,"title":{"interfaces/addcrypto.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["addcryptoresponse",{"_index":2390,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{}}}],["addcryptoresponse(data",{"_index":1238,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["addcryptoresponse(data:any):any",{"_index":2714,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["addcryptotodatabase",{"_index":2391,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/SearchPage.html":{},"injectables/StrapiUserMapping.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["addcryptotodatabase(crypto",{"_index":2784,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["addcryptotodatabase(crypto:basiccrypto):observable",{"_index":2821,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["addcryptotodatabase(data",{"_index":1243,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["addcryptotodatabase(data:any):any",{"_index":2713,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["addcryptotodatabase(id",{"_index":3277,"title":{},"body":{"components/SearchPage.html":{}}}],["addcryptotodatabase(id:string",{"_index":3356,"title":{},"body":{"components/SearchPage.html":{}}}],["addcryptotodatabase(token",{"_index":2735,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["addcryptotodatabase(token:string,crypto",{"_index":3643,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["addcryptotodatabase(token:string,crypto:basiccrypto):observable",{"_index":2777,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["addcryptotolist",{"_index":2392,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/SearchPage.html":{},"injectables/StrapiUserMapping.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["addcryptotolist(data",{"_index":2403,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["addcryptotolist(data:any):any",{"_index":2715,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["addcryptotolist(id",{"_index":3588,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["addcryptotolist(id:string):updatecryptofromfavoritelist",{"_index":1249,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["addcryptotolist(idlist",{"_index":2786,"title":{},"body":{"interfaces/IUserbaseService.html":{},"components/SearchPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["addcryptotolist(idlist:string,idcrypto:string,crypto",{"_index":2818,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["addcryptotolist(idlist:string,idcrypto:string,idcryptoxd:string",{"_index":3358,"title":{},"body":{"components/SearchPage.html":{}}}],["addcryptotolist(token",{"_index":2739,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["addcryptotolist(token:string,idlist:string,idcrypto:string,crypto",{"_index":2773,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["added",{"_index":2791,"title":{},"body":{"interfaces/IUserbaseService.html":{},"components/SearchPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["adding",{"_index":1216,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["additional",{"_index":2232,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationMapping.html":{}}}],["addlistresponse",{"_index":1140,"title":{"interfaces/addlistresponse.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["addlisttouser",{"_index":2727,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["addlisttouser(list",{"_index":2789,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["addlisttouser(list:basiclist):observable",{"_index":2815,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["addlisttouser(token",{"_index":2742,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["addlisttouser(token:string,list:basiclist,iduser:string):observable",{"_index":2770,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["addlistuser",{"_index":2393,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{}}}],["addlistuser(data",{"_index":2405,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["addlistuser(data:any,iduser:string):any",{"_index":2708,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["addlistuser(data:cryptolist,iduser:string):createlistremote",{"_index":1211,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["addlistuserresponse",{"_index":2394,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{}}}],["addlistuserresponse(data",{"_index":1217,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["addlistuserresponse(data:any):basiclist",{"_index":2709,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["adds",{"_index":2737,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"pipes/PercentformaterPipe.html":{},"components/SearchPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["además",{"_index":3847,"title":{},"body":{"index.html":{}}}],["admin",{"_index":183,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuardAdmin.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["admin_panel.csv_button.text",{"_index":612,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["admin_panel.table.actions",{"_index":616,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["admin_panel.table.admin",{"_index":362,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{}}}],["admin_panel.table.email",{"_index":614,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["admin_panel.table.gender",{"_index":615,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["admin_panel.table.username",{"_index":613,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["admindeleteuser",{"_index":2728,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["admindeleteuser(token",{"_index":2744,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["admindeleteuser(token:string",{"_index":2780,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{}}}],["adminformularycomponent",{"_index":182,"title":{"components/AdminFormularyComponent.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["admingetuserspagination",{"_index":2729,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["admingetuserspagination(token",{"_index":2746,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["admingetuserspagination(token:string",{"_index":2779,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{}}}],["administration",{"_index":429,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["adminpanelpage",{"_index":185,"title":{"components/AdminPanelPage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["adminpanelpagemodule",{"_index":648,"title":{"modules/AdminPanelPageModule.html":{}},"body":{"modules/AdminPanelPageModule.html":{},"modules.html":{},"overview.html":{}}}],["adminpanelpageroutingmodule",{"_index":652,"title":{"modules/AdminPanelPageRoutingModule.html":{}},"body":{"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["adminupdateuser",{"_index":2730,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["adminupdateuser(token",{"_index":2750,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["advanced",{"_index":1578,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["advancedcrypto",{"_index":656,"title":{"interfaces/AdvancedCrypto.html":{}},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoGraphPrice.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"interfaces/PricesCryptoFromApi.html":{},"coverage.html":{}}}],["afterdraw",{"_index":1974,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["agrega",{"_index":1752,"title":{},"body":{"components/CryptocardComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/RegisterPage.html":{}}}],["aizasya9vayi9vlzwgm5uky4gdwf3d5vaqoongy",{"_index":1052,"title":{},"body":{"modules/AppModule.html":{}}}],["ajusta",{"_index":384,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/HomePage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["ajuste",{"_index":933,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListcontentPage.html":{}}}],["ajustes",{"_index":169,"title":{},"body":{"components/AboutPage.html":{}}}],["al",{"_index":922,"title":{},"body":{"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["alan",{"_index":79,"title":{},"body":{"components/AboutPage.html":{}}}],["alert",{"_index":696,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["alert.dismiss",{"_index":825,"title":{},"body":{"components/AppComponent.html":{}}}],["alert.present",{"_index":826,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["alert=await",{"_index":817,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["alertcontroller",{"_index":686,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["alertcontroller:alertcontroller",{"_index":776,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["alertdelete",{"_index":2831,"title":{},"body":{"components/ListPage.html":{}}}],["alertdelete(id",{"_index":2840,"title":{},"body":{"components/ListPage.html":{}}}],["alertdelete(id:string",{"_index":2899,"title":{},"body":{"components/ListPage.html":{}}}],["alerts",{"_index":2827,"title":{},"body":{"components/ListPage.html":{}}}],["alguno",{"_index":2911,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["align",{"_index":95,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["allow",{"_index":1834,"title":{},"body":{"components/CryptoviewPage.html":{},"components/RegisterPage.html":{}}}],["allowed",{"_index":1300,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{}}}],["allowing",{"_index":1330,"title":{},"body":{"guards/AuthGuard2.html":{},"components/LoginPage.html":{}}}],["allows",{"_index":2061,"title":{},"body":{"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["almacenar",{"_index":3948,"title":{},"body":{"index.html":{}}}],["already",{"_index":1323,"title":{},"body":{"guards/AuthGuard2.html":{}}}],["alrededor",{"_index":2581,"title":{},"body":{"components/HomePage.html":{}}}],["alternativetext",{"_index":1173,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["altura",{"_index":2510,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["ancho",{"_index":2511,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["anchura",{"_index":3093,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["android",{"_index":3913,"title":{},"body":{"index.html":{}}}],["angular",{"_index":700,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseMediaService.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["angular's",{"_index":4028,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular/animations",{"_index":3778,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk",{"_index":3780,"title":{},"body":{"dependencies.html":{}}}],["angular/cdk/scrolling",{"_index":3422,"title":{},"body":{"modules/SearchPageModule.html":{}}}],["angular/common",{"_index":246,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":543,"title":{},"body":{"components/AdminPanelPage.html":{},"modules/AppModule.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["angular/compiler",{"_index":3782,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":62,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"dependencies.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["angular/fire",{"_index":3783,"title":{},"body":{"dependencies.html":{}}}],["angular/fire/compat/functions",{"_index":1019,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/forms",{"_index":248,"title":{},"body":{"modules/AboutPageModule.html":{},"components/AdminFormularyComponent.html":{},"modules/AdminPanelPageModule.html":{},"modules/CryptoviewPageModule.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"components/ListformularyComponent.html":{},"modules/LoginPageModule.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":967,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfilePageModule.html":{},"dependencies.html":{}}}],["angular/router",{"_index":261,"title":{},"body":{"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/LoginPage.html":{},"modules/LoginPageRoutingModule.html":{},"components/ProfilePage.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageRoutingModule.html":{},"components/SearchPage.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"dependencies.html":{}}}],["angularfirefunctions",{"_index":4045,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angularfirefunctionsmodule",{"_index":1018,"title":{},"body":{"modules/AppModule.html":{}}}],["animaciones",{"_index":3884,"title":{},"body":{"index.html":{}}}],["animación",{"_index":3199,"title":{},"body":{"components/ProfilePage.html":{}}}],["animado",{"_index":3883,"title":{},"body":{"index.html":{}}}],["animation",{"_index":3481,"title":{},"body":{"components/SplashPage.html":{}}}],["animationoptions",{"_index":3475,"title":{},"body":{"components/SplashPage.html":{}}}],["annotation",{"_index":3800,"title":{},"body":{"dependencies.html":{}}}],["anonymous",{"_index":2373,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["any):basiccrypto",{"_index":1239,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["api",{"_index":1496,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoFromApi.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/SearchPage.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["api:string",{"_index":3638,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["apikey",{"_index":1051,"title":{},"body":{"modules/AppModule.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["apis",{"_index":3921,"title":{},"body":{"index.html":{}}}],["apiurl",{"_index":1583,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["apiurl:string",{"_index":1619,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["apiurltoken",{"_index":3826,"title":{},"body":{"miscellaneous/functions.html":{}}}],["aplicaciones",{"_index":3911,"title":{},"body":{"index.html":{}}}],["aplicación",{"_index":3834,"title":{},"body":{"index.html":{}}}],["app",{"_index":27,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IUserBaseMapping.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/TranslationService.html":{},"index.html":{}}}],["app's",{"_index":2154,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["app.component",{"_index":971,"title":{},"body":{"modules/AppModule.html":{}}}],["app.component.html",{"_index":676,"title":{},"body":{"components/AppComponent.html":{}}}],["app.component.scss",{"_index":675,"title":{},"body":{"components/AppComponent.html":{}}}],["app=this.firebasemainservice.getfirebaseapp",{"_index":2361,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["appbackgraphbutton",{"_index":1351,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{}}}],["appbackgraphbutton]'},{'name",{"_index":221,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["appcolorpercent",{"_index":223,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["appcolorpercent:number=0",{"_index":1662,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["appcomponent",{"_index":187,"title":{"components/AppComponent.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["appended",{"_index":3578,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["appending",{"_index":514,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["appends",{"_index":3111,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["appid",{"_index":1061,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["application",{"_index":14,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"components/LoginPage.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["application/json",{"_index":3522,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["applies",{"_index":1657,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["appmodule",{"_index":959,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appname",{"_index":2184,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["apppages",{"_index":677,"title":{},"body":{"components/AppComponent.html":{}}}],["appropriate",{"_index":4020,"title":{},"body":{"miscellaneous/variables.html":{}}}],["approutingmodule",{"_index":964,"title":{"modules/AppRoutingModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["approutingmodule,browseranimationsmodule",{"_index":1027,"title":{},"body":{"modules/AppModule.html":{}}}],["argu",{"_index":715,"title":{},"body":{"components/AppComponent.html":{}}}],["arial",{"_index":1951,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["array",{"_index":1188,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["arrays",{"_index":1550,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["asegura",{"_index":366,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["asegurarse",{"_index":888,"title":{},"body":{"components/AppComponent.html":{}}}],["assets/i18n",{"_index":1023,"title":{},"body":{"modules/AppModule.html":{}}}],["assets/lottie/loadinglottie.json",{"_index":3476,"title":{},"body":{"components/SplashPage.html":{}}}],["assigns",{"_index":3661,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["associate",{"_index":2697,"title":{},"body":{"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{}}}],["associated",{"_index":2186,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"components/ProfilePage.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/providedata.html":{}}}],["assumed",{"_index":2804,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["async",{"_index":452,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{}}}],["asynchronously",{"_index":2349,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["ath",{"_index":1519,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["ath_change_percentage",{"_index":1520,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["ath_date",{"_index":1521,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["atl",{"_index":1522,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["atl_change_percentage",{"_index":1523,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["atl_date",{"_index":1524,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["atractiva",{"_index":3888,"title":{},"body":{"index.html":{}}}],["attributes",{"_index":1112,"title":{"interfaces/Attributes.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["attributes2",{"_index":1153,"title":{"interfaces/Attributes2.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["aumenta",{"_index":929,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{}}}],["autenticación",{"_index":3931,"title":{},"body":{"index.html":{}}}],["autentication.service",{"_index":995,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["autentication.service.ts",{"_index":1374,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{}}}],["autentication.service.ts:101",{"_index":1407,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:109",{"_index":1434,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:118",{"_index":1428,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:127",{"_index":1399,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:135",{"_index":1440,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:14",{"_index":3506,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["autentication.service.ts:143",{"_index":1410,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:19",{"_index":1386,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:23",{"_index":1445,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:31",{"_index":1422,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:39",{"_index":1414,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:46",{"_index":1411,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:55",{"_index":1391,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:61",{"_index":1418,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:71",{"_index":1437,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:78",{"_index":1387,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:86",{"_index":1431,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication.service.ts:93",{"_index":1426,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["autentication_url_token",{"_index":978,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth",{"_index":50,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/LoginResponse.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["auth.currentuser",{"_index":2301,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["auth.signout",{"_index":2305,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["auth:iauthenticationservice",{"_index":774,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"injectables/FirebaseMediaService.html":{},"components/SplashPage.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/variables.html":{}}}],["auth_mapping_token",{"_index":979,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["auth_token",{"_index":63,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authdomain",{"_index":1053,"title":{},"body":{"modules/AppModule.html":{}}}],["authenticated",{"_index":522,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["authenticated:behaviorsubject",{"_index":1458,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["authenticating",{"_index":1591,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["authentication",{"_index":21,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/CryptoBaseRepository.html":{},"components/CryptoviewPage.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/cryptosxd.html":{},"miscellaneous/functions.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["authentication.interface",{"_index":2247,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IStrapiAuthentication.html":{},"injectables/StrapiAutenticationService.html":{}}}],["authentication.interface.ts",{"_index":2674,"title":{},"body":{"interfaces/IFirebaseAuthentication.html":{},"interfaces/IStrapiAuthentication.html":{},"coverage.html":{}}}],["authentication.service.ts",{"_index":2209,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"coverage.html":{}}}],["authentication.service.ts:20",{"_index":2218,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["authenticationlogin",{"_index":1416,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["authenticationlogin.email",{"_index":2289,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["authenticationlogin.password",{"_index":2290,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["authenticationmappingservicefactory",{"_index":996,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticationregister",{"_index":1424,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["authenticationregister.email",{"_index":2270,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["authenticationregister.password",{"_index":2271,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["authenticationservicefactory",{"_index":997,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["authenticationurl",{"_index":4068,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticationurl:\"http://localhost:1337/api/users/me",{"_index":4078,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authenticationurltoken",{"_index":2215,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["authenticationurltoken:string",{"_index":2263,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["authguard",{"_index":1070,"title":{"guards/AuthGuard.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"coverage.html":{}}}],["authguard2",{"_index":1072,"title":{"guards/AuthGuard2.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/AuthGuard2.html":{},"coverage.html":{}}}],["authguardadmin",{"_index":1074,"title":{"guards/AuthGuardAdmin.html":{}},"body":{"modules/AppRoutingModule.html":{},"guards/AuthGuardAdmin.html":{},"coverage.html":{}}}],["author",{"_index":3988,"title":{},"body":{"properties.html":{}}}],["authorization",{"_index":1393,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{}}}],["authorized",{"_index":4041,"title":{},"body":{"miscellaneous/variables.html":{}}}],["authservice",{"_index":47,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["authservice:iauthenticationservice",{"_index":71,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["auto",{"_index":106,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["auto!important",{"_index":899,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["automatically",{"_index":3112,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["automática",{"_index":3943,"title":{},"body":{"index.html":{}}}],["automáticamente",{"_index":2579,"title":{},"body":{"components/HomePage.html":{}}}],["available",{"_index":318,"title":{},"body":{"components/AdminFormularyComponent.html":{},"injectables/CoinGekoRepository.html":{},"classes/StrapiMediaService.html":{},"modules.html":{}}}],["avatar",{"_index":903,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["avatar.user",{"_index":898,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["avoid",{"_index":2944,"title":{},"body":{"components/ListcontentPage.html":{},"components/RegisterPage.html":{}}}],["await",{"_index":596,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{}}}],["axis",{"_index":1963,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["añade",{"_index":1763,"title":{},"body":{"components/CryptocardComponent.html":{},"components/ProfilePage.html":{}}}],["back",{"_index":3023,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["backend",{"_index":1454,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"classes/FirebaseAuthMappingService.html":{},"components/FormularyComponent.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserStrapiService.html":{},"index.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["backend:string",{"_index":4015,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend:string,httpclient:httpclient,userapiurl:string,loginapiurl:string,registerapiurl:string,authenticationurl:string,authenticationmapping:iauthenticationmapping,firebasemainservice:ifirebasemainservice",{"_index":4024,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend:string,repository:iuserbaserepositoy,authentication:iauthenticationservice,usercsvurl:string,http:httpclient",{"_index":4051,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend_token",{"_index":980,"title":{},"body":{"modules/AppModule.html":{},"components/FormularyComponent.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["backend_token,httpclient,user_api_url_token,login_api_url_token,register_api_url_token,autentication_url_token,auth_mapping_token,firebase_main_service",{"_index":4027,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend_token,upload_api_url_token",{"_index":4038,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend_token,user_repository_token,auth_token",{"_index":4054,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backends",{"_index":4023,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backgraphbuttondirective",{"_index":220,"title":{"directives/BackgraphbuttonDirective.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["background",{"_index":634,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{}}}],["backgroundcolor",{"_index":1936,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["bar",{"_index":3408,"title":{},"body":{"components/SearchPage.html":{},"dependencies.html":{}}}],["barra",{"_index":948,"title":{},"body":{"components/AppComponent.html":{},"components/SearchPage.html":{}}}],["base",{"_index":461,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["base.interface",{"_index":2721,"title":{},"body":{"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["base.interface.ts",{"_index":2726,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"coverage.html":{}}}],["base.interface.ts:104",{"_index":2748,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:112",{"_index":2745,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:123",{"_index":2751,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:18",{"_index":2755,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:26",{"_index":2757,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:35",{"_index":2743,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:43",{"_index":2763,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:51",{"_index":2765,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:61",{"_index":2741,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:70",{"_index":2761,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:78",{"_index":2753,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:86",{"_index":2736,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.interface.ts:95",{"_index":2767,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["base.model",{"_index":664,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicUser.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/User.html":{}}}],["base64",{"_index":3144,"title":{},"body":{"components/ProfilePage.html":{}}}],["baseautenticationservice",{"_index":1371,"title":{"injectables/BaseAutenticationService.html":{}},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{}}}],["baseautenticationservice:101",{"_index":2237,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:109",{"_index":2242,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:117",{"_index":2219,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["baseautenticationservice:118",{"_index":2240,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:127",{"_index":2236,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:134",{"_index":2227,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["baseautenticationservice:135",{"_index":2244,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:143",{"_index":2238,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:23",{"_index":2245,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:33",{"_index":3507,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:41",{"_index":2229,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["baseautenticationservice:48",{"_index":3510,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:61",{"_index":3514,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:67",{"_index":3513,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:71",{"_index":2243,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:73",{"_index":2223,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["baseautenticationservice:78",{"_index":2235,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:84",{"_index":3509,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:86",{"_index":2241,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:93",{"_index":2239,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["baseautenticationservice:97",{"_index":2222,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["baseauthenticationservice",{"_index":2210,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["based",{"_index":732,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{},"injectables/TranslationService.html":{},"miscellaneous/variables.html":{}}}],["basemediaservice",{"_index":1478,"title":{"injectables/BaseMediaService.html":{}},"body":{"injectables/BaseMediaService.html":{},"injectables/FirebaseMediaService.html":{},"components/ProfilePage.html":{},"classes/StrapiMediaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["basemediaservice:45",{"_index":3577,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["basemediaservice:50",{"_index":2343,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["bases",{"_index":3940,"title":{},"body":{"index.html":{}}}],["basic",{"_index":329,"title":{},"body":{"components/AdminFormularyComponent.html":{},"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptosimplecardComponent.html":{},"interfaces/ICryptoBase.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/PricesCryptoFromApi.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["basiccrypto",{"_index":660,"title":{"interfaces/BasicCrypto.html":{}},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptosimplecardComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["basiccrypto):addcrypto",{"_index":1244,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["basiccrypto):observable",{"_index":2774,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{}}}],["basiclist",{"_index":1120,"title":{"interfaces/BasicList.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoList.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["basicryptofromapi",{"_index":1490,"title":{"interfaces/BasiCryptoFromApi.html":{}},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{},"coverage.html":{}}}],["basicuser",{"_index":297,"title":{"interfaces/BasicUser.html":{}},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["basicuseresponse",{"_index":1172,"title":{"interfaces/basicuseresponse.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["bearer",{"_index":3521,"title":{},"body":{"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{}}}],["become",{"_index":502,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CryptoviewPage.html":{}}}],["before",{"_index":2842,"title":{},"body":{"components/ListPage.html":{}}}],["behavior",{"_index":1456,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["behaviorsubject",{"_index":1443,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IUserbaseService.html":{},"components/SearchPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["behaviorsubject(false",{"_index":1444,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["beta.8",{"_index":3819,"title":{},"body":{"dependencies.html":{}}}],["between",{"_index":1751,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"classes/FirebaseAuthMappingService.html":{},"components/FormularyComponent.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IUserBaseMapping.html":{},"components/ListcryptoComponent.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserBaseRepository.html":{},"interfaces/providedata.html":{}}}],["biblioteca",{"_index":3952,"title":{},"body":{"index.html":{}}}],["bien",{"_index":934,"title":{},"body":{"components/AppComponent.html":{}}}],["black",{"_index":2025,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["blob",{"_index":581,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseMediaService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IUserbaseService.html":{},"components/ProfilePage.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["blob([response.body",{"_index":583,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["blob.type",{"_index":2369,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["blobpart",{"_index":584,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["block",{"_index":105,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["blocked",{"_index":1127,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["blocked:boolean",{"_index":3550,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["body",{"_index":1205,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["bodycreatelist",{"_index":1136,"title":{"interfaces/BodyCreateList.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["bodyupdate",{"_index":1144,"title":{"interfaces/bodyupdate.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["bold",{"_index":893,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{}}}],["boolean",{"_index":762,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptosimplecardComponent.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["bootstrap",{"_index":232,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["border",{"_index":134,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["bordercolor",{"_index":1929,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["borderwidth",{"_index":1931,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["bordes",{"_index":395,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["boris",{"_index":76,"title":{},"body":{"components/AboutPage.html":{}}}],["bottom",{"_index":98,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"injectables/SharedService.html":{}}}],["botón",{"_index":408,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{}}}],["bound",{"_index":1659,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["box",{"_index":148,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["browse",{"_index":3978,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":968,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfilePageModule.html":{},"dependencies.html":{},"modules.html":{}}}],["browser/animations",{"_index":1013,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfilePageModule.html":{}}}],["browseranimationsmodule",{"_index":1012,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfilePageModule.html":{}}}],["browsermodule",{"_index":966,"title":{},"body":{"modules/AppModule.html":{},"modules/ProfilePageModule.html":{}}}],["browsermodule,angularfirefunctionsmodule",{"_index":1025,"title":{},"body":{"modules/AppModule.html":{}}}],["btn",{"_index":895,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{}}}],["buffer",{"_index":3296,"title":{},"body":{"components/SearchPage.html":{}}}],["builder",{"_index":3131,"title":{},"body":{"components/ProfilePage.html":{}}}],["buscador",{"_index":3406,"title":{},"body":{"components/SearchPage.html":{},"index.html":{}}}],["button",{"_index":132,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"injectables/SharedService.html":{}}}],["button.selected",{"_index":2022,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["button:not(.button",{"_index":2030,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["button:nth",{"_index":3006,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["buttonmodule",{"_index":2045,"title":{},"body":{"modules/CryptoviewPageModule.html":{},"modules/ProfilePageModule.html":{}}}],["buttons",{"_index":820,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"injectables/SharedService.html":{}}}],["búsqueda",{"_index":3407,"title":{},"body":{"components/SearchPage.html":{}}}],["c.id",{"_index":1542,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["c.image",{"_index":1544,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["c.unsubscribe",{"_index":843,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["c0c0c0",{"_index":644,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["cabecera",{"_index":1797,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["call",{"_index":2846,"title":{},"body":{"components/ListPage.html":{}}}],["callback",{"_index":2099,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["callbacks",{"_index":1960,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["called",{"_index":56,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"directives/ColorpercentDirective.html":{},"components/CryptoviewPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["calls",{"_index":2858,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"miscellaneous/variables.html":{}}}],["cambia",{"_index":3195,"title":{},"body":{"components/ProfilePage.html":{}}}],["cambiar",{"_index":2026,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["campos",{"_index":404,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["canactivate",{"_index":1282,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["canactivate(route",{"_index":1289,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["canactivate:[authguard",{"_index":1076,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["canactivate:[authguard2",{"_index":1085,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["canactivate:[authguardadmin",{"_index":1106,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["cancel",{"_index":836,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"injectables/SharedService.html":{}}}],["canvas",{"_index":1857,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["canvas.getcontext('2d",{"_index":1923,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["canvas.id",{"_index":1919,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["capa",{"_index":3209,"title":{},"body":{"components/ProfilePage.html":{}}}],["capacitor",{"_index":3306,"title":{},"body":{"components/SearchPage.html":{},"dependencies.html":{},"index.html":{}}}],["capacitor.config.ts",{"_index":3689,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["capacitor/android",{"_index":3786,"title":{},"body":{"dependencies.html":{}}}],["capacitor/app",{"_index":3788,"title":{},"body":{"dependencies.html":{}}}],["capacitor/core",{"_index":3323,"title":{},"body":{"components/SearchPage.html":{},"dependencies.html":{}}}],["capacitor/haptics",{"_index":3790,"title":{},"body":{"dependencies.html":{}}}],["capacitor/keyboard",{"_index":3791,"title":{},"body":{"dependencies.html":{}}}],["capacitor/status",{"_index":3793,"title":{},"body":{"dependencies.html":{}}}],["capacitorconfig",{"_index":4056,"title":{},"body":{"miscellaneous/variables.html":{}}}],["caption",{"_index":1174,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["características",{"_index":3868,"title":{},"body":{"index.html":{}}}],["card",{"_index":146,"title":{},"body":{"components/AboutPage.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{}}}],["card:hover",{"_index":1746,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{}}}],["case",{"_index":4017,"title":{},"body":{"miscellaneous/variables.html":{}}}],["catch",{"_index":3371,"title":{},"body":{"components/SearchPage.html":{}}}],["catch((error",{"_index":2281,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["catcherror",{"_index":1310,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/StrapiAutenticationService.html":{}}}],["catcherror((err",{"_index":1316,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["catcherror((err:any",{"_index":3528,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["ccc",{"_index":952,"title":{},"body":{"components/AppComponent.html":{}}}],["cdk",{"_index":3399,"title":{},"body":{"components/SearchPage.html":{}}}],["center",{"_index":96,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["centra",{"_index":2508,"title":{},"body":{"components/FormularyComponent.html":{}}}],["centrado",{"_index":957,"title":{},"body":{"components/AppComponent.html":{},"components/SplashPage.html":{}}}],["centrar",{"_index":386,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ListformularyComponent.html":{}}}],["centrarlo",{"_index":3094,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["centre",{"_index":2515,"title":{},"body":{"components/FormularyComponent.html":{},"components/SplashPage.html":{}}}],["centro",{"_index":379,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/SplashPage.html":{}}}],["change",{"_index":713,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ProfilePage.html":{}}}],["changecurrency",{"_index":1817,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["changed",{"_index":1661,"title":{},"body":{"directives/ColorpercentDirective.html":{},"components/HomePage.html":{}}}],["changelanguage",{"_index":3062,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["changelanguage(lang",{"_index":3067,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["changes",{"_index":534,"title":{},"body":{"components/AdminPanelPage.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"directives/ColorpercentDirective.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"injectables/StrapiAutenticationService.html":{}}}],["changing",{"_index":1811,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ProfilePage.html":{}}}],["chart",{"_index":1809,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["chart(ctx",{"_index":1926,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["chart.ctx",{"_index":1977,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["chart.js",{"_index":1839,"title":{},"body":{"components/CryptoviewPage.html":{},"dependencies.html":{},"index.html":{}}}],["chart.register(...registerables",{"_index":1874,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["chart.scales['y'].bottom",{"_index":1984,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["chart.scales['y'].top",{"_index":1982,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["chart.tooltip",{"_index":1975,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["chartjs",{"_index":3798,"title":{},"body":{"dependencies.html":{}}}],["check",{"_index":3467,"title":{},"body":{"components/SplashPage.html":{}}}],["checked",{"_index":832,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["checks",{"_index":1336,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["child(1",{"_index":3007,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["child(2",{"_index":3010,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["child::after",{"_index":646,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["circular",{"_index":937,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["circulating_supply",{"_index":1516,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["class",{"_index":67,"title":{"classes/FirebaseAuthMappingService.html":{},"classes/StrapiMediaService.html":{}},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["classes",{"_index":2149,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"classes/StrapiMediaService.html":{},"overview.html":{}}}],["clean",{"_index":3235,"title":{},"body":{"components/RegisterPage.html":{}}}],["cleaned",{"_index":3484,"title":{},"body":{"components/SplashPage.html":{}}}],["cleans",{"_index":1855,"title":{},"body":{"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/SplashPage.html":{}}}],["clears",{"_index":1419,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["cleartimeout(this.inactivitytimeout",{"_index":3386,"title":{},"body":{"components/SearchPage.html":{}}}],["clic",{"_index":3969,"title":{},"body":{"index.html":{}}}],["click",{"_index":1780,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/SearchPage.html":{}}}],["click(id",{"_index":3282,"title":{},"body":{"components/SearchPage.html":{}}}],["click(id:string",{"_index":3340,"title":{},"body":{"components/SearchPage.html":{}}}],["clicking",{"_index":1784,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["client",{"_index":3828,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["close",{"_index":3452,"title":{},"body":{"injectables/SharedService.html":{}}}],["closes",{"_index":301,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["cloud",{"_index":4049,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cloudinary",{"_index":3947,"title":{},"body":{"index.html":{}}}],["cluster_aboutpagemodule",{"_index":235,"title":{},"body":{"modules/AboutPageModule.html":{},"overview.html":{}}}],["cluster_aboutpagemodule_declarations",{"_index":237,"title":{},"body":{"modules/AboutPageModule.html":{},"overview.html":{}}}],["cluster_aboutpagemodule_imports",{"_index":236,"title":{},"body":{"modules/AboutPageModule.html":{},"overview.html":{}}}],["cluster_adminpanelpagemodule",{"_index":649,"title":{},"body":{"modules/AdminPanelPageModule.html":{},"overview.html":{}}}],["cluster_adminpanelpagemodule_declarations",{"_index":651,"title":{},"body":{"modules/AdminPanelPageModule.html":{},"overview.html":{}}}],["cluster_adminpanelpagemodule_imports",{"_index":650,"title":{},"body":{"modules/AdminPanelPageModule.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":960,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_bootstrap",{"_index":961,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_declarations",{"_index":962,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":963,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_cryptoviewpagemodule",{"_index":2037,"title":{},"body":{"modules/CryptoviewPageModule.html":{},"overview.html":{}}}],["cluster_cryptoviewpagemodule_declarations",{"_index":2038,"title":{},"body":{"modules/CryptoviewPageModule.html":{},"overview.html":{}}}],["cluster_cryptoviewpagemodule_imports",{"_index":2039,"title":{},"body":{"modules/CryptoviewPageModule.html":{},"overview.html":{}}}],["cluster_homepagemodule",{"_index":2584,"title":{},"body":{"modules/HomePageModule.html":{},"overview.html":{}}}],["cluster_homepagemodule_declarations",{"_index":2586,"title":{},"body":{"modules/HomePageModule.html":{},"overview.html":{}}}],["cluster_homepagemodule_imports",{"_index":2585,"title":{},"body":{"modules/HomePageModule.html":{},"overview.html":{}}}],["cluster_listcontentpagemodule",{"_index":2977,"title":{},"body":{"modules/ListcontentPageModule.html":{},"overview.html":{}}}],["cluster_listcontentpagemodule_declarations",{"_index":2979,"title":{},"body":{"modules/ListcontentPageModule.html":{},"overview.html":{}}}],["cluster_listcontentpagemodule_imports",{"_index":2978,"title":{},"body":{"modules/ListcontentPageModule.html":{},"overview.html":{}}}],["cluster_listpagemodule",{"_index":2924,"title":{},"body":{"modules/ListPageModule.html":{},"overview.html":{}}}],["cluster_listpagemodule_declarations",{"_index":2926,"title":{},"body":{"modules/ListPageModule.html":{},"overview.html":{}}}],["cluster_listpagemodule_imports",{"_index":2925,"title":{},"body":{"modules/ListPageModule.html":{},"overview.html":{}}}],["cluster_loginpagemodule",{"_index":3097,"title":{},"body":{"modules/LoginPageModule.html":{},"overview.html":{}}}],["cluster_loginpagemodule_declarations",{"_index":3098,"title":{},"body":{"modules/LoginPageModule.html":{},"overview.html":{}}}],["cluster_loginpagemodule_imports",{"_index":3099,"title":{},"body":{"modules/LoginPageModule.html":{},"overview.html":{}}}],["cluster_profilepagemodule",{"_index":3213,"title":{},"body":{"modules/ProfilePageModule.html":{},"overview.html":{}}}],["cluster_profilepagemodule_declarations",{"_index":3214,"title":{},"body":{"modules/ProfilePageModule.html":{},"overview.html":{}}}],["cluster_profilepagemodule_imports",{"_index":3215,"title":{},"body":{"modules/ProfilePageModule.html":{},"overview.html":{}}}],["cluster_registerpagemodule",{"_index":3248,"title":{},"body":{"modules/RegisterPageModule.html":{},"overview.html":{}}}],["cluster_registerpagemodule_declarations",{"_index":3250,"title":{},"body":{"modules/RegisterPageModule.html":{},"overview.html":{}}}],["cluster_registerpagemodule_imports",{"_index":3249,"title":{},"body":{"modules/RegisterPageModule.html":{},"overview.html":{}}}],["cluster_searchpagemodule",{"_index":3415,"title":{},"body":{"modules/SearchPageModule.html":{},"overview.html":{}}}],["cluster_searchpagemodule_declarations",{"_index":3417,"title":{},"body":{"modules/SearchPageModule.html":{},"overview.html":{}}}],["cluster_searchpagemodule_imports",{"_index":3416,"title":{},"body":{"modules/SearchPageModule.html":{},"overview.html":{}}}],["cluster_sharedmodule",{"_index":3424,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_declarations",{"_index":3425,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_exports",{"_index":3427,"title":{},"body":{"modules/SharedModule.html":{},"overview.html":{}}}],["cluster_sharedmodule_imports",{"_index":3426,"title":{},"body":{"modules/SharedModule.html":{}}}],["cms",{"_index":3917,"title":{},"body":{"index.html":{}}}],["code",{"_index":734,"title":{},"body":{"components/AppComponent.html":{},"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"pipes/CurrencyPipe.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{}}}],["codes",{"_index":2054,"title":{},"body":{"pipes/CurrencyPipe.html":{}}}],["coingecko",{"_index":1495,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["coingekomapping",{"_index":1010,"title":{"injectables/CoinGekoMapping.html":{}},"body":{"modules/AppModule.html":{},"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{},"coverage.html":{}}}],["coingekorepository",{"_index":1571,"title":{"injectables/CoinGekoRepository.html":{}},"body":{"injectables/CoinGekoRepository.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["collapse",{"_index":631,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["collection",{"_index":2234,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{}}}],["coloca",{"_index":376,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/SplashPage.html":{}}}],["color",{"_index":635,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{},"injectables/SharedService.html":{}}}],["colorpercentdirective",{"_index":222,"title":{"directives/ColorpercentDirective.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["column",{"_index":143,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/SearchPage.html":{}}}],["columns",{"_index":2575,"title":{},"body":{"components/HomePage.html":{}}}],["combines",{"_index":3293,"title":{},"body":{"components/SearchPage.html":{}}}],["common",{"_index":1448,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{}}}],["common.crypto",{"_index":2008,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["common.delete",{"_index":3004,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["common.modify",{"_index":3003,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["common.no",{"_index":627,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["common.or",{"_index":2507,"title":{},"body":{"components/FormularyComponent.html":{}}}],["common.save",{"_index":363,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["common.yes",{"_index":626,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["commonmodule",{"_index":245,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{}}}],["community/speech",{"_index":3322,"title":{},"body":{"components/SearchPage.html":{},"dependencies.html":{}}}],["como",{"_index":3842,"title":{},"body":{"index.html":{}}}],["complete",{"_index":518,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{},"components/SearchPage.html":{}}}],["completing",{"_index":2220,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["component",{"_index":0,"title":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}},"body":{"components/AboutPage.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageRoutingModule.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"modules/HomePageRoutingModule.html":{},"components/ListPage.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageRoutingModule.html":{},"components/ProfilePage.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageRoutingModule.html":{},"components/SearchPage.html":{},"modules/SearchPageRoutingModule.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"coverage.html":{}}}],["component_template",{"_index":180,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["componentes",{"_index":3953,"title":{},"body":{"index.html":{}}}],["componentprops",{"_index":598,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"overview.html":{}}}],["con",{"_index":883,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["concrete",{"_index":1452,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["config",{"_index":3274,"title":{},"body":{"components/SearchPage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["configuraciones",{"_index":3916,"title":{},"body":{"index.html":{}}}],["configuration",{"_index":2317,"title":{},"body":{"injectables/FirebaseMainService.html":{},"components/SearchPage.html":{}}}],["configured",{"_index":4021,"title":{},"body":{"miscellaneous/variables.html":{}}}],["confirm",{"_index":273,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"interfaces/StrapiUser.html":{}}}],["confirm:boolean",{"_index":3549,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["confirmation",{"_index":2828,"title":{},"body":{"components/ListPage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["confirmed",{"_index":1126,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["confirms",{"_index":3020,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["connect",{"_index":1248,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["connect:[{id:parseint(id",{"_index":1250,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["connect:updatecryptoid",{"_index":1163,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cono",{"_index":3211,"title":{},"body":{"components/ProfilePage.html":{}}}],["consistencia",{"_index":410,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["console.error('canvas",{"_index":1924,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["console.error('error",{"_index":3372,"title":{},"body":{"components/SearchPage.html":{}}}],["const",{"_index":262,"title":{},"body":{"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"directives/BackgraphbuttonDirective.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageRoutingModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"modules/HomePageRoutingModule.html":{},"components/ListPage.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/LoginPage.html":{},"modules/LoginPageRoutingModule.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageRoutingModule.html":{},"components/SearchPage.html":{},"modules/SearchPageRoutingModule.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"classes/StrapiMediaService.html":{},"injectables/TranslationService.html":{}}}],["constructed",{"_index":2408,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["constructor",{"_index":35,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["constructor(auth",{"_index":684,"title":{},"body":{"components/AppComponent.html":{}}}],["constructor(authservice",{"_index":36,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["constructor(currencypipe",{"_index":1824,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["constructor(elementref",{"_index":1355,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["constructor(fbbuilder",{"_index":2437,"title":{},"body":{"components/FormularyComponent.html":{}}}],["constructor(firebaseconfig",{"_index":2315,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["constructor(httpclient",{"_index":1582,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserBaseRepository.html":{}}}],["constructor(modalcontroller",{"_index":282,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{}}}],["constructor(private",{"_index":1364,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"injectables/SharedService.html":{}}}],["constructor(repository",{"_index":1688,"title":{},"body":{"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["constructor(router",{"_index":1283,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["constructor(toastctrl",{"_index":3445,"title":{},"body":{"injectables/SharedService.html":{}}}],["constructor(translate",{"_index":2088,"title":{},"body":{"components/CustomGenderComponent.html":{},"injectables/TranslationService.html":{}}}],["constructor(uploadurl",{"_index":2339,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{}}}],["constructs",{"_index":692,"title":{},"body":{"components/AppComponent.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["construida",{"_index":3861,"title":{},"body":{"index.html":{}}}],["consulta",{"_index":3869,"title":{},"body":{"index.html":{}}}],["consultar",{"_index":3835,"title":{},"body":{"index.html":{}}}],["container",{"_index":137,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["container:hover",{"_index":3207,"title":{},"body":{"components/ProfilePage.html":{}}}],["containing",{"_index":1190,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcryptoComponent.html":{},"components/LoginPage.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["contains",{"_index":2226,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["contenedor",{"_index":936,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["contenido",{"_index":369,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"index.html":{}}}],["content",{"_index":165,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/StrapiAutenticationService.html":{}}}],["contentdisposition",{"_index":577,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["contenttype",{"_index":2368,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["context",{"_index":1925,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["contexto",{"_index":3085,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["contract",{"_index":1481,"title":{},"body":{"injectables/BaseMediaService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{}}}],["control",{"_index":290,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["controlled",{"_index":2470,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["controller",{"_index":464,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{}}}],["controls",{"_index":2446,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["controlvalueaccessor",{"_index":2064,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["conversion",{"_index":1597,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["convert",{"_index":1670,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserBaseRepository.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["converting",{"_index":2386,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["converts",{"_index":3541,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["core/directives/colorpercent.directive",{"_index":3440,"title":{},"body":{"modules/SharedModule.html":{}}}],["core/guards/auth.guard",{"_index":1071,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["core/guards/auth2.guard",{"_index":1073,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["core/guards/authadmin.guard",{"_index":1075,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["core/models/user.model",{"_index":770,"title":{},"body":{"components/AppComponent.html":{}}}],["core/pipes/currency.pipe",{"_index":3433,"title":{},"body":{"modules/SharedModule.html":{}}}],["core/pipes/percentformater.pipe",{"_index":3434,"title":{},"body":{"modules/SharedModule.html":{}}}],["core/repositories/factory",{"_index":1003,"title":{},"body":{"modules/AppModule.html":{}}}],["core/repositories/impl/crypto/coingekomapping.service",{"_index":1011,"title":{},"body":{"modules/AppModule.html":{}}}],["core/repositories/repository.tokens",{"_index":764,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/LoginPage.html":{}}}],["core/services/impl/authentication/strapi",{"_index":994,"title":{},"body":{"modules/AppModule.html":{}}}],["core/services/impl/crypto/cryptogeko.service",{"_index":1009,"title":{},"body":{"modules/AppModule.html":{}}}],["core/services/impl/firebasemain.service",{"_index":1017,"title":{},"body":{"modules/AppModule.html":{}}}],["core/services/impl/translation.service",{"_index":766,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{}}}],["core/services/impl/user/base",{"_index":768,"title":{},"body":{"components/AppComponent.html":{}}}],["core/services/interfaces/authentication/authentication.interface",{"_index":765,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{}}}],["correctamente",{"_index":387,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ListformularyComponent.html":{}}}],["correo",{"_index":946,"title":{},"body":{"components/AppComponent.html":{}}}],["corresponding",{"_index":2052,"title":{},"body":{"pipes/CurrencyPipe.html":{}}}],["cover",{"_index":112,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/ProfilePage.html":{}}}],["coverage",{"_index":3686,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["cpifp",{"_index":78,"title":{},"body":{"components/AboutPage.html":{}}}],["crea",{"_index":3875,"title":{},"body":{"index.html":{}}}],["creación",{"_index":3909,"title":{},"body":{"index.html":{}}}],["creadas",{"_index":3886,"title":{},"body":{"index.html":{}}}],["crear",{"_index":3850,"title":{},"body":{"index.html":{}}}],["create",{"_index":1206,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"components/RegisterPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["create/update",{"_index":2826,"title":{},"body":{"components/ListPage.html":{}}}],["createat",{"_index":3584,"title":{},"body":{"interfaces/StrapiUser.html":{}}}],["createat:string",{"_index":3551,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["createchart",{"_index":1818,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["createcoingekorepository",{"_index":3702,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createcoingekorepository(httpclient",{"_index":3825,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createcoingekorepository(httpclient,apiurltoken,mapping,cryptoken",{"_index":4033,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdat",{"_index":1114,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["createlist",{"_index":2832,"title":{},"body":{"components/ListPage.html":{}}}],["createlistremote",{"_index":1134,"title":{"interfaces/createListRemote.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["createlistupdate",{"_index":1142,"title":{"interfaces/CreateListUpdate.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["creates",{"_index":40,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"classes/StrapiMediaService.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["createstrapirepository",{"_index":3703,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["createstrapirepository(httpclient",{"_index":3830,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createstrapirepository(httpclient,apiurltoken,mapping",{"_index":4046,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtranslateloader",{"_index":1031,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["createtranslateloader(http",{"_index":1021,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/functions.html":{}}}],["createuserwithemailandpassword",{"_index":2249,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["createuserwithemailandpassword(auth",{"_index":2269,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["createwavechart",{"_index":1819,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["createwavechart(list",{"_index":1841,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["creating",{"_index":294,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{}}}],["creation",{"_index":1210,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["credentials",{"_index":2620,"title":{},"body":{"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["criptomoneda",{"_index":1793,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["criptomonedas",{"_index":3836,"title":{},"body":{"index.html":{}}}],["crud",{"_index":462,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["cruduser.errors.emailrequired",{"_index":2500,"title":{},"body":{"components/FormularyComponent.html":{}}}],["cruduser.errors.genderselected",{"_index":361,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["cruduser.errors.passwordminlenght",{"_index":2503,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{}}}],["cruduser.errors.passwordrequired",{"_index":2502,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{}}}],["cruduser.errors.usernamerequired",{"_index":360,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["cruduser.errors.validedmail",{"_index":2501,"title":{},"body":{"components/FormularyComponent.html":{}}}],["cruduser.login.login",{"_index":2505,"title":{},"body":{"components/FormularyComponent.html":{},"components/LoginPage.html":{}}}],["cruduser.register.female",{"_index":623,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["cruduser.register.male",{"_index":621,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["cruduser.register.other",{"_index":624,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["cruduser.register.register",{"_index":2504,"title":{},"body":{"components/FormularyComponent.html":{},"components/RegisterPage.html":{}}}],["cruduser.update.password",{"_index":3186,"title":{},"body":{"components/ProfilePage.html":{}}}],["cruduser.update.updatedata",{"_index":2506,"title":{},"body":{"components/FormularyComponent.html":{}}}],["crypto",{"_index":1131,"title":{"interfaces/Crypto.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["crypto!:advancedcrypto",{"_index":1736,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["crypto!:basiccrypto",{"_index":1786,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["crypto.currentprice",{"_index":1741,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{}}}],["crypto.model",{"_index":1557,"title":{},"body":{"interfaces/BasicList.html":{},"interfaces/CryptoList.html":{}}}],["crypto.name",{"_index":1739,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{}}}],["crypto.pricechangepercent24horus",{"_index":1743,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["crypto.symbol",{"_index":1791,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["crypto.symbol.touppercase",{"_index":1740,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{}}}],["crypto:advancedcrypto",{"_index":2553,"title":{},"body":{"components/HomePage.html":{}}}],["crypto:advancedcrypto={id:'',name:'',symbol:'',image:'',currentprice:0",{"_index":1877,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["crypto=this.list.filter(c=>c.id==idcryptoxd)[0",{"_index":3359,"title":{},"body":{"components/SearchPage.html":{}}}],["crypto_api_url_token",{"_index":982,"title":{},"body":{"modules/AppModule.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["crypto_mapping_token",{"_index":983,"title":{},"body":{"modules/AppModule.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["crypto_repository_token",{"_index":1700,"title":{},"body":{"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["crypto_service_token",{"_index":984,"title":{},"body":{"modules/AppModule.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/SearchPage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoapiurl:\"https://api.coingecko.com/api/v3",{"_index":4072,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cryptobase.interface",{"_index":2644,"title":{},"body":{"interfaces/ICoinGeko.html":{}}}],["cryptobase.repository",{"_index":1615,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["cryptobase.service",{"_index":1719,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["cryptobaserepository",{"_index":1579,"title":{"injectables/CryptoBaseRepository.html":{}},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"coverage.html":{}}}],["cryptobaserepository:49",{"_index":1600,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["cryptobaserepository:64",{"_index":1594,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["cryptobaserepository:77",{"_index":1603,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["cryptobaserepository:93",{"_index":1608,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["cryptobaseservice",{"_index":1685,"title":{"injectables/CryptoBaseService.html":{}},"body":{"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"coverage.html":{}}}],["cryptobaseservice:27",{"_index":1718,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["cryptobaseservice:38",{"_index":1716,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["cryptobaseservice:48",{"_index":1715,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["cryptobaseservice:56",{"_index":1717,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["cryptocard",{"_index":1725,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["cryptocard'},{'name",{"_index":190,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["cryptocard.component.html",{"_index":1727,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["cryptocard.component.scss",{"_index":1726,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["cryptocard/cryptocard.component",{"_index":3429,"title":{},"body":{"modules/SharedModule.html":{}}}],["cryptocardcomponent",{"_index":189,"title":{"components/CryptocardComponent.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["cryptocardcomponent,cryptosimplecardcomponent,listcryptocomponent,listformularycomponent,formularycomponent,customgendercomponent,adminformularycomponent",{"_index":3441,"title":{},"body":{"modules/SharedModule.html":{}}}],["cryptocoingeko",{"_index":1707,"title":{"interfaces/CryptoCoinGeko.html":{}},"body":{"interfaces/CryptoCoinGeko.html":{},"injectables/CryptoGeko.html":{},"coverage.html":{}}}],["cryptocurrencies",{"_index":1605,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/HomePage.html":{},"components/SearchPage.html":{}}}],["cryptocurrency",{"_index":1501,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/IUserbaseService.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"interfaces/PricesCryptoFromApi.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cryptofactoryservice",{"_index":998,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptofromapi",{"_index":1504,"title":{"interfaces/CryptoFromApi.html":{}},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{},"coverage.html":{}}}],["cryptogeko",{"_index":1008,"title":{"injectables/CryptoGeko.html":{}},"body":{"modules/AppModule.html":{},"injectables/CryptoGeko.html":{},"coverage.html":{}}}],["cryptographprice",{"_index":670,"title":{"interfaces/CryptoGraphPrice.html":{}},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoGraphPrice.html":{},"components/CryptoviewPage.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/PricesCryptoFromApi.html":{},"coverage.html":{}}}],["cryptoid",{"_index":1132,"title":{"interfaces/cryptoid.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cryptoid:data.id",{"_index":1245,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cryptoid:string",{"_index":1157,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cryptoken",{"_index":3827,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["cryptolist",{"_index":1121,"title":{"interfaces/CryptoList.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoList.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cryptolist,iduser:string",{"_index":3645,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["cryptos",{"_index":1130,"title":{"interfaces/cryptos.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoList.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/Image.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cryptos:basiccrypto",{"_index":1558,"title":{},"body":{"interfaces/BasicList.html":{},"interfaces/CryptoList.html":{}}}],["cryptos:c.cryptos.map(x",{"_index":1199,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cryptos:c.cryptos?.map(x",{"_index":2422,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["cryptos:cryptos",{"_index":1148,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cryptos:updatecryptos",{"_index":1161,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["cryptos?:cryptosxd",{"_index":2419,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["cryptoservice",{"_index":1827,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/SearchPage.html":{}}}],["cryptoservice:icryptobaseservice",{"_index":1883,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/SearchPage.html":{}}}],["cryptosimplecard",{"_index":1767,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["cryptosimplecard'},{'name",{"_index":192,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["cryptosimplecard.component.html",{"_index":1769,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["cryptosimplecard.component.scss",{"_index":1768,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["cryptosimplecard/cryptosimplecard.component",{"_index":3430,"title":{},"body":{"modules/SharedModule.html":{}}}],["cryptosimplecardcomponent",{"_index":191,"title":{"components/CryptosimplecardComponent.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["cryptosxd",{"_index":2420,"title":{"interfaces/cryptosxd.html":{}},"body":{"injectables/FirebaseUserMapping.html":{},"coverage.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["cryptotoken",{"_index":1584,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["cryptotoken:string",{"_index":1623,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["cryptotoken_token",{"_index":981,"title":{},"body":{"modules/AppModule.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["cryptoview",{"_index":1813,"title":{},"body":{"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{}}}],["cryptoview'},{'name",{"_index":194,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["cryptoview.1d",{"_index":2009,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["cryptoview.1m",{"_index":2011,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["cryptoview.1w",{"_index":2010,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["cryptoview.1y",{"_index":2012,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["cryptoview.page",{"_index":2044,"title":{},"body":{"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{}}}],["cryptoview.page.html",{"_index":1815,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["cryptoview.page.scss",{"_index":1814,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["cryptoview/:id/:currency",{"_index":1098,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["cryptoviewpage",{"_index":193,"title":{"components/CryptoviewPage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["cryptoviewpagemodule",{"_index":2036,"title":{"modules/CryptoviewPageModule.html":{}},"body":{"modules/CryptoviewPageModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptoviewpageroutingmodule",{"_index":2040,"title":{"modules/CryptoviewPageRoutingModule.html":{}},"body":{"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["cryptowizzard",{"_index":844,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["cryptoxd",{"_index":1156,"title":{"interfaces/cryptoxd.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["css",{"_index":1641,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["cssclass",{"_index":2904,"title":{},"body":{"components/ListPage.html":{}}}],["csv",{"_index":438,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/variables.html":{}}}],["ctx",{"_index":1922,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ctx.beginpath",{"_index":1986,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ctx.lineto(x",{"_index":1988,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ctx.linewidth",{"_index":1989,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ctx.moveto(x",{"_index":1987,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ctx.restore",{"_index":1993,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ctx.save",{"_index":1985,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ctx.stroke",{"_index":1992,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ctx.strokestyle",{"_index":1990,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["cuadrada",{"_index":907,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["cuadrícula",{"_index":2582,"title":{},"body":{"components/HomePage.html":{}}}],["cuando",{"_index":3197,"title":{},"body":{"components/ProfilePage.html":{}}}],["cubra",{"_index":3200,"title":{},"body":{"components/ProfilePage.html":{}}}],["currency",{"_index":1402,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"injectables/StrapiAutenticationService.html":{}}}],["currency!:string",{"_index":1737,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["currency.dollar",{"_index":3188,"title":{},"body":{"components/ProfilePage.html":{}}}],["currency.euro",{"_index":3187,"title":{},"body":{"components/ProfilePage.html":{}}}],["currency.libra",{"_index":3189,"title":{},"body":{"components/ProfilePage.html":{}}}],["currency:string",{"_index":2949,"title":{},"body":{"components/ListcontentPage.html":{}}}],["currency:string=\"eur",{"_index":1876,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["currency:string=\"usd",{"_index":2556,"title":{},"body":{"components/HomePage.html":{}}}],["currency=this.authservice.getcurrency",{"_index":3333,"title":{},"body":{"components/SearchPage.html":{}}}],["currencypipe",{"_index":1742,"title":{"pipes/CurrencyPipe.html":{}},"body":{"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"pipes/CurrencyPipe.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["currencypipe:currencypipe",{"_index":1880,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["currencysymbol",{"_index":1997,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["currencysymbol=this.currencypipe.transform(this.currency",{"_index":1996,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["current",{"_index":505,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseService.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["current_price",{"_index":1505,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["currently",{"_index":1412,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/LoginResponse.html":{},"components/RegisterPage.html":{},"injectables/SharedService.html":{},"injectables/StrapiAutenticationService.html":{},"interfaces/StsTokenManager.html":{},"injectables/TranslationService.html":{},"interfaces/providedata.html":{}}}],["currentprice",{"_index":661,"title":{},"body":{"interfaces/AdvancedCrypto.html":{}}}],["currentprice:c.current_price",{"_index":1546,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["currentprice:number",{"_index":668,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasicCrypto.html":{},"interfaces/CryptoGraphPrice.html":{}}}],["cursor",{"_index":1748,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{}}}],["custom",{"_index":196,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{}}}],["customgendercomponent",{"_index":195,"title":{"components/CustomGenderComponent.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["custommetadata",{"_index":2370,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["círculo",{"_index":913,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["código",{"_index":3918,"title":{},"body":{"index.html":{}}}],["d7d8da",{"_index":854,"title":{},"body":{"components/AppComponent.html":{}}}],["d9534f",{"_index":1801,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["danger",{"_index":3453,"title":{},"body":{"injectables/SharedService.html":{}}}],["darle",{"_index":916,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["dashboards",{"_index":1650,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["data",{"_index":307,"title":{"interfaces/Data.html":{}},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["data.favoritelists.map(c",{"_index":1195,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["data.gender",{"_index":604,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["data.isadmin).subscribe",{"_index":605,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["data.username",{"_index":603,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["data2",{"_index":1152,"title":{"interfaces/Data2.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["data:basiclist",{"_index":3043,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["data:bodycreatelist",{"_index":1135,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["data:bodyupdate",{"_index":1143,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["data:cryptoxd",{"_index":1155,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["data:datadelete",{"_index":1146,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["data:updatecryptodata",{"_index":1159,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["data=await",{"_index":3346,"title":{},"body":{"components/SearchPage.html":{}}}],["database",{"_index":1237,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseMainService.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["datadelete",{"_index":1147,"title":{"interfaces/datadelete.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["datasets",{"_index":1928,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["date",{"_index":1551,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoGraphPrice.html":{},"components/CryptoviewPage.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["date(c",{"_index":1892,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["date.getfullyear",{"_index":1898,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["date.now()}_${math.random().tostring(36).substring(2",{"_index":2364,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["date:c[0",{"_index":1555,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["date:number",{"_index":672,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasicCrypto.html":{},"interfaces/CryptoGraphPrice.html":{}}}],["date:string",{"_index":1913,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["date=list2.map(c",{"_index":1891,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["datos",{"_index":3925,"title":{},"body":{"index.html":{}}}],["day",{"_index":1840,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["days",{"_index":1607,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["days:number=1",{"_index":1878,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["db",{"_index":2311,"title":{},"body":{"injectables/FirebaseMainService.html":{},"components/SearchPage.html":{}}}],["ddd",{"_index":3192,"title":{},"body":{"components/ProfilePage.html":{}}}],["de",{"_index":167,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"index.html":{}}}],["decimal",{"_index":3108,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["declarations",{"_index":231,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["declare",{"_index":3324,"title":{},"body":{"components/SearchPage.html":{}}}],["decoration",{"_index":2574,"title":{},"body":{"components/HomePage.html":{}}}],["decorators",{"_index":2459,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListPage.html":{}}}],["default",{"_index":515,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"injectables/BaseAutenticationService.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":1404,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"pipes/CurrencyPipe.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["defined",{"_index":38,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["defines",{"_index":4040,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defining",{"_index":2595,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{}}}],["deformarse",{"_index":3202,"title":{},"body":{"components/ProfilePage.html":{}}}],["del",{"_index":894,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"index.html":{}}}],["delay",{"_index":3469,"title":{},"body":{"components/SplashPage.html":{}}}],["delete",{"_index":477,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseAutenticationService.html":{},"components/CryptosimplecardComponent.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["delete:boolean=false",{"_index":1787,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["deleteaccount",{"_index":3125,"title":{},"body":{"components/ProfilePage.html":{}}}],["deletecrypto",{"_index":1770,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListcontentPage.html":{}}}],["deletecrypto(event",{"_index":1778,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListcontentPage.html":{}}}],["deletecrypto(event:string",{"_index":2956,"title":{},"body":{"components/ListcontentPage.html":{}}}],["deletecryptofromfavoritelist",{"_index":1145,"title":{"interfaces/deletecryptofromfavoritelist.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["deletecryptofromlist",{"_index":2395,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{}}}],["deletecryptofromlist(data",{"_index":1226,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["deletecryptofromlist(data:any):any",{"_index":2711,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["deletelist",{"_index":2833,"title":{},"body":{"components/ListPage.html":{}}}],["deletelist(id",{"_index":2844,"title":{},"body":{"components/ListPage.html":{}}}],["deletelist(id:string",{"_index":2888,"title":{},"body":{"components/ListPage.html":{}}}],["deletes",{"_index":474,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["deletethis",{"_index":2988,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["deletethis(event",{"_index":2993,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["deletetoken",{"_index":1375,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["deletetoken():void",{"_index":2637,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["deleteuser",{"_index":444,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["deleteuser(token",{"_index":1390,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["deleteuser(user!!).then",{"_index":2302,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["deleteuser(userid",{"_index":472,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["deleting",{"_index":436,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["deletion",{"_index":1397,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["dentro",{"_index":935,"title":{},"body":{"components/AppComponent.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{}}}],["dependencies",{"_index":230,"title":{"dependencies.html":{}},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"injectables/CryptoBaseRepository.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["dependency",{"_index":3228,"title":{},"body":{"components/RegisterPage.html":{}}}],["depending",{"_index":2450,"title":{},"body":{"components/FormularyComponent.html":{},"miscellaneous/variables.html":{}}}],["depends",{"_index":1694,"title":{},"body":{"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{}}}],["deps",{"_index":1032,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["deps:[backend_token,httpclient,crypto_api_url_token,crypto_mapping_token,cryptotoken_token",{"_index":4031,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deps:[backend_token,httpclient,user_api_url_token,user_mapping_token,firebase_main_service",{"_index":4043,"title":{},"body":{"miscellaneous/variables.html":{}}}],["derecha",{"_index":2917,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["desarrollada",{"_index":3899,"title":{},"body":{"index.html":{}}}],["desarrollo",{"_index":3910,"title":{},"body":{"index.html":{}}}],["descripción",{"_index":2972,"title":{},"body":{"components/ListcontentPage.html":{}}}],["description",{"_index":11,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoList.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"properties.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["description():abstractcontrol",{"_index":3049,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["description:[\"\",[validators.required,validators.minlength(6",{"_index":3039,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["description:c.description",{"_index":1198,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["description:data.data.attributes.description",{"_index":1219,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["description:data.description",{"_index":1213,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["description:string",{"_index":1138,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoList.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["description:this.formulary.controls['description'].value",{"_index":3046,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["desde",{"_index":2915,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["desired",{"_index":2661,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{}}}],["desplazable",{"_index":2524,"title":{},"body":{"components/FormularyComponent.html":{}}}],["desplegada",{"_index":3936,"title":{},"body":{"index.html":{}}}],["despliegue",{"_index":3937,"title":{},"body":{"index.html":{}}}],["destacado",{"_index":2971,"title":{},"body":{"components/ListcontentPage.html":{}}}],["destroy",{"_index":2943,"title":{},"body":{"components/ListcontentPage.html":{}}}],["destroyed",{"_index":1859,"title":{},"body":{"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["destruction",{"_index":3473,"title":{},"body":{"components/SplashPage.html":{}}}],["detail",{"_index":3325,"title":{},"body":{"components/SearchPage.html":{}}}],["detailed",{"_index":1500,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptoviewPage.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["details",{"_index":1850,"title":{},"body":{"components/CryptoviewPage.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["detect",{"_index":2092,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["detected",{"_index":3308,"title":{},"body":{"components/SearchPage.html":{}}}],["determine",{"_index":1656,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["determines",{"_index":1293,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["dialog",{"_index":292,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/HomePage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["dialogs",{"_index":714,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{}}}],["diferentes",{"_index":3840,"title":{},"body":{"index.html":{}}}],["different",{"_index":2535,"title":{},"body":{"components/HomePage.html":{}}}],["dinámicos",{"_index":3881,"title":{},"body":{"index.html":{}}}],["directamente",{"_index":3967,"title":{},"body":{"index.html":{}}}],["direction",{"_index":142,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/SearchPage.html":{}}}],["directivas",{"_index":3959,"title":{},"body":{"index.html":{}}}],["directive",{"_index":178,"title":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{}}}],["directives",{"_index":219,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"overview.html":{}}}],["disabled",{"_index":2109,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["disables",{"_index":2448,"title":{},"body":{"components/FormularyComponent.html":{}}}],["disconnect",{"_index":1225,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["disconnect:[{id:data",{"_index":1228,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["disconnect:cryptoid",{"_index":1149,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["diseño",{"_index":393,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["dismiss/close",{"_index":293,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["dismissal",{"_index":2856,"title":{},"body":{"components/ListPage.html":{}}}],["dismissed",{"_index":306,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/ListformularyComponent.html":{}}}],["dismisses",{"_index":3022,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["dismissmodal",{"_index":274,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["display",{"_index":104,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{}}}],["displaycolors",{"_index":1956,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["displayed",{"_index":1835,"title":{},"body":{"components/CryptoviewPage.html":{},"pipes/PercentformaterPipe.html":{},"components/SplashPage.html":{}}}],["displaying",{"_index":1844,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{}}}],["displayname",{"_index":2188,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["displays",{"_index":1733,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"injectables/SharedService.html":{}}}],["disponible",{"_index":890,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"index.html":{}}}],["disposition",{"_index":495,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["dispositivos",{"_index":419,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{},"index.html":{}}}],["distancia",{"_index":2914,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["divider",{"_index":951,"title":{},"body":{"components/AppComponent.html":{}}}],["doc",{"_index":2252,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{}}}],["document",{"_index":2346,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["document.createelement('canvas",{"_index":1918,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["document.getelementbyid('chartcontainer')?.appendchild(canvas",{"_index":1921,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["document.getelementbyid('wavechart",{"_index":1916,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["document.getelementbyid('wavechart')).remove",{"_index":1915,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["documentation",{"_index":3687,"title":{},"body":{"coverage.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["domain",{"_index":2691,"title":{},"body":{"interfaces/IUserBaseMapping.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["down",{"_index":2547,"title":{},"body":{"components/HomePage.html":{}}}],["download",{"_index":2347,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["downloadcsv",{"_index":445,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["downloading",{"_index":437,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["downloads",{"_index":479,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["downloadurl",{"_index":2376,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["driven",{"_index":2066,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["dropdown",{"_index":3437,"title":{},"body":{"modules/SharedModule.html":{}}}],["dropdownmodule",{"_index":3438,"title":{},"body":{"modules/SharedModule.html":{}}}],["duration",{"_index":3456,"title":{},"body":{"injectables/SharedService.html":{}}}],["during",{"_index":2472,"title":{},"body":{"components/FormularyComponent.html":{},"components/SplashPage.html":{}}}],["dynamic",{"_index":772,"title":{},"body":{"components/AppComponent.html":{},"dependencies.html":{}}}],["dynamically",{"_index":1637,"title":{},"body":{"directives/ColorpercentDirective.html":{},"components/CustomGenderComponent.html":{},"miscellaneous/variables.html":{}}}],["dólar",{"_index":3844,"title":{},"body":{"index.html":{}}}],["e",{"_index":885,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{},"index.html":{}}}],["e.g",{"_index":717,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard2.html":{},"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"pipes/CurrencyPipe.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"pipes/PercentformaterPipe.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{}}}],["e.target.result",{"_index":3176,"title":{},"body":{"components/ProfilePage.html":{}}}],["e53935",{"_index":2035,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["each",{"_index":731,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["ease",{"_index":919,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["edit",{"_index":487,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ProfilePage.html":{}}}],["editing",{"_index":328,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{}}}],["edituser",{"_index":446,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["edituser(user",{"_index":484,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["ef8fd",{"_index":1056,"title":{},"body":{"modules/AppModule.html":{}}}],["ef8fd.firebaseapp.com",{"_index":1054,"title":{},"body":{"modules/AppModule.html":{}}}],["ef8fd.firebasestorage.app",{"_index":1058,"title":{},"body":{"modules/AppModule.html":{}}}],["efecto",{"_index":925,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{}}}],["ejemplo",{"_index":3975,"title":{},"body":{"index.html":{}}}],["el",{"_index":368,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"index.html":{}}}],["elegir",{"_index":3893,"title":{},"body":{"index.html":{}}}],["element",{"_index":177,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["element.hidden=false",{"_index":810,"title":{},"body":{"components/AppComponent.html":{}}}],["element.hidden=true",{"_index":812,"title":{},"body":{"components/AppComponent.html":{}}}],["element=this.apppages.find(c=>c.url==\"/admin",{"_index":808,"title":{},"body":{"components/AppComponent.html":{}}}],["elementos",{"_index":2580,"title":{},"body":{"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["elementref",{"_index":1356,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["elementref:elementref",{"_index":1365,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["elimina",{"_index":1761,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["eliminar",{"_index":1800,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{}}}],["ellas",{"_index":3860,"title":{},"body":{"index.html":{}}}],["eloy",{"_index":81,"title":{},"body":{"components/AboutPage.html":{}}}],["email",{"_index":330,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/Image.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["email:authenticationregister.email",{"_index":2278,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["email:data.email",{"_index":1267,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["email:data.email,gender:data.gender,username:data.username",{"_index":1257,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["email:response.email",{"_index":2199,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["email:response.user.email",{"_index":3563,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["email:string",{"_index":1167,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/Meta.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["email:string=this.formulary.get(\"email\")?.value",{"_index":2489,"title":{},"body":{"components/FormularyComponent.html":{}}}],["emailpattern",{"_index":336,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["emailverified",{"_index":2178,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["emits",{"_index":1488,"title":{},"body":{"injectables/BaseMediaService.html":{},"components/CryptosimplecardComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/FormularyComponent.html":{},"components/ListcryptoComponent.html":{}}}],["emitter",{"_index":2436,"title":{},"body":{"components/FormularyComponent.html":{}}}],["emitter:eventemitter",{"_index":2473,"title":{},"body":{"components/FormularyComponent.html":{}}}],["emitting",{"_index":1396,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["emmiter",{"_index":1772,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["emmiter:eventemitter=new",{"_index":1788,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["empty",{"_index":1409,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/ListformularyComponent.html":{},"injectables/StrapiAutenticationService.html":{}}}],["en",{"_index":378,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/TranslationService.html":{},"index.html":{}}}],["enabled",{"_index":1955,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["enabled/disabled",{"_index":2108,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["encabezado",{"_index":880,"title":{},"body":{"components/AppComponent.html":{}}}],["encima",{"_index":2921,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["end",{"_index":174,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["endpoint",{"_index":2342,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["endpoints",{"_index":4048,"title":{},"body":{"miscellaneous/variables.html":{}}}],["engine",{"_index":3303,"title":{},"body":{"components/SearchPage.html":{}}}],["enlace",{"_index":3962,"title":{},"body":{"index.html":{}}}],["enlaces",{"_index":168,"title":{},"body":{"components/AboutPage.html":{}}}],["enter",{"_index":501,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["entre",{"_index":402,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/HomePage.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{}}}],["environment",{"_index":1014,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["err",{"_index":589,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["error",{"_index":483,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuard.html":{},"injectables/CryptoBaseRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/LoginResponse.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["error(\"backend",{"_index":4018,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error(\"method",{"_index":1684,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserBaseRepository.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{}}}],["error(\"there",{"_index":2299,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["error('method",{"_index":2383,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["error.code",{"_index":2283,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["error.message",{"_index":2285,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["error12=err.error.error.message",{"_index":3529,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["error:(err",{"_index":608,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["errorcode",{"_index":2282,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["errormessage",{"_index":2284,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["es",{"_index":735,"title":{},"body":{"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/TranslationService.html":{},"index.html":{}}}],["escalabilidad",{"_index":3935,"title":{},"body":{"index.html":{}}}],["escalar",{"_index":3941,"title":{},"body":{"index.html":{}}}],["escritorio",{"_index":3904,"title":{},"body":{"index.html":{}}}],["espaciado",{"_index":170,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["espacio",{"_index":418,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/HomePage.html":{},"components/ListformularyComponent.html":{},"components/RegisterPage.html":{}}}],["español",{"_index":3891,"title":{},"body":{"index.html":{}}}],["est",{"_index":889,"title":{},"body":{"components/AppComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"index.html":{}}}],["establece",{"_index":3084,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["esterlina",{"_index":3846,"title":{},"body":{"index.html":{}}}],["estilizado",{"_index":3409,"title":{},"body":{"components/SearchPage.html":{}}}],["estilo",{"_index":943,"title":{},"body":{"components/AppComponent.html":{}}}],["estilos",{"_index":139,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{}}}],["esto",{"_index":2514,"title":{},"body":{"components/FormularyComponent.html":{},"components/SplashPage.html":{}}}],["etc",{"_index":2601,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{},"miscellaneous/variables.html":{}}}],["eur",{"_index":1602,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/HomePage.html":{},"index.html":{}}}],["euro",{"_index":3843,"title":{},"body":{"index.html":{}}}],["event",{"_index":500,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CryptosimplecardComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["event.results[0].isfinal",{"_index":3384,"title":{},"body":{"components/SearchPage.html":{}}}],["event.results[0][0].transcript",{"_index":3383,"title":{},"body":{"components/SearchPage.html":{}}}],["event.stoppropagation",{"_index":1789,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{}}}],["event.target.files[0",{"_index":3170,"title":{},"body":{"components/ProfilePage.html":{}}}],["eventemiter",{"_index":2989,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["eventemitter",{"_index":1776,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/ListcryptoComponent.html":{}}}],["events",{"_index":2069,"title":{},"body":{"components/CustomGenderComponent.html":{},"components/ListPage.html":{},"components/ListcryptoComponent.html":{}}}],["evita",{"_index":2520,"title":{},"body":{"components/FormularyComponent.html":{}}}],["evolución",{"_index":3880,"title":{},"body":{"index.html":{}}}],["example",{"_index":1327,"title":{},"body":{"guards/AuthGuard2.html":{}}}],["excluding",{"_index":521,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["existing",{"_index":317,"title":{},"body":{"components/AdminFormularyComponent.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["exists",{"_index":3660,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["experiencia",{"_index":3887,"title":{},"body":{"index.html":{}}}],["expirationtime",{"_index":2195,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["export",{"_index":66,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["exports",{"_index":234,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"modules/SplashPageRoutingModule.html":{},"overview.html":{}}}],["exports:[cryptocardcomponent,cryptosimplecardcomponent,listcryptocomponent,listformularycomponent,formularycomponent,customgendercomponent,adminformularycomponent",{"_index":3442,"title":{},"body":{"modules/SharedModule.html":{}}}],["ext",{"_index":1177,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["extending",{"_index":1678,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["extends",{"_index":659,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicUser.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoCoinGeko.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"interfaces/User.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["external",{"_index":3281,"title":{},"body":{"components/SearchPage.html":{}}}],["extra",{"_index":2788,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["extracted",{"_index":497,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["extractfilename",{"_index":447,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["extractfilename(header",{"_index":489,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["extracts",{"_index":493,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["eye",{"_index":2456,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["f53d3d",{"_index":3011,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["facilita",{"_index":3938,"title":{},"body":{"index.html":{}}}],["facilitando",{"_index":3857,"title":{},"body":{"index.html":{}}}],["factory",{"_index":4019,"title":{},"body":{"miscellaneous/variables.html":{}}}],["factoryprovider",{"_index":4014,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fails",{"_index":1301,"title":{},"body":{"guards/AuthGuard.html":{}}}],["fallback",{"_index":3307,"title":{},"body":{"components/SearchPage.html":{}}}],["false",{"_index":1347,"title":{},"body":{"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/SearchPage.html":{},"injectables/StrapiAutenticationService.html":{},"miscellaneous/variables.html":{}}}],["family",{"_index":1950,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["favorite",{"_index":1191,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["favoritelist",{"_index":1129,"title":{"interfaces/Favoritelist.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["favoritelists",{"_index":1128,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["fb",{"_index":284,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["fb:formbuilder",{"_index":333,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["fbbuilder",{"_index":2439,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["fecha",{"_index":1965,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["female",{"_index":622,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CustomGenderComponent.html":{}}}],["fetch",{"_index":695,"title":{},"body":{"components/AppComponent.html":{},"injectables/CoinGekoRepository.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["fetched",{"_index":3659,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["fetches",{"_index":504,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"components/CryptoviewPage.html":{},"components/SearchPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["fetching",{"_index":1575,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"components/HomePage.html":{},"injectables/UserFirebaseService.html":{}}}],["ffcc00",{"_index":3008,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["fff",{"_index":846,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["ffffff",{"_index":1944,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["field",{"_index":2104,"title":{},"body":{"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["fields",{"_index":1252,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["fijar",{"_index":2913,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"dependencies.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["file.type.startswith('image",{"_index":3171,"title":{},"body":{"components/ProfilePage.html":{}}}],["filename",{"_index":494,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/FirebaseMediaService.html":{}}}],["filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/.exec(header",{"_index":593,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["filereader",{"_index":3173,"title":{},"body":{"components/ProfilePage.html":{}}}],["files",{"_index":2338,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{}}}],["fill",{"_index":1933,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["filled",{"_index":3027,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["fills",{"_index":314,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["filter=data.data.filter(c=>c.attributes.cryptoid==cryptoid",{"_index":1234,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["filter[0].id",{"_index":1236,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["filterfinal",{"_index":3265,"title":{},"body":{"components/SearchPage.html":{}}}],["filterfinal(event",{"_index":3284,"title":{},"body":{"components/SearchPage.html":{}}}],["filtering",{"_index":1229,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/ICryptoBase.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["filters",{"_index":2671,"title":{},"body":{"interfaces/ICryptobaseService.html":{},"components/SearchPage.html":{}}}],["financial",{"_index":1648,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["find",{"_index":1230,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["find=this.options.find(c=>c.value==obj",{"_index":2140,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["find=this.options.find(c=>c.value==this.selectedoption.value",{"_index":2133,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["findbyid",{"_index":1580,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["findbyid(id",{"_index":1592,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["findbyid(id:string,currency:string):observable",{"_index":2655,"title":{},"body":{"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["findcryptobyid",{"_index":2731,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["findcryptobyid(idcrypto",{"_index":2796,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["findcryptobyid(idcrypto:string):observable",{"_index":2820,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["findcryptobyid(token",{"_index":2752,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["findcryptobyid(token:string,idcrypto",{"_index":3642,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["findcryptobyid(token:string,idcrypto:string):observable",{"_index":2776,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["findcryptobyidresponse",{"_index":2396,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{}}}],["findcryptobyidresponse(data",{"_index":1232,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["findcryptobyidresponse(data:any,idcrypto:string):any",{"_index":2712,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["finds",{"_index":1595,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListcontentPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["firebase",{"_index":2152,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserFirebaseService.html":{},"interfaces/cryptosxd.html":{},"dependencies.html":{},"index.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["firebase/app",{"_index":2327,"title":{},"body":{"injectables/FirebaseMainService.html":{},"interfaces/IFirebaseMainService.html":{}}}],["firebase/auth",{"_index":1344,"title":{},"body":{"guards/AuthGuardAdmin.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{}}}],["firebase/firestore",{"_index":2254,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IFirebaseMainService.html":{}}}],["firebase/functions",{"_index":2328,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["firebase/storage",{"_index":2356,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["firebase_collection_token",{"_index":3729,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_config_token",{"_index":985,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseMainService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebase_main_service",{"_index":986,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseapp",{"_index":2321,"title":{},"body":{"injectables/FirebaseMainService.html":{},"interfaces/IFirebaseMainService.html":{}}}],["firebaseauthenticationservice",{"_index":2208,"title":{"injectables/FirebaseAuthenticationService.html":{}},"body":{"injectables/FirebaseAuthenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseauthenticationservice(httpclient,userapiurl,loginapiurl,registerapiurl,authenticationurl,authenticationmapping,firebasemainservice",{"_index":4026,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebaseauthmappingservice",{"_index":2148,"title":{"classes/FirebaseAuthMappingService.html":{}},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["firebaseconfig",{"_index":2318,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["firebasemainservice",{"_index":1016,"title":{"injectables/FirebaseMainService.html":{}},"body":{"modules/AppModule.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"coverage.html":{}}}],["firebasemainservice:ifirebasemainservice",{"_index":2360,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["firebasemediaservice",{"_index":2336,"title":{"injectables/FirebaseMediaService.html":{}},"body":{"injectables/FirebaseMediaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebasemediaservice(upload,auth,http,firebasemainservice",{"_index":4037,"title":{},"body":{"miscellaneous/variables.html":{}}}],["firebaseservice",{"_index":2216,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["firebaseservice:ifirebasemainservice",{"_index":2267,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["firebaseusermapping",{"_index":2384,"title":{"injectables/FirebaseUserMapping.html":{}},"body":{"injectables/FirebaseUserMapping.html":{},"coverage.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["firebaseuserrepository",{"_index":3711,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["firebaseuserrepository(httpclient,apiurltoken,mapping,firebasemainservice,functions",{"_index":4047,"title":{},"body":{"miscellaneous/variables.html":{}}}],["fired",{"_index":2567,"title":{},"body":{"components/HomePage.html":{}}}],["firestore",{"_index":2230,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IFirebaseMainService.html":{},"index.html":{}}}],["firestore:firestore=this.firebaseservice.getfirestore",{"_index":2275,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["firestore=this.firebasemainservice.getfirestore",{"_index":2378,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["first",{"_index":507,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{}}}],["fit",{"_index":111,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/HomePage.html":{},"components/ProfilePage.html":{}}}],["fixed",{"_index":2912,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["flag",{"_index":1337,"title":{},"body":{"guards/AuthGuardAdmin.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["flex",{"_index":141,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["fluida",{"_index":3898,"title":{},"body":{"index.html":{}}}],["fn",{"_index":2100,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["fondo",{"_index":2023,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["font",{"_index":115,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["footer",{"_index":407,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{}}}],["form",{"_index":296,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["forma",{"_index":3942,"title":{},"body":{"index.html":{}}}],["format",{"_index":1693,"title":{},"body":{"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"pipes/PercentformaterPipe.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["formateo",{"_index":3961,"title":{},"body":{"index.html":{}}}],["formats",{"_index":1175,"title":{"interfaces/Formats.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["formatted",{"_index":1209,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["formatting",{"_index":3113,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["formattooltiplabel",{"_index":1820,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["formattooltiplabel(tooltipitem",{"_index":1845,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["formbuilder",{"_index":285,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["formdata",{"_index":3579,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["formdata.append('files",{"_index":3581,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["formgroup",{"_index":319,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["forms",{"_index":2067,"title":{},"body":{"components/CustomGenderComponent.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{}}}],["formsmodule",{"_index":247,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{}}}],["formulario",{"_index":377,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["formulary",{"_index":268,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["formulary'},{'name",{"_index":184,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["formulary.component",{"_index":550,"title":{},"body":{"components/AdminPanelPage.html":{},"modules/SharedModule.html":{}}}],["formulary.component.html",{"_index":270,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["formulary.component.scss",{"_index":269,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["formulary.component.ts",{"_index":267,"title":{},"body":{"components/AdminFormularyComponent.html":{},"coverage.html":{}}}],["formulary.component.ts:15",{"_index":298,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary.component.ts:16",{"_index":286,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary.component.ts:32",{"_index":316,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary.component.ts:39",{"_index":308,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary.component.ts:46",{"_index":310,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary.component.ts:65",{"_index":299,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary.component.ts:78",{"_index":321,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary.component.ts:85",{"_index":324,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary.component.ts:92",{"_index":326,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["formulary/admin",{"_index":266,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["formulary/formulary.component",{"_index":3435,"title":{},"body":{"modules/SharedModule.html":{}}}],["formularycomponent",{"_index":198,"title":{"components/FormularyComponent.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["formularypassword",{"_index":3123,"title":{},"body":{"components/ProfilePage.html":{}}}],["forwardref",{"_index":2073,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["found",{"_index":498,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["framework",{"_index":3907,"title":{},"body":{"index.html":{},"properties.html":{}}}],["frontend",{"_index":2156,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["full",{"_index":1083,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["fully_diluted_valuation",{"_index":1508,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["funcionalidad",{"_index":3849,"title":{},"body":{"index.html":{}}}],["funciones",{"_index":3932,"title":{},"body":{"index.html":{}}}],["function",{"_index":1020,"title":{},"body":{"modules/AppModule.html":{},"components/CustomGenderComponent.html":{},"coverage.html":{}}}],["functionality",{"_index":3242,"title":{},"body":{"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["functions",{"_index":469,"title":{"miscellaneous/functions.html":{}},"body":{"components/AdminPanelPage.html":{},"injectables/FirebaseMainService.html":{},"interfaces/IFirebaseMainService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["fácil",{"_index":3954,"title":{},"body":{"index.html":{}}}],["g",{"_index":1064,"title":{},"body":{"modules/AppModule.html":{}}}],["gap",{"_index":144,"title":{},"body":{"components/AboutPage.html":{},"components/HomePage.html":{},"components/SearchPage.html":{}}}],["garantizando",{"_index":3900,"title":{},"body":{"index.html":{}}}],["gbp",{"_index":2003,"title":{},"body":{"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/HomePage.html":{},"index.html":{}}}],["gender",{"_index":280,"title":{},"body":{"components/AdminFormularyComponent.html":{},"interfaces/BasicUser.html":{},"components/CustomGenderComponent.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayLoad.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateuser.html":{}}}],["gender'},{'name",{"_index":197,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["gender.component",{"_index":3436,"title":{},"body":{"modules/SharedModule.html":{}}}],["gender.component.html",{"_index":2076,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.scss",{"_index":2075,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts",{"_index":2060,"title":{},"body":{"components/CustomGenderComponent.html":{},"coverage.html":{}}}],["gender.component.ts:103",{"_index":2094,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:111",{"_index":2090,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:26",{"_index":2118,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:27",{"_index":2119,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:28",{"_index":2116,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:29",{"_index":2089,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:35",{"_index":2126,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:44",{"_index":2091,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:52",{"_index":2127,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:57",{"_index":2110,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:69",{"_index":2113,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:78",{"_index":2098,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:86",{"_index":2103,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender.component.ts:94",{"_index":2107,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["gender/custom",{"_index":2059,"title":{},"body":{"components/CustomGenderComponent.html":{},"modules/SharedModule.html":{},"coverage.html":{}}}],["gender:\"male",{"_index":2202,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["gender:(this.formulary.controls['gender'].value).value",{"_index":352,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["gender:['',[validators.required",{"_index":345,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["gender:any=this.formulary.get(\"gender\")?.value",{"_index":2491,"title":{},"body":{"components/FormularyComponent.html":{}}}],["gender:authenticationregister.gender",{"_index":2279,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["gender:data.gender",{"_index":1265,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["gender:gender",{"_index":2206,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{}}}],["gender:response.gender",{"_index":3568,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["gender:response.user.gender",{"_index":3560,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["gender:string",{"_index":1170,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/Meta.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["general",{"_index":4029,"title":{},"body":{"miscellaneous/variables.html":{}}}],["generales",{"_index":140,"title":{},"body":{"components/AboutPage.html":{}}}],["generar",{"_index":3958,"title":{},"body":{"index.html":{}}}],["generates",{"_index":3576,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["generic",{"_index":1711,"title":{},"body":{"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{}}}],["gestionar",{"_index":3915,"title":{},"body":{"index.html":{}}}],["gestión",{"_index":3939,"title":{},"body":{"index.html":{}}}],["getalllist",{"_index":1124,"title":{"interfaces/GetAllList.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["getalllist(data",{"_index":1567,"title":{},"body":{"injectables/CoinGekoMapping.html":{},"interfaces/ICryptoBaseMapping.html":{}}}],["getalllist(data:any):basiccrypto",{"_index":1548,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["getallpaginated",{"_index":1565,"title":{},"body":{"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{}}}],["getallpaginated(data",{"_index":1540,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["getallpaginated(data:any):any",{"_index":2665,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{}}}],["getallpaginated(page",{"_index":1598,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["getallpaginated(page:number,pagesize:number,currency:string):observable",{"_index":2654,"title":{},"body":{"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["getallresponse",{"_index":1151,"title":{"interfaces/getallresponse.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["getallresponse,cryptoid:string",{"_index":1233,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["getallsimple",{"_index":1581,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["getallsimple():observable",{"_index":2656,"title":{},"body":{"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["getauth",{"_index":2248,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{}}}],["getbasicuser",{"_index":2397,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["getbasicuser():observable",{"_index":2823,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["getbasicuser(data",{"_index":2411,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["getbasicuser(data:any):basicuser",{"_index":1263,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["getbasicuser(data:any,name?:string,gender?:string,image?:string,isadmin?:boolean):any",{"_index":2717,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["getbasicuser(token",{"_index":2754,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["getbasicuser(token:string,id:string):observable",{"_index":2768,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["getbehaviouruser",{"_index":2782,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["getbehaviouruser():observable",{"_index":2824,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["getcryptobyid",{"_index":3266,"title":{},"body":{"components/SearchPage.html":{}}}],["getcryptobyid(idcrypto",{"_index":3286,"title":{},"body":{"components/SearchPage.html":{}}}],["getcryptobyid(idcrypto:string):promise",{"_index":3352,"title":{},"body":{"components/SearchPage.html":{}}}],["getcurrency",{"_index":1377,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["getcurrency():string",{"_index":2639,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["getcurrentlanguage",{"_index":3602,"title":{},"body":{"injectables/TranslationService.html":{}}}],["getdata",{"_index":2834,"title":{},"body":{"components/ListPage.html":{}}}],["getdata(event",{"_index":2848,"title":{},"body":{"components/ListPage.html":{}}}],["getdatacrypto",{"_index":1821,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["getdescription",{"_index":3032,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["getdownloadurl",{"_index":2355,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["getdownloadurl(uploadtask.ref",{"_index":2377,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["getemail",{"_index":2462,"title":{},"body":{"components/FormularyComponent.html":{}}}],["getfirebaseapp",{"_index":2312,"title":{},"body":{"injectables/FirebaseMainService.html":{},"interfaces/IFirebaseMainService.html":{}}}],["getfirebaseapp():firebaseapp",{"_index":2680,"title":{},"body":{"interfaces/IFirebaseMainService.html":{}}}],["getfirestore",{"_index":2313,"title":{},"body":{"injectables/FirebaseMainService.html":{},"interfaces/IFirebaseMainService.html":{}}}],["getfirestore():firestore",{"_index":2679,"title":{},"body":{"interfaces/IFirebaseMainService.html":{}}}],["getfirestore(this.app",{"_index":2333,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["getfunctions",{"_index":2314,"title":{},"body":{"injectables/FirebaseMainService.html":{},"interfaces/IFirebaseMainService.html":{}}}],["getfunctions():any",{"_index":2681,"title":{},"body":{"interfaces/IFirebaseMainService.html":{}}}],["getfunctions(this.app",{"_index":2335,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["getgender",{"_index":323,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["getheaders",{"_index":3573,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["getid",{"_index":1378,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["getid():string",{"_index":1470,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"interfaces/IAuthenticationService.html":{}}}],["getisadmin",{"_index":325,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["getlistfromuser",{"_index":2398,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["getlistfromuser(data",{"_index":1194,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["getlistfromuser(data:any,id?:string):cryptolist",{"_index":2707,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["getlistfromuser(id",{"_index":2801,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["getlistfromuser(id?:string):observable",{"_index":2814,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["getlistfromuser(token",{"_index":2756,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["getlistfromuser(token:string,id?:string):observable",{"_index":2769,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["getpassword",{"_index":2464,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{}}}],["getpricelist",{"_index":1566,"title":{},"body":{"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{}}}],["getpricelist(data",{"_index":1552,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["getpricelist(data:any):cryptographprice",{"_index":2666,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{}}}],["getpricelist(id",{"_index":1606,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["getpricelist(id:string,currency:string,days:string):observable",{"_index":2657,"title":{},"body":{"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["gets",{"_index":2758,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["getstorage",{"_index":2352,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["getter",{"_index":322,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["getting",{"_index":3832,"title":{"index.html":{}},"body":{}}],["gettitle",{"_index":3029,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["gettoken",{"_index":1379,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["gettoken():string",{"_index":2640,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["getuser",{"_index":1298,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["getuser():observable",{"_index":2633,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["getusername",{"_index":320,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["getuserresponse",{"_index":2157,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"injectables/StrapiAuthMappingService.html":{}}}],["getuserresponse(response",{"_index":2160,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["getuserresponse(response:any,token:string):any",{"_index":2610,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["getuserresponse(response:strapiuser,token:string):user",{"_index":3566,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["getuserscsv",{"_index":2783,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["given",{"_index":1697,"title":{},"body":{"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptobaseService.html":{}}}],["global",{"_index":693,"title":{},"body":{"components/AppComponent.html":{}}}],["google",{"_index":3927,"title":{},"body":{"index.html":{}}}],["grandes",{"_index":421,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ListformularyComponent.html":{}}}],["granted",{"_index":1281,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{}}}],["graph",{"_index":3979,"title":{},"body":{"modules.html":{}}}],["graphql",{"_index":3923,"title":{},"body":{"index.html":{}}}],["gray",{"_index":1755,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["green!important",{"_index":1758,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["grid",{"_index":1968,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["gráfica",{"_index":3974,"title":{},"body":{"index.html":{}}}],["gráficos",{"_index":3864,"title":{},"body":{"index.html":{}}}],["guard",{"_index":1271,"title":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"coverage.html":{}}}],["guarda",{"_index":3876,"title":{},"body":{"index.html":{}}}],["guardar",{"_index":3853,"title":{},"body":{"index.html":{}}}],["guards",{"_index":1272,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"overview.html":{}}}],["h3",{"_index":119,"title":{},"body":{"components/AboutPage.html":{}}}],["hace",{"_index":908,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["hacer",{"_index":2970,"title":{},"body":{"components/ListcontentPage.html":{},"components/ProfilePage.html":{}}}],["hacerla",{"_index":931,"title":{},"body":{"components/AppComponent.html":{}}}],["haciendo",{"_index":3968,"title":{},"body":{"index.html":{}}}],["handle",{"_index":1687,"title":{},"body":{"injectables/CryptoBaseService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["handled",{"_index":2348,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"interfaces/ICryptoBase.html":{}}}],["handler",{"_index":526,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["handlers",{"_index":2996,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["handles",{"_index":711,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["handling",{"_index":702,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"injectables/TranslationService.html":{},"miscellaneous/variables.html":{}}}],["hardlist",{"_index":3258,"title":{},"body":{"components/SearchPage.html":{}}}],["hardlist:basiccrypto",{"_index":3331,"title":{},"body":{"components/SearchPage.html":{}}}],["hash",{"_index":1176,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["header",{"_index":157,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["header:this.translate.instant(\"common.closesession",{"_index":819,"title":{},"body":{"components/AppComponent.html":{}}}],["header:this.translate.instant(\"profile.deleteaccountquestion",{"_index":3166,"title":{},"body":{"components/ProfilePage.html":{}}}],["headers",{"_index":3520,"title":{},"body":{"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{}}}],["height",{"_index":109,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["helper",{"_index":1832,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["helpers",{"_index":3275,"title":{},"body":{"components/SearchPage.html":{}}}],["hidden",{"_index":155,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ProfilePage.html":{}}}],["hideshowpassword",{"_index":2434,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["high_24h",{"_index":1510,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["hijos",{"_index":3087,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["historical",{"_index":1527,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["history",{"_index":1549,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["holding",{"_index":3672,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["home",{"_index":738,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard2.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"components/SplashPage.html":{},"index.html":{}}}],["home',hidden:false",{"_index":740,"title":{},"body":{"components/AppComponent.html":{}}}],["home'},{'name",{"_index":200,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["home.home",{"_index":2570,"title":{},"body":{"components/HomePage.html":{}}}],["home.page",{"_index":2590,"title":{},"body":{"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{}}}],["home.page.html",{"_index":2529,"title":{},"body":{"components/HomePage.html":{}}}],["home.page.scss",{"_index":2528,"title":{},"body":{"components/HomePage.html":{}}}],["homepage",{"_index":199,"title":{"components/HomePage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{},"properties.html":{}}}],["homepagemodule",{"_index":2583,"title":{"modules/HomePageModule.html":{}},"body":{"modules/HomePageModule.html":{},"modules.html":{},"overview.html":{}}}],["homepageroutingmodule",{"_index":2587,"title":{"modules/HomePageRoutingModule.html":{}},"body":{"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["hook",{"_index":55,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["horizontal",{"_index":382,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/SplashPage.html":{}}}],["horizontalmente",{"_index":954,"title":{},"body":{"components/AppComponent.html":{},"components/FormularyComponent.html":{}}}],["host",{"_index":1653,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["hosting",{"_index":3934,"title":{},"body":{"index.html":{}}}],["hours",{"_index":1899,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["hover",{"_index":1795,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ProfilePage.html":{}}}],["html",{"_index":176,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["htmlcanvaselement",{"_index":1917,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["htmlioninfinitescrollelement",{"_index":509,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["http",{"_index":1576,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IUserbaseService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["http:httpclient",{"_index":3678,"title":{},"body":{"injectables/UserFirebaseService.html":{}}}],["http:httpclient,firebasemainservice:ifirebasemainservice",{"_index":4035,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpclient",{"_index":973,"title":{},"body":{"modules/AppModule.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["httpclient,firebase_main_service",{"_index":4039,"title":{},"body":{"miscellaneous/variables.html":{}}}],["httpclient:httpclient",{"_index":1617,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{}}}],["httpresponse",{"_index":542,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/IUserbaseService.html":{}}}],["https://ionicframework.com",{"_index":3987,"title":{},"body":{"properties.html":{}}}],["https://tasks",{"_index":4062,"title":{},"body":{"miscellaneous/variables.html":{}}}],["i18n",{"_index":1831,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["iauthenticationmapping",{"_index":2155,"title":{"interfaces/IAuthenticationMapping.html":{}},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/providedata.html":{}}}],["iauthenticationservice",{"_index":37,"title":{"interfaces/IAuthenticationService.html":{}},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IStrapiAuthentication.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{}}}],["icoingeko",{"_index":1713,"title":{"interfaces/ICoinGeko.html":{}},"body":{"injectables/CryptoGeko.html":{},"interfaces/ICoinGeko.html":{},"coverage.html":{}}}],["icon",{"_index":739,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{}}}],["icono",{"_index":1803,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["icryptobase",{"_index":1675,"title":{"interfaces/ICryptoBase.html":{}},"body":{"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"coverage.html":{}}}],["icryptobasemapping",{"_index":1498,"title":{"interfaces/ICryptoBaseMapping.html":{}},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/PricesCryptoFromApi.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["icryptobaseservice",{"_index":1698,"title":{"interfaces/ICryptobaseService.html":{}},"body":{"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"interfaces/ICryptobaseService.html":{},"components/SearchPage.html":{},"coverage.html":{}}}],["id",{"_index":475,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoList.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["id:\"\"+data.id",{"_index":1266,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["id:\"\"+response.id",{"_index":3567,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["id:\"\"+response.user.id",{"_index":3561,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["id:\"\"+x.cryptoid",{"_index":1200,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["id:\"\",email:\"\",username:\"\",img:\"\",gender:'',isadmin:false",{"_index":3153,"title":{},"body":{"components/ProfilePage.html":{}}}],["id:\"\",username:\"\",email:\"\",img:\"\",gender:'',isadmin:false",{"_index":760,"title":{},"body":{"components/AppComponent.html":{}}}],["id:'',email:'',username:'',img:'',gender:'',isadmin:false",{"_index":536,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["id:'',name:'',symbol:'',image:'',currentprice:0",{"_index":1863,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["id:(this.list)?this.list.id:0",{"_index":3044,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["id:c.id",{"_index":1196,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["id:data.data.attributes.cryptoid",{"_index":1240,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["id:data.data.id",{"_index":1220,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["id:data.id",{"_index":2425,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["id:data.uid",{"_index":2427,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["id:number",{"_index":1165,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["id:response.uid",{"_index":2198,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["id:string",{"_index":1150,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoList.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["id:x.id",{"_index":2423,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["idcrypto",{"_index":2409,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/SearchPage.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["idcrypto:number",{"_index":2957,"title":{},"body":{"components/ListcontentPage.html":{}}}],["idcryptoxd",{"_index":3279,"title":{},"body":{"components/SearchPage.html":{}}}],["identifier",{"_index":1432,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"components/ListcryptoComponent.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"coverage.html":{}}}],["identifier:payload.email",{"_index":3555,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["identifier:string",{"_index":3553,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["idfinal=await",{"_index":3343,"title":{},"body":{"components/SearchPage.html":{}}}],["idioma",{"_index":3895,"title":{},"body":{"index.html":{}}}],["idlist",{"_index":2740,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/SearchPage.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["idlist:string",{"_index":3327,"title":{},"body":{"components/SearchPage.html":{}}}],["iduser",{"_index":1208,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["iduser:string",{"_index":2781,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{}}}],["if(argu==\"/language",{"_index":827,"title":{},"body":{"components/AppComponent.html":{}}}],["if(argu==\"/logout",{"_index":816,"title":{},"body":{"components/AppComponent.html":{}}}],["if(capacitor.isnativeplatform",{"_index":3361,"title":{},"body":{"components/SearchPage.html":{}}}],["if(data!=this.currency",{"_index":2004,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["if(data.email!=undefined",{"_index":1255,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["if(data.image!=null",{"_index":1261,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["if(data.image!=undefined",{"_index":1264,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["if(data.password!=undefined",{"_index":1258,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["if(element",{"_index":809,"title":{},"body":{"components/AppComponent.html":{}}}],["if(event.type==\"delete",{"_index":2897,"title":{},"body":{"components/ListPage.html":{}}}],["if(event.type==\"update",{"_index":2895,"title":{},"body":{"components/ListPage.html":{}}}],["if(filter.length>=1",{"_index":1235,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["if(idfinal",{"_index":3345,"title":{},"body":{"components/SearchPage.html":{}}}],["if(this.appcolorpercent",{"_index":1663,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["if(this.authservice.getcurrency()!=this.currency",{"_index":2561,"title":{},"body":{"components/HomePage.html":{}}}],["if(this.days",{"_index":1903,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["if(this.idlist",{"_index":3341,"title":{},"body":{"components/SearchPage.html":{}}}],["if(this.type==\"login",{"_index":2480,"title":{},"body":{"components/FormularyComponent.html":{}}}],["if(this.type==\"register",{"_index":2476,"title":{},"body":{"components/FormularyComponent.html":{}}}],["if(this.type==\"update",{"_index":2481,"title":{},"body":{"components/FormularyComponent.html":{}}}],["if(this.typebackend==\"firebase",{"_index":2482,"title":{},"body":{"components/FormularyComponent.html":{}}}],["if(this.updateorcreate=='create",{"_index":3037,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["if(this.updateorcreate=='update",{"_index":3040,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["if(type==\"create",{"_index":2877,"title":{},"body":{"components/ListPage.html":{}}}],["if(type==\"update",{"_index":2882,"title":{},"body":{"components/ListPage.html":{}}}],["if(user",{"_index":2363,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["if(valor==\"login",{"_index":3492,"title":{},"body":{"components/SplashPage.html":{}}}],["if(value",{"_index":2959,"title":{},"body":{"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["if(value.isadmin",{"_index":807,"title":{},"body":{"components/AppComponent.html":{}}}],["if(value.isadmin==false",{"_index":811,"title":{},"body":{"components/AppComponent.html":{}}}],["ifirebaseauthentication",{"_index":2211,"title":{"interfaces/IFirebaseAuthentication.html":{}},"body":{"injectables/FirebaseAuthenticationService.html":{},"interfaces/IFirebaseAuthentication.html":{},"coverage.html":{}}}],["ifirebasemainservice",{"_index":2217,"title":{"interfaces/IFirebaseMainService.html":{}},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IFirebaseMainService.html":{},"coverage.html":{}}}],["ifirebaseservice",{"_index":2682,"title":{"interfaces/IFirebaseService.html":{}},"body":{"interfaces/IFirebaseService.html":{},"injectables/UserFirebaseService.html":{},"coverage.html":{}}}],["image",{"_index":101,"title":{"interfaces/Image.html":{}},"body":{"components/AboutPage.html":{},"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["image:any",{"_index":1171,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["image:data.image",{"_index":1262,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["image:downloadurl",{"_index":2380,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["image:string",{"_index":667,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasicCrypto.html":{},"interfaces/CryptoGraphPrice.html":{}}}],["imagemodule",{"_index":3221,"title":{},"body":{"modules/ProfilePageModule.html":{}}}],["imagen",{"_index":896,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/ProfilePage.html":{}}}],["imagenes",{"_index":3971,"title":{},"body":{"index.html":{}}}],["img",{"_index":133,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["img:data.image.url",{"_index":1269,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["img:hover",{"_index":927,"title":{},"body":{"components/AppComponent.html":{}}}],["img:image",{"_index":2428,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["img:string",{"_index":1562,"title":{},"body":{"interfaces/BasicUser.html":{},"interfaces/User.html":{}}}],["implement",{"_index":1453,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["implementation",{"_index":1574,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"classes/StrapiMediaService.html":{},"miscellaneous/variables.html":{}}}],["implementations",{"_index":4022,"title":{},"body":{"miscellaneous/variables.html":{}}}],["implemented",{"_index":1394,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CryptoBaseRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserBaseRepository.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["implementing",{"_index":1447,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CryptoGeko.html":{}}}],["implements",{"_index":23,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["import",{"_index":60,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["import('./pages/general/about/about.module').then",{"_index":1104,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/general/admin",{"_index":1107,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/general/cryptoview/cryptoview.module').then",{"_index":1099,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/general/home/home.module').then",{"_index":1078,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/general/list/list.module').then",{"_index":1096,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/general/listcontent/listcontent.module').then",{"_index":1102,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/general/profile/profile.module').then",{"_index":1094,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/general/search/search.module').then",{"_index":1092,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/start/login/login.module').then",{"_index":1086,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('./pages/start/register/register.module').then",{"_index":1089,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["import('lottie",{"_index":1035,"title":{},"body":{"modules/AppModule.html":{}}}],["important",{"_index":2518,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["imports",{"_index":243,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{}}}],["imágenes",{"_index":3949,"title":{},"body":{"index.html":{}}}],["inactivitytimeout",{"_index":3259,"title":{},"body":{"components/SearchPage.html":{}}}],["inactivitytimeout:any",{"_index":3380,"title":{},"body":{"components/SearchPage.html":{}}}],["include",{"_index":3669,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["includes",{"_index":3075,"title":{},"body":{"components/LoginPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{}}}],["including",{"_index":432,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuardAdmin.html":{},"interfaces/IAuthenticationMapping.html":{},"components/ProfilePage.html":{},"classes/StrapiMediaService.html":{}}}],["index",{"_index":32,"title":{"index.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Model.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["index=this.list.cryptos.findindex(c=>c.id==event",{"_index":2962,"title":{},"body":{"components/ListcontentPage.html":{}}}],["index=this.lists.findindex(c=>c.id==id",{"_index":2891,"title":{},"body":{"components/ListPage.html":{}}}],["indicate",{"_index":1681,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["indicating",{"_index":1309,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{},"directives/ColorpercentDirective.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["indicator",{"_index":2702,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["inferior",{"_index":911,"title":{},"body":{"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{}}}],["infinite",{"_index":512,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["información",{"_index":938,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{}}}],["information",{"_index":726,"title":{},"body":{"components/AppComponent.html":{},"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{}}}],["information',hidden:false",{"_index":751,"title":{},"body":{"components/AppComponent.html":{}}}],["inglés",{"_index":3890,"title":{},"body":{"index.html":{}}}],["inherited",{"_index":1593,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["inicializateformulary",{"_index":275,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["init",{"_index":3267,"title":{},"body":{"components/SearchPage.html":{}}}],["initial",{"_index":1838,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["initialization",{"_index":15,"title":{},"body":{"components/AboutPage.html":{},"injectables/FirebaseMainService.html":{},"components/HomePage.html":{},"components/ListformularyComponent.html":{},"components/SplashPage.html":{}}}],["initialize",{"_index":3272,"title":{},"body":{"components/SearchPage.html":{}}}],["initializeapp",{"_index":2326,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["initializeapp(firebaseconfig",{"_index":2331,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["initialized",{"_index":2320,"title":{},"body":{"injectables/FirebaseMainService.html":{},"interfaces/IFirebaseMainService.html":{}}}],["initializes",{"_index":311,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseMainService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/TranslationService.html":{}}}],["initializing",{"_index":2308,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["initsubscriptions",{"_index":3464,"title":{},"body":{"components/SplashPage.html":{}}}],["inittranslate",{"_index":3603,"title":{},"body":{"injectables/TranslationService.html":{}}}],["inject",{"_index":61,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["inject(autentication_url_token",{"_index":2262,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["inject(auth_mapping_token",{"_index":2264,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["inject(auth_token",{"_index":69,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"classes/StrapiMediaService.html":{}}}],["inject(backend_token",{"_index":2460,"title":{},"body":{"components/FormularyComponent.html":{}}}],["inject(crypto_api_url_token",{"_index":1618,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["inject(crypto_mapping_token",{"_index":1620,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["inject(crypto_service_token",{"_index":1882,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/SearchPage.html":{}}}],["inject(cryptotoken_token",{"_index":1622,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["inject(firebase_config_token",{"_index":2329,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["inject(firebase_main_service",{"_index":2266,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["inject(login_api_url_token",{"_index":2258,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["inject(register_api_url_token",{"_index":2260,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["inject(upload_api_url_token",{"_index":2358,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{}}}],["inject(user_api_url_token",{"_index":2256,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserBaseRepository.html":{}}}],["inject(user_csv_url_token",{"_index":3676,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["inject(user_mapping_token",{"_index":3639,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["inject(user_service_token",{"_index":552,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuardAdmin.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["injectable",{"_index":1117,"title":{"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"injectables/SharedService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["injectables",{"_index":1372,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"injectables/SharedService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"overview.html":{}}}],["injected",{"_index":1586,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseMediaService.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"classes/StrapiMediaService.html":{},"miscellaneous/variables.html":{}}}],["injecting",{"_index":3065,"title":{},"body":{"components/LoginPage.html":{}}}],["injection",{"_index":3229,"title":{},"body":{"components/RegisterPage.html":{}}}],["injectiontoken(\"cryptotoken_token",{"_index":4002,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('autentication_url_token",{"_index":3994,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('auth_mapping_token",{"_index":3995,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('auth_token",{"_index":3996,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('backend_token",{"_index":3997,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('crypto_api_url_token",{"_index":3998,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('firebase_collection_token",{"_index":4003,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('firebase_config_token",{"_index":4004,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('firebase_main_service",{"_index":4005,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('login_api_url_token",{"_index":4006,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('people_api_url_token",{"_index":4009,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('register_api_url_token",{"_index":4008,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken('upload_api_url_token",{"_index":4007,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken>(\"crypto_repository_token",{"_index":4000,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken>(\"crypto_service_token",{"_index":4001,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken>('crypto_mapping_token",{"_index":3999,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken>('user_csv_url_token",{"_index":4010,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken>('user_mapping_token",{"_index":4011,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken>('user_repository_token",{"_index":4012,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectiontoken>('user_service_token",{"_index":4013,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injects",{"_index":287,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["inline",{"_index":872,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["input",{"_index":315,"title":{},"body":{"components/AdminFormularyComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["inputs",{"_index":276,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["inside",{"_index":2350,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["instance",{"_index":41,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"interfaces/IFirebaseMainService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"classes/StrapiMediaService.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["instant",{"_index":3231,"title":{},"body":{"components/RegisterPage.html":{}}}],["integración",{"_index":3924,"title":{},"body":{"index.html":{}}}],["integrate",{"_index":2065,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["integration",{"_index":3683,"title":{},"body":{"injectables/UserStrapiService.html":{}}}],["intended",{"_index":1335,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["interact",{"_index":1666,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["interaction",{"_index":1962,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["interactivas",{"_index":3885,"title":{},"body":{"index.html":{}}}],["interactivos",{"_index":3865,"title":{},"body":{"index.html":{}}}],["interesen",{"_index":3856,"title":{},"body":{"index.html":{}}}],["interface",{"_index":655,"title":{"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["interfaces",{"_index":657,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"overview.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["interfaces/authentication/auth",{"_index":2175,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["interfaces/authentication/authentication.interface",{"_index":1446,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["interfaces/authentication/firebase",{"_index":2246,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["interfaces/authentication/strapi",{"_index":3515,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["interfaces/crypto/coingeko",{"_index":1720,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["interfaces/crypto/crypto",{"_index":1699,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["interfaces/crypto/cryptobase.interface",{"_index":1676,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["interfaces/crypto/cryptobasemapping.interface",{"_index":1499,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["interfaces/firebasemain.service.interface",{"_index":2255,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{}}}],["interfaces/user/firebase.service.interface",{"_index":3674,"title":{},"body":{"injectables/UserFirebaseService.html":{}}}],["interfaces/user/strapi.service.interface",{"_index":3685,"title":{},"body":{"injectables/UserStrapiService.html":{}}}],["interfaces/user/user",{"_index":3637,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["interfaces/user/userbasemapping.interface",{"_index":1119,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["interfaz",{"_index":3897,"title":{},"body":{"index.html":{}}}],["interior",{"_index":3973,"title":{},"body":{"index.html":{}}}],["intermedias",{"_index":886,"title":{},"body":{"components/AppComponent.html":{}}}],["internationalization",{"_index":467,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ProfilePage.html":{}}}],["interno",{"_index":391,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/RegisterPage.html":{}}}],["intersect",{"_index":1959,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["io.ionic.starter",{"_index":4057,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ion",{"_index":131,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["ionic",{"_index":527,"title":{},"body":{"components/AdminPanelPage.html":{},"directives/ColorpercentDirective.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"injectables/SharedService.html":{},"index.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["ionic/angular",{"_index":250,"title":{},"body":{"modules/AboutPageModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"dependencies.html":{}}}],["ionic/core",{"_index":544,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["ionicmodule",{"_index":249,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{}}}],["ionicmodule.forroot",{"_index":1026,"title":{},"body":{"modules/AppModule.html":{}}}],["ionicons",{"_index":3804,"title":{},"body":{"dependencies.html":{}}}],["ionicroutestrategy",{"_index":970,"title":{},"body":{"modules/AppModule.html":{}}}],["ioninfinitescroll",{"_index":517,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["ioninfinitescrollcustomevent",{"_index":524,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["ionviewwillenter",{"_index":448,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["ionviewwillleave",{"_index":1822,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ios",{"_index":3914,"title":{},"body":{"index.html":{}}}],["iphone",{"_index":3976,"title":{},"body":{"index.html":{}}}],["isadmin",{"_index":281,"title":{},"body":{"components/AdminFormularyComponent.html":{},"guards/AuthGuardAdmin.html":{},"interfaces/BasicUser.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/LoginResponse.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["isadmin:\"false",{"_index":3565,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["isadmin:['',[validators.required",{"_index":346,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["isadmin:boolean",{"_index":1563,"title":{},"body":{"interfaces/BasicUser.html":{},"interfaces/User.html":{}}}],["isadmin:data.isadmin??false",{"_index":1270,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["isadmin:false",{"_index":2207,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/providedata.html":{}}}],["isadmin:isadmin??false",{"_index":2429,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["isadmin:response.isadmin",{"_index":2203,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["isadmin:string",{"_index":1561,"title":{},"body":{"interfaces/BasicUser.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/User.html":{},"interfaces/providedata.html":{}}}],["isadmin:this.formulary.controls['isadmin'].value",{"_index":353,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["isanonymous",{"_index":2179,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["isdisabled",{"_index":2077,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["isstoppedspeechrecog",{"_index":3260,"title":{},"body":{"components/SearchPage.html":{}}}],["istrapiauthentication",{"_index":2685,"title":{"interfaces/IStrapiAuthentication.html":{}},"body":{"interfaces/IStrapiAuthentication.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{}}}],["istrapiservice",{"_index":2687,"title":{"interfaces/IStrapiService.html":{}},"body":{"interfaces/IStrapiService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{}}}],["it.id",{"_index":564,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["item",{"_index":401,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{}}}],["item.selected",{"_index":860,"title":{},"body":{"components/AppComponent.html":{}}}],["item:hover",{"_index":3413,"title":{},"body":{"components/SearchPage.html":{}}}],["items",{"_index":947,"title":{},"body":{"components/AppComponent.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["iuserbasemapping",{"_index":1118,"title":{"interfaces/IUserBaseMapping.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["iuserbaserepositoy",{"_index":2720,"title":{"interfaces/IUserbaseRepositoy.html":{}},"body":{"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{}}}],["iuserbaseservice",{"_index":455,"title":{"interfaces/IUserbaseService.html":{}},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuardAdmin.html":{},"components/HomePage.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"coverage.html":{}}}],["iuserfirebaserepository",{"_index":2718,"title":{"interfaces/IUserFirebaseRepository.html":{}},"body":{"interfaces/IUserFirebaseRepository.html":{},"coverage.html":{}}}],["iuserstrapirepositoy",{"_index":2722,"title":{"interfaces/IUserStrapiRepositoy.html":{}},"body":{"interfaces/IUserStrapiRepositoy.html":{},"coverage.html":{}}}],["json",{"_index":1024,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["juntartexto",{"_index":3268,"title":{},"body":{"components/SearchPage.html":{}}}],["justify",{"_index":953,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["jwt",{"_index":1438,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["jwt:string",{"_index":3545,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["key",{"_index":1590,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["keyboard",{"_index":3403,"title":{},"body":{"components/SearchPage.html":{}}}],["la",{"_index":372,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{},"index.html":{}}}],["label",{"_index":830,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["labels",{"_index":1927,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["lang",{"_index":733,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"injectables/TranslationService.html":{}}}],["lang_key",{"_index":3601,"title":{},"body":{"injectables/TranslationService.html":{}}}],["langchangeevent",{"_index":767,"title":{},"body":{"components/AppComponent.html":{}}}],["language",{"_index":703,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/TranslationService.html":{}}}],["language',hidden:false",{"_index":749,"title":{},"body":{"components/AppComponent.html":{}}}],["languagechangesubscription",{"_index":2078,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["large",{"_index":1181,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["las",{"_index":3854,"title":{},"body":{"index.html":{}}}],["last",{"_index":645,"title":{},"body":{"components/AdminPanelPage.html":{},"components/SearchPage.html":{}}}],["last_updated",{"_index":1526,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["lastloginat",{"_index":2183,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["lastvaluefrom",{"_index":3156,"title":{},"body":{"components/ProfilePage.html":{}}}],["lastvaluefrom(this.mediaservice.upload(blob",{"_index":3178,"title":{},"body":{"components/ProfilePage.html":{}}}],["lastvaluefrom(this.userservice.updateuserdata({image:uploadedblob[0",{"_index":3179,"title":{},"body":{"components/ProfilePage.html":{}}}],["leaks",{"_index":722,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["leave",{"_index":1854,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["left",{"_index":381,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["left!important",{"_index":423,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["legend",{"_index":175,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"overview.html":{}}}],["legibilidad",{"_index":2975,"title":{},"body":{"components/ListcontentPage.html":{}}}],["libra",{"_index":3845,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":54,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"directives/ColorpercentDirective.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["ligera",{"_index":399,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["ligeramente",{"_index":902,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["limit",{"_index":2747,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["limpio",{"_index":394,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["line",{"_index":123,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{}}}],["links",{"_index":130,"title":{},"body":{"components/AboutPage.html":{}}}],["list",{"_index":480,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["list!:basiclist",{"_index":3000,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["list#inbox",{"_index":850,"title":{},"body":{"components/AppComponent.html":{}}}],["list#labels",{"_index":856,"title":{},"body":{"components/AppComponent.html":{}}}],["list'},{'name",{"_index":208,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["list.description",{"_index":2967,"title":{},"body":{"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{}}}],["list.page",{"_index":2929,"title":{},"body":{"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{}}}],["list.page.html",{"_index":2830,"title":{},"body":{"components/ListPage.html":{}}}],["list.page.scss",{"_index":2829,"title":{},"body":{"components/ListPage.html":{}}}],["list.title",{"_index":2966,"title":{},"body":{"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{}}}],["list2",{"_index":1842,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["list2:number",{"_index":1912,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["list2=valuexd.map(c=>c.date",{"_index":1890,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["list:basiccrypto",{"_index":3332,"title":{},"body":{"components/SearchPage.html":{}}}],["list:cryptolist={id",{"_index":2950,"title":{},"body":{"components/ListcontentPage.html":{}}}],["list:number",{"_index":1886,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["list=data.map((c",{"_index":1541,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["list=data.prices.map((c",{"_index":1553,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["list=valuexd.map(c=>c.price",{"_index":1889,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["list?:basiclist",{"_index":3035,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lista",{"_index":944,"title":{},"body":{"components/AppComponent.html":{},"components/SearchPage.html":{},"index.html":{}}}],["lista=this.lists.find(c=>c.id==id",{"_index":2872,"title":{},"body":{"components/ListPage.html":{}}}],["listafinal",{"_index":2424,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["listafinal:cryptolist[]=data.map(c",{"_index":2421,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["listas",{"_index":3851,"title":{},"body":{"index.html":{}}}],["listcontent",{"_index":2933,"title":{},"body":{"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{}}}],["listcontent'},{'name",{"_index":202,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["listcontent.page",{"_index":2982,"title":{},"body":{"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{}}}],["listcontent.page.html",{"_index":2935,"title":{},"body":{"components/ListcontentPage.html":{}}}],["listcontent.page.scss",{"_index":2934,"title":{},"body":{"components/ListcontentPage.html":{}}}],["listcontent/:id",{"_index":1101,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["listcontentpage",{"_index":201,"title":{"components/ListcontentPage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["listcontentpagemodule",{"_index":2976,"title":{"modules/ListcontentPageModule.html":{}},"body":{"modules/ListcontentPageModule.html":{},"modules.html":{},"overview.html":{}}}],["listcontentpageroutingmodule",{"_index":2980,"title":{"modules/ListcontentPageRoutingModule.html":{}},"body":{"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["listcrypto",{"_index":2985,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["listcrypto'},{'name",{"_index":204,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["listcrypto.component.html",{"_index":2987,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["listcrypto.component.scss",{"_index":2986,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["listcrypto/listcrypto.component",{"_index":3431,"title":{},"body":{"modules/SharedModule.html":{}}}],["listcryptocomponent",{"_index":203,"title":{"components/ListcryptoComponent.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["listens",{"_index":2068,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["listformulary",{"_index":3013,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["listformulary'},{'name",{"_index":206,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["listformulary.component.html",{"_index":3015,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["listformulary.component.scss",{"_index":3014,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["listformulary/listformulary.component",{"_index":3432,"title":{},"body":{"modules/SharedModule.html":{}}}],["listformularycomponent",{"_index":205,"title":{"components/ListformularyComponent.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SharedModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["listid",{"_index":2760,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["listing",{"_index":433,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["listpage",{"_index":207,"title":{"components/ListPage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["listpagemodule",{"_index":2923,"title":{"modules/ListPageModule.html":{}},"body":{"modules/ListPageModule.html":{},"modules.html":{},"overview.html":{}}}],["listpageroutingmodule",{"_index":2927,"title":{"modules/ListPageRoutingModule.html":{}},"body":{"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["lists",{"_index":1192,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["lists.addlist",{"_index":3051,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lists.description",{"_index":3056,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lists.descriptionrequired",{"_index":3057,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lists.lists",{"_index":2908,"title":{},"body":{"components/ListPage.html":{}}}],["lists.minlengtdescription",{"_index":3058,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lists.minlengthtitle",{"_index":3055,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lists.title",{"_index":3053,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lists.titlerequired",{"_index":3054,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lists.updatelist",{"_index":3052,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["lists:basiclist",{"_index":2866,"title":{},"body":{"components/ListPage.html":{}}}],["literal",{"_index":2849,"title":{},"body":{"components/ListPage.html":{}}}],["lo",{"_index":3091,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{},"index.html":{}}}],["load",{"_index":2527,"title":{},"body":{"components/HomePage.html":{}}}],["loadchildren",{"_index":1077,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["loaddata",{"_index":2531,"title":{},"body":{"components/HomePage.html":{}}}],["loaddata(notify",{"_index":2541,"title":{},"body":{"components/HomePage.html":{}}}],["loader",{"_index":977,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["loading",{"_index":519,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/SplashPage.html":{}}}],["loadmoreusers",{"_index":449,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["loadmoreusers(notify",{"_index":508,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["loads",{"_index":506,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["loadusers",{"_index":450,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["local",{"_index":2847,"title":{},"body":{"components/ListPage.html":{},"injectables/StrapiAutenticationService.html":{},"miscellaneous/variables.html":{}}}],["localized",{"_index":705,"title":{},"body":{"components/AppComponent.html":{},"injectables/SharedService.html":{}}}],["localstorage",{"_index":1389,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{}}}],["localstorage.getitem(\"currency\")??\"usd",{"_index":1475,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["localstorage.getitem(\"token",{"_index":1477,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["localstorage.getitem(\"token\")}`}}).pipe(map((resp:strapiuser",{"_index":3536,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["localstorage.getitem(\"uid",{"_index":1471,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["localstorage.getitem(this.lang_key",{"_index":3615,"title":{},"body":{"injectables/TranslationService.html":{}}}],["localstorage.removeitem(\"token",{"_index":1466,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["localstorage.removeitem(\"uid",{"_index":1469,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["localstorage.setitem(\"currency\",currency",{"_index":1474,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["localstorage.setitem(\"token\",resp.jwt",{"_index":3525,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["localstorage.setitem(\"token\",token",{"_index":1465,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["localstorage.setitem(\"uid\",\"\"+resp.user.id",{"_index":3526,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["localstorage.setitem(\"uid\",id",{"_index":1468,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["localstorage.setitem(this.lang_key",{"_index":3618,"title":{},"body":{"injectables/TranslationService.html":{}}}],["location.reload",{"_index":3493,"title":{},"body":{"components/SplashPage.html":{}}}],["log",{"_index":755,"title":{},"body":{"components/AppComponent.html":{}}}],["loged",{"_index":2300,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["logged",{"_index":1303,"title":{},"body":{"guards/AuthGuard.html":{},"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{}}}],["logic",{"_index":1449,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["login",{"_index":1084,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/AuthGuard2.html":{},"injectables/BaseAutenticationService.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"interfaces/LoginResponse.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/cryptosxd.html":{},"index.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["login'},{'name",{"_index":210,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["login(authenticationlogin",{"_index":1413,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["login(authenticationlogin:any):observable",{"_index":2631,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["login(event",{"_index":3069,"title":{},"body":{"components/LoginPage.html":{}}}],["login(event:any",{"_index":3078,"title":{},"body":{"components/LoginPage.html":{}}}],["login(payload",{"_index":2164,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["login(payload:loginpayload):any",{"_index":2606,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["login.page",{"_index":3103,"title":{},"body":{"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{}}}],["login.page.html",{"_index":3061,"title":{},"body":{"components/LoginPage.html":{}}}],["login.page.scss",{"_index":3060,"title":{},"body":{"components/LoginPage.html":{}}}],["login/logout",{"_index":694,"title":{},"body":{"components/AppComponent.html":{}}}],["login_api_url_token",{"_index":987,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["loginapitoken",{"_index":2213,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["loginapitoken:string",{"_index":2259,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["loginpage",{"_index":209,"title":{"components/LoginPage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["loginpagemodule",{"_index":3096,"title":{"modules/LoginPageModule.html":{}},"body":{"modules/LoginPageModule.html":{},"modules.html":{},"overview.html":{}}}],["loginpageroutingmodule",{"_index":3100,"title":{"modules/LoginPageRoutingModule.html":{}},"body":{"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["loginpayload",{"_index":2165,"title":{"interfaces/LoginPayLoad.html":{}},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayLoad.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/providedata.html":{}}}],["loginpayload):strapisignin",{"_index":3554,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["loginpayload):user",{"_index":2196,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["loginresponse",{"_index":2158,"title":{"interfaces/LoginResponse.html":{}},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{}}}],["loginresponse(response",{"_index":2167,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["loginresponse(response:any):any",{"_index":2608,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["loginresponse):user",{"_index":2197,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["loginresponse,name:string,gender:string",{"_index":2204,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["loginresponse,name?:string,gender?:string,image?:string,isadmin?:boolean):basicuser",{"_index":2426,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["logout",{"_index":712,"title":{},"body":{"components/AppComponent.html":{},"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["logout():void",{"_index":1460,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"interfaces/IAuthenticationService.html":{}}}],["logs",{"_index":1415,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"injectables/StrapiAutenticationService.html":{}}}],["los",{"_index":403,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"index.html":{}}}],["lottie",{"_index":1007,"title":{},"body":{"modules/AppModule.html":{},"components/SplashPage.html":{},"dependencies.html":{},"index.html":{}}}],["lottiecomponent",{"_index":3461,"title":{},"body":{"components/SplashPage.html":{}}}],["lottiecomponent,ionicmodule",{"_index":3480,"title":{},"body":{"components/SplashPage.html":{}}}],["low_24h",{"_index":1511,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["m",{"_index":1079,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.aboutpagemodule",{"_index":1105,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.adminpanelpagemodule",{"_index":1109,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.cryptoviewpagemodule",{"_index":1100,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.homepagemodule",{"_index":1080,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.listcontentpagemodule",{"_index":1103,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.listpagemodule",{"_index":1097,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.loginpagemodule",{"_index":1087,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.profilepagemodule",{"_index":1095,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.registerpagemodule",{"_index":1090,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["m.searchpagemodule",{"_index":1093,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["made",{"_index":535,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["main",{"_index":2310,"title":{},"body":{"injectables/FirebaseMainService.html":{},"miscellaneous/variables.html":{}}}],["mainmenu.aboutus",{"_index":73,"title":{},"body":{"components/AboutPage.html":{}}}],["mainmenu.adminpanel",{"_index":611,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["mainmenu.list",{"_index":2965,"title":{},"body":{"components/ListcontentPage.html":{}}}],["mainmenu.profile",{"_index":3185,"title":{},"body":{"components/ProfilePage.html":{}}}],["mainmenu.search",{"_index":3398,"title":{},"body":{"components/SearchPage.html":{}}}],["maintainaspectratio",{"_index":1947,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["make",{"_index":3829,"title":{},"body":{"miscellaneous/functions.html":{}}}],["making",{"_index":1669,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"injectables/UserBaseRepository.html":{},"miscellaneous/variables.html":{}}}],["male",{"_index":620,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CustomGenderComponent.html":{}}}],["manage",{"_index":49,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"guards/AuthGuardAdmin.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"injectables/UserStrapiService.html":{}}}],["managed",{"_index":3483,"title":{},"body":{"components/SplashPage.html":{}}}],["management",{"_index":431,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseAutenticationService.html":{},"components/FormularyComponent.html":{},"injectables/UserFirebaseService.html":{}}}],["manager",{"_index":2192,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["manages",{"_index":428,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{}}}],["managing",{"_index":460,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"injectables/TranslationService.html":{}}}],["manipulate",{"_index":1655,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["mano",{"_index":3196,"title":{},"body":{"components/ProfilePage.html":{}}}],["mantiene",{"_index":905,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["map",{"_index":1311,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{}}}],["map((c",{"_index":3523,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["map((user",{"_index":1315,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["map(res",{"_index":1628,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["mapped",{"_index":1193,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["mapper",{"_index":3623,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["mapping",{"_index":1535,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoFromApi.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/PricesCryptoFromApi.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserBaseRepository.html":{},"interfaces/cryptosxd.html":{},"miscellaneous/functions.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["mapping.interface",{"_index":2176,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["mapping.interface.ts",{"_index":2594,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{},"coverage.html":{}}}],["mapping.interface.ts:14",{"_index":2598,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["mapping.interface.ts:22",{"_index":2600,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["mapping.interface.ts:30",{"_index":2599,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["mapping.interface.ts:41",{"_index":2602,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["mapping.interface.ts:51",{"_index":2597,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["mapping.service",{"_index":1005,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseUserMapping.html":{},"injectables/StrapiAutenticationService.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["mapping.service.ts",{"_index":2151,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{}}}],["mapping.service.ts:109",{"_index":2412,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:110",{"_index":2161,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{}}}],["mapping.service.ts:35",{"_index":2415,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:49",{"_index":3539,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{}}}],["mapping.service.ts:53",{"_index":2406,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:56",{"_index":2166,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{}}}],["mapping.service.ts:57",{"_index":3542,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{}}}],["mapping.service.ts:63",{"_index":2407,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:66",{"_index":2171,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/StrapiAuthMappingService.html":{}}}],["mapping.service.ts:71",{"_index":2417,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:75",{"_index":2168,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:79",{"_index":2410,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:82",{"_index":3544,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{}}}],["mapping.service.ts:83",{"_index":2402,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:87",{"_index":2401,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:91",{"_index":2404,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:93",{"_index":2173,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{}}}],["mapping.service.ts:95",{"_index":2418,"title":{},"body":{"injectables/FirebaseUserMapping.html":{}}}],["mapping.service.ts:99",{"_index":3538,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{}}}],["mapping:iauthenticationmapping",{"_index":2265,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["mapping:icryptobasemapping",{"_index":1621,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{}}}],["mapping:iuserbasemapping",{"_index":3640,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["maps",{"_index":1186,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["margen",{"_index":1753,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["margin",{"_index":97,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["market",{"_index":1539,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["market_cap",{"_index":1506,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["market_cap_change_24h",{"_index":1514,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["market_cap_change_percentage_24h",{"_index":1515,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["market_cap_rank",{"_index":1507,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["market_caps",{"_index":1533,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["match",{"_index":592,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["match[1].replace(/['\"]/g",{"_index":594,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["matching",{"_index":226,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"routes.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["max",{"_index":125,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/SearchPage.html":{}}}],["max_supply",{"_index":1518,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["maxresults",{"_index":3366,"title":{},"body":{"components/SearchPage.html":{}}}],["mayor",{"_index":417,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["md",{"_index":2028,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["measurementid",{"_index":1063,"title":{},"body":{"modules/AppModule.html":{}}}],["media",{"_index":413,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"injectables/BaseMediaService.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseMediaService.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"classes/StrapiMediaService.html":{},"miscellaneous/variables.html":{}}}],["media.service",{"_index":2351,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"components/ProfilePage.html":{},"classes/StrapiMediaService.html":{}}}],["media.service.ts",{"_index":1480,"title":{},"body":{"injectables/BaseMediaService.html":{},"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{},"coverage.html":{}}}],["media.service.ts:12",{"_index":3574,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["media.service.ts:17",{"_index":1485,"title":{},"body":{"injectables/BaseMediaService.html":{}}}],["media.service.ts:24",{"_index":2340,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["media.service.ts:31",{"_index":3575,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["media_token",{"_index":3730,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["mediaservice",{"_index":3128,"title":{},"body":{"components/ProfilePage.html":{}}}],["mediaservice:basemediaservice",{"_index":3159,"title":{},"body":{"components/ProfilePage.html":{}}}],["mediaservicefactory",{"_index":999,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["medios",{"_index":3950,"title":{},"body":{"index.html":{}}}],["medium",{"_index":873,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["mejorar",{"_index":2974,"title":{},"body":{"components/ListcontentPage.html":{},"index.html":{}}}],["memory",{"_index":721,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["men",{"_index":882,"title":{},"body":{"components/AppComponent.html":{}}}],["menu",{"_index":17,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/IAuthenticationService.html":{},"index.html":{}}}],["menu.ios",{"_index":867,"title":{},"body":{"components/AppComponent.html":{}}}],["menu.md",{"_index":847,"title":{},"body":{"components/AppComponent.html":{}}}],["menucontroller",{"_index":687,"title":{},"body":{"components/AppComponent.html":{}}}],["menus",{"_index":699,"title":{},"body":{"components/AppComponent.html":{}}}],["message",{"_index":2901,"title":{},"body":{"components/ListPage.html":{},"injectables/SharedService.html":{}}}],["messages",{"_index":471,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["messagingsenderid",{"_index":1059,"title":{},"body":{"modules/AppModule.html":{}}}],["meta",{"_index":1141,"title":{"interfaces/Meta.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["metadata",{"_index":25,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseMediaService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/ICryptobaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["method",{"_index":1682,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"injectables/SharedService.html":{}}}],["methods",{"_index":33,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["mime",{"_index":1178,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["min",{"_index":414,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["minimal",{"_index":1493,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["minmax(250px",{"_index":2577,"title":{},"body":{"components/HomePage.html":{}}}],["minutes",{"_index":1901,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["miscellaneous",{"_index":3822,"title":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["modal",{"_index":291,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{}}}],["modal.onwilldismiss",{"_index":600,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{}}}],["modal.present",{"_index":599,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{}}}],["modalcontroller",{"_index":283,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{}}}],["modals",{"_index":466,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/ListPage.html":{}}}],["mode",{"_index":1957,"title":{},"body":{"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{}}}],["model",{"_index":663,"title":{"interfaces/Model.html":{}},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoGraphPrice.html":{},"components/CryptocardComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/Image.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["models",{"_index":1537,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoFromApi.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserBaseRepository.html":{},"interfaces/cryptosxd.html":{},"miscellaneous/functions.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["models/auth.model",{"_index":2605,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["models/crypto.model",{"_index":1497,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["models/user.model",{"_index":2684,"title":{},"body":{"interfaces/IFirebaseService.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserStrapiRepositoy.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["moderno",{"_index":397,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["modes",{"_index":2469,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["modificar",{"_index":3009,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["modify",{"_index":2837,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{}}}],["modify(event",{"_index":2998,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["module",{"_index":227,"title":{"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"modules/SplashPageRoutingModule.html":{}},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["modules",{"_index":229,"title":{"modules.html":{}},"body":{"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"modules/SplashPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["monedas",{"_index":3841,"title":{},"body":{"index.html":{}}}],["monitor",{"_index":1441,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["month",{"_index":1894,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["more",{"_index":511,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["mostrar",{"_index":875,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["mouse",{"_index":924,"title":{},"body":{"components/AppComponent.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{}}}],["muestra",{"_index":3208,"title":{},"body":{"components/ProfilePage.html":{},"index.html":{}}}],["mueve",{"_index":3092,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["multi",{"_index":2074,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["multilingüe",{"_index":3889,"title":{},"body":{"index.html":{}}}],["multiplataforma",{"_index":3912,"title":{},"body":{"index.html":{}}}],["muy",{"_index":1806,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["márgenes",{"_index":172,"title":{},"body":{"components/AboutPage.html":{}}}],["más",{"_index":420,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"index.html":{}}}],["mínimo",{"_index":2513,"title":{},"body":{"components/FormularyComponent.html":{},"components/SplashPage.html":{}}}],["móviles",{"_index":3903,"title":{},"body":{"index.html":{}}}],["name",{"_index":44,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["name:authenticationregister.username",{"_index":2277,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["name:c.name",{"_index":1543,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["name:data.data.attributes.name",{"_index":1241,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["name:data.name",{"_index":1247,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["name:string",{"_index":665,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["name:x.name",{"_index":1201,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["navigate",{"_index":680,"title":{},"body":{"components/AppComponent.html":{},"components/ListcontentPage.html":{},"components/SplashPage.html":{}}}],["navigate(argu",{"_index":707,"title":{},"body":{"components/AppComponent.html":{}}}],["navigates",{"_index":709,"title":{},"body":{"components/AppComponent.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["navigation",{"_index":701,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["nearest",{"_index":1958,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["necesario",{"_index":2525,"title":{},"body":{"components/FormularyComponent.html":{}}}],["necesidades",{"_index":3945,"title":{},"body":{"index.html":{}}}],["necessary",{"_index":3130,"title":{},"body":{"components/ProfilePage.html":{}}}],["needed",{"_index":1665,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["negative",{"_index":1640,"title":{},"body":{"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"pipes/PercentformaterPipe.html":{}}}],["negativecolor",{"_index":1367,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{}}}],["negativenew",{"_index":1368,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["netlify",{"_index":3964,"title":{},"body":{"index.html":{}}}],["new",{"_index":582,"title":{},"body":{"components/AdminPanelPage.html":{},"modules/AppModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":575,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["next:(value",{"_index":606,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["ng",{"_index":3499,"title":{},"body":{"components/SplashPage.html":{}}}],["ng_value_accessor",{"_index":2071,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["ngmodule",{"_index":244,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"modules/SplashPageRoutingModule.html":{}}}],["ngonchanges",{"_index":1353,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["ngonchanges(changes",{"_index":1360,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["ngondestroy",{"_index":681,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["ngoninit",{"_index":34,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["ngsubmit",{"_index":3071,"title":{},"body":{"components/LoginPage.html":{}}}],["ngx",{"_index":254,"title":{},"body":{"modules/AboutPageModule.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/TranslationService.html":{},"dependencies.html":{}}}],["nombre",{"_index":945,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{}}}],["none",{"_index":640,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/HomePage.html":{},"injectables/StrapiAutenticationService.html":{}}}],["note",{"_index":848,"title":{},"body":{"components/AppComponent.html":{},"injectables/FirebaseMediaService.html":{}}}],["notification",{"_index":3451,"title":{},"body":{"injectables/SharedService.html":{}}}],["notifies",{"_index":2096,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["notify",{"_index":516,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{}}}],["notify?.complete",{"_index":570,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["nube",{"_index":3933,"title":{},"body":{"index.html":{}}}],["null",{"_index":491,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{},"components/ListformularyComponent.html":{}}}],["number",{"_index":539,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["number,currency:string",{"_index":1626,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{}}}],["numeric",{"_index":1638,"title":{},"body":{"directives/ColorpercentDirective.html":{},"pipes/PercentformaterPipe.html":{}}}],["obj",{"_index":2115,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["object",{"_index":110,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptocardComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["objects",{"_index":1189,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["observable",{"_index":1306,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["observable/promise",{"_index":1308,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{}}}],["observador",{"_index":2287,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observador.complete",{"_index":2293,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observador.error(errormessage",{"_index":2294,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observador.next(this.mapping.loginresponse(usercredential",{"_index":2292,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observer",{"_index":2268,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observer.complete",{"_index":2297,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observer.error(error",{"_index":2304,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observer.error(errormessage",{"_index":2286,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observer.error(new",{"_index":2298,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observer.next",{"_index":2303,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observer.next(this.mapping.getuserresponse(user",{"_index":2296,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["observer.next(this.mapping.registerresponse(usercredential,authenticationregister.username,authenticationregister.gender",{"_index":2280,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["obtén",{"_index":3870,"title":{},"body":{"index.html":{}}}],["occurs",{"_index":1302,"title":{},"body":{"guards/AuthGuard.html":{}}}],["ocultar",{"_index":879,"title":{},"body":{"components/AppComponent.html":{}}}],["ocupe",{"_index":370,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["of(false",{"_index":1318,"title":{},"body":{"guards/AuthGuard.html":{}}}],["of(true",{"_index":1332,"title":{},"body":{"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["offset",{"_index":3404,"title":{},"body":{"components/SearchPage.html":{}}}],["ofrece",{"_index":3848,"title":{},"body":{"index.html":{}}}],["ofrecer",{"_index":3863,"title":{},"body":{"index.html":{}}}],["omitted",{"_index":2803,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["onauthstatechanged",{"_index":2251,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{}}}],["onauthstatechanged(auth",{"_index":2295,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{}}}],["once",{"_index":2545,"title":{},"body":{"components/HomePage.html":{},"components/ListPage.html":{},"components/SearchPage.html":{}}}],["onchange",{"_index":2079,"title":{},"body":{"components/CustomGenderComponent.html":{},"components/ProfilePage.html":{}}}],["onchange($event",{"_index":3139,"title":{},"body":{"components/ProfilePage.html":{}}}],["onchanges",{"_index":1350,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["ondestroy",{"_index":2070,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["onfilechange",{"_index":3126,"title":{},"body":{"components/ProfilePage.html":{}}}],["onfilechange(event",{"_index":3141,"title":{},"body":{"components/ProfilePage.html":{}}}],["oninit",{"_index":24,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["oninit,controlvalueaccessor,ondestroy",{"_index":2128,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["onioninfinite",{"_index":451,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["onioninfinite($event",{"_index":523,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["onoptionchange",{"_index":2082,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["onoptionchange(value",{"_index":2093,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["ontouched",{"_index":2080,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["opacity",{"_index":3205,"title":{},"body":{"components/ProfilePage.html":{}}}],["open",{"_index":465,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{}}}],["openmenu",{"_index":682,"title":{},"body":{"components/AppComponent.html":{}}}],["opens",{"_index":486,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/RegisterPage.html":{}}}],["operation",{"_index":2738,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["operations",{"_index":463,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseMediaService.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"components/ProfilePage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["option",{"_index":2095,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["optional",{"_index":46,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/cryptosxd.html":{},"miscellaneous/functions.html":{},"interfaces/rawbasiclist.html":{}}}],["optionally",{"_index":313,"title":{},"body":{"components/AdminFormularyComponent.html":{},"guards/AuthGuardAdmin.html":{},"interfaces/IAuthenticationMapping.html":{}}}],["options",{"_index":1946,"title":{},"body":{"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/SplashPage.html":{}}}],["ordenador",{"_index":3905,"title":{},"body":{"index.html":{}}}],["oscura",{"_index":3210,"title":{},"body":{"components/ProfilePage.html":{}}}],["oscurece",{"_index":3204,"title":{},"body":{"components/ProfilePage.html":{}}}],["otherwise",{"_index":1341,"title":{},"body":{"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"directives/ColorpercentDirective.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["otros",{"_index":2922,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["out",{"_index":241,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"guards/AuthGuard.html":{},"injectables/BaseAutenticationService.html":{},"modules/CryptoviewPageModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"modules/HomePageModule.html":{},"interfaces/IAuthenticationService.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"injectables/StrapiAutenticationService.html":{},"overview.html":{}}}],["out',hidden:false",{"_index":756,"title":{},"body":{"components/AppComponent.html":{}}}],["output",{"_index":1785,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/ListcryptoComponent.html":{}}}],["outputs",{"_index":1771,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/ListcryptoComponent.html":{}}}],["over",{"_index":1609,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["overflow",{"_index":154,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ProfilePage.html":{}}}],["overlay",{"_index":3203,"title":{},"body":{"components/ProfilePage.html":{}}}],["override",{"_index":1625,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{}}}],["overview",{"_index":3980,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["p",{"_index":121,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["p.title",{"_index":845,"title":{},"body":{"components/AppComponent.html":{}}}],["package",{"_index":3777,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["padding",{"_index":145,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["page",{"_index":13,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["page:number=1",{"_index":2554,"title":{},"body":{"components/HomePage.html":{}}}],["pages",{"_index":2937,"title":{},"body":{"components/ListcontentPage.html":{}}}],["pagesize",{"_index":1599,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["paginated",{"_index":1538,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/PricesCryptoFromApi.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["pagination",{"_index":435,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["panel",{"_index":430,"title":{},"body":{"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{}}}],["panel'},{'name",{"_index":186,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["panel.module').then",{"_index":1108,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["panel.module.ts",{"_index":653,"title":{},"body":{"modules/AdminPanelPageModule.html":{}}}],["panel.page",{"_index":654,"title":{},"body":{"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{}}}],["panel.page.html",{"_index":440,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.scss",{"_index":439,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts",{"_index":427,"title":{},"body":{"components/AdminPanelPage.html":{},"coverage.html":{}}}],["panel.page.ts:100",{"_index":473,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:111",{"_index":478,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:133",{"_index":492,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:144",{"_index":531,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:172",{"_index":525,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:27",{"_index":538,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:28",{"_index":541,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:29",{"_index":537,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:30",{"_index":459,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:54",{"_index":499,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:64",{"_index":520,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:78",{"_index":510,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel.page.ts:92",{"_index":485,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["panel/admin",{"_index":426,"title":{},"body":{"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppRoutingModule.html":{},"coverage.html":{}}}],["pantalla",{"_index":373,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/SplashPage.html":{}}}],["pantallas",{"_index":877,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/SplashPage.html":{}}}],["para",{"_index":385,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{},"index.html":{}}}],["param",{"_index":68,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["parameters",{"_index":42,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":3273,"title":{},"body":{"components/SearchPage.html":{}}}],["parent",{"_index":2995,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["parte",{"_index":2916,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["pasar",{"_index":923,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["passing",{"_index":302,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["password",{"_index":2224,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"components/FormularyComponent.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginPayLoad.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"interfaces/RegisterPayLoad.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/updateuser.html":{}}}],["password:data.password",{"_index":1260,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["password:payload.password",{"_index":3556,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["password:string",{"_index":1168,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/Meta.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["password:string=this.formulary.get(\"password\")?.value",{"_index":2490,"title":{},"body":{"components/FormularyComponent.html":{}}}],["passwordicon",{"_index":2431,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["passwordtype",{"_index":2432,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["path",{"_index":263,"title":{},"body":{"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"modules/CryptoviewPageRoutingModule.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/Image.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/Meta.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageRoutingModule.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["pathmatch",{"_index":1082,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["payload",{"_index":1417,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["payloads",{"_index":2153,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["payloads/responses",{"_index":2596,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["pegado",{"_index":2522,"title":{},"body":{"components/FormularyComponent.html":{}}}],["people",{"_index":2571,"title":{},"body":{"components/HomePage.html":{}}}],["people',hidden:false",{"_index":753,"title":{},"body":{"components/AppComponent.html":{}}}],["pequeñas",{"_index":884,"title":{},"body":{"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/FormularyComponent.html":{},"components/SplashPage.html":{}}}],["per",{"_index":1601,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["percent",{"_index":1728,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/PercentformaterPipe.html":{}}}],["percent:number=0",{"_index":1879,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["percent=10",{"_index":1738,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["percentage",{"_index":1639,"title":{},"body":{"directives/ColorpercentDirective.html":{},"pipes/PercentformaterPipe.html":{}}}],["percentages",{"_index":1647,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["percentformater",{"_index":1744,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/PercentformaterPipe.html":{}}}],["percentformaterpipe",{"_index":2041,"title":{"pipes/PercentformaterPipe.html":{}},"body":{"modules/CryptoviewPageModule.html":{},"pipes/PercentformaterPipe.html":{},"modules/SharedModule.html":{},"coverage.html":{},"overview.html":{}}}],["percentpipe",{"_index":2043,"title":{},"body":{"modules/CryptoviewPageModule.html":{}}}],["perfectamente",{"_index":3500,"title":{},"body":{"components/SplashPage.html":{}}}],["perfil",{"_index":950,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{},"index.html":{}}}],["perform",{"_index":3831,"title":{},"body":{"miscellaneous/functions.html":{}}}],["performance",{"_index":1649,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["performs",{"_index":2619,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["period",{"_index":1612,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptobaseService.html":{}}}],["permission",{"_index":1343,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["permite",{"_index":2523,"title":{},"body":{"components/FormularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"index.html":{}}}],["permitiendo",{"_index":3929,"title":{},"body":{"index.html":{}}}],["perpage",{"_index":2530,"title":{},"body":{"components/HomePage.html":{}}}],["perpage:number=250",{"_index":2555,"title":{},"body":{"components/HomePage.html":{}}}],["person',hidden:false",{"_index":747,"title":{},"body":{"components/AppComponent.html":{}}}],["personalizadas",{"_index":3852,"title":{},"body":{"index.html":{}}}],["personalizados",{"_index":3960,"title":{},"body":{"index.html":{}}}],["persons",{"_index":2233,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{}}}],["phonenumber",{"_index":2189,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["photourl",{"_index":2190,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["pipe",{"_index":1829,"title":{"pipes/CurrencyPipe.html":{},"pipes/PercentformaterPipe.html":{}},"body":{"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"pipes/PercentformaterPipe.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{}}}],["pipes",{"_index":2050,"title":{},"body":{"pipes/CurrencyPipe.html":{},"pipes/PercentformaterPipe.html":{},"index.html":{},"overview.html":{}}}],["pipetransform",{"_index":2057,"title":{},"body":{"pipes/CurrencyPipe.html":{},"pipes/PercentformaterPipe.html":{}}}],["places",{"_index":3109,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["plataforma",{"_index":3926,"title":{},"body":{"index.html":{}}}],["player",{"_index":1034,"title":{},"body":{"modules/AppModule.html":{}}}],["plugin",{"_index":3799,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["plugins",{"_index":1948,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["poco",{"_index":3246,"title":{},"body":{"components/RegisterPage.html":{}}}],["pointbackgroundcolor",{"_index":1943,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["pointbordercolor",{"_index":1945,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["pointer",{"_index":1749,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{}}}],["pointhoverradius",{"_index":1941,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["pointradius",{"_index":1940,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["points",{"_index":2653,"title":{},"body":{"interfaces/ICryptoBase.html":{}}}],["populares",{"_index":3872,"title":{},"body":{"index.html":{}}}],["populated",{"_index":2163,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["por",{"_index":2920,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["porque",{"_index":881,"title":{},"body":{"components/AppComponent.html":{}}}],["posicionar",{"_index":3090,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["posición",{"_index":3086,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["position",{"_index":364,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{}}}],["positive",{"_index":1644,"title":{},"body":{"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"pipes/PercentformaterPipe.html":{}}}],["positivecolor",{"_index":1369,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{}}}],["positivenew",{"_index":1370,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["posting",{"_index":3511,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["pre",{"_index":2447,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["precio",{"_index":1970,"title":{},"body":{"components/CryptoviewPage.html":{},"index.html":{}}}],["precios",{"_index":3867,"title":{},"body":{"index.html":{}}}],["preference",{"_index":704,"title":{},"body":{"components/AppComponent.html":{},"injectables/TranslationService.html":{}}}],["preferences",{"_index":3606,"title":{},"body":{"injectables/TranslationService.html":{}}}],["preferido",{"_index":3896,"title":{},"body":{"index.html":{}}}],["preferred",{"_index":1401,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"injectables/StrapiAutenticationService.html":{}}}],["preloadallmodules",{"_index":1068,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["preloadingstrategy",{"_index":1111,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["prepares",{"_index":1203,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["present",{"_index":3063,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{},"classes/StrapiMediaService.html":{}}}],["presentmodal",{"_index":453,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{}}}],["presentmodal(type",{"_index":2854,"title":{},"body":{"components/ListPage.html":{}}}],["presentmodal(type:string,list?:basiclist",{"_index":2874,"title":{},"body":{"components/ListPage.html":{}}}],["presentmodal(user",{"_index":530,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["presentmodal(user:basicuser",{"_index":595,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["presents",{"_index":532,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{}}}],["prevent",{"_index":720,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcryptoComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["prevents",{"_index":1274,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{}}}],["preview",{"_index":3145,"title":{},"body":{"components/ProfilePage.html":{}}}],["previewurl",{"_index":1179,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["price",{"_index":1528,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["price:c[1",{"_index":1554,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["price:number",{"_index":671,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasicCrypto.html":{},"interfaces/CryptoGraphPrice.html":{}}}],["price_change_24h",{"_index":1512,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["price_change_percentage_24h",{"_index":1513,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["pricechangepercent24horus",{"_index":662,"title":{},"body":{"interfaces/AdvancedCrypto.html":{}}}],["pricechangepercent24horus:c.price_change_percentage_24h",{"_index":1547,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["pricechangepercent24horus?:number",{"_index":669,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasicCrypto.html":{},"interfaces/CryptoGraphPrice.html":{}}}],["prices",{"_index":1532,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptoviewPage.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["pricescryptofromapi",{"_index":1531,"title":{"interfaces/PricesCryptoFromApi.html":{}},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{},"coverage.html":{}}}],["primary",{"_index":862,"title":{},"body":{"components/AppComponent.html":{}}}],["primeflex",{"_index":3808,"title":{},"body":{"dependencies.html":{}}}],["primeicons",{"_index":3810,"title":{},"body":{"dependencies.html":{}}}],["primeng",{"_index":3811,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["primeng/button",{"_index":2046,"title":{},"body":{"modules/CryptoviewPageModule.html":{},"modules/ProfilePageModule.html":{}}}],["primeng/dropdown",{"_index":3439,"title":{},"body":{"modules/SharedModule.html":{}}}],["primeng/image",{"_index":3222,"title":{},"body":{"modules/ProfilePageModule.html":{}}}],["primeng/table",{"_index":3220,"title":{},"body":{"modules/ProfilePageModule.html":{}}}],["principal",{"_index":3908,"title":{},"body":{"index.html":{}}}],["pristine",{"_index":2453,"title":{},"body":{"components/FormularyComponent.html":{}}}],["private",{"_index":70,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/TranslationService.html":{}}}],["privileges",{"_index":1340,"title":{},"body":{"guards/AuthGuardAdmin.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["probar",{"_index":3963,"title":{},"body":{"index.html":{}}}],["probarla",{"_index":3966,"title":{},"body":{"index.html":{}}}],["processes",{"_index":2701,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["processing",{"_index":2604,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["production",{"_index":4060,"title":{},"body":{"miscellaneous/variables.html":{}}}],["profile",{"_index":100,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuardAdmin.html":{},"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{}}}],["profile'},{'name",{"_index":212,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["profile.deleteaccount",{"_index":3190,"title":{},"body":{"components/ProfilePage.html":{}}}],["profile.modify",{"_index":359,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["profile.page",{"_index":3218,"title":{},"body":{"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{}}}],["profile.page.html",{"_index":3122,"title":{},"body":{"components/ProfilePage.html":{}}}],["profile.page.scss",{"_index":3121,"title":{},"body":{"components/ProfilePage.html":{}}}],["profilepage",{"_index":211,"title":{"components/ProfilePage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["profilepagemodule",{"_index":3212,"title":{"modules/ProfilePageModule.html":{}},"body":{"modules/ProfilePageModule.html":{},"modules.html":{},"overview.html":{}}}],["profilepageroutingmodule",{"_index":3216,"title":{"modules/ProfilePageRoutingModule.html":{}},"body":{"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["profundidad",{"_index":400,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["project",{"_index":118,"title":{},"body":{"components/AboutPage.html":{},"properties.html":{}}}],["projectid",{"_index":1055,"title":{},"body":{"modules/AppModule.html":{}}}],["prominente",{"_index":904,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["promise",{"_index":304,"title":{},"body":{"components/AdminFormularyComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{}}}],["promise((resolve,reject",{"_index":3353,"title":{},"body":{"components/SearchPage.html":{}}}],["propagation",{"_index":1782,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{}}}],["properties",{"_index":271,"title":{"properties.html":{}},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Model.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"properties.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["property",{"_index":1660,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["proporciona",{"_index":3928,"title":{},"body":{"index.html":{}}}],["proporción",{"_index":906,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["protected",{"_index":1679,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/UserBaseRepository.html":{}}}],["provide",{"_index":1029,"title":{},"body":{"modules/AppModule.html":{},"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"components/CustomGenderComponent.html":{},"injectables/UserFirebaseService.html":{},"miscellaneous/variables.html":{}}}],["provide:autentication_url_token,usevalue:environment.authenticationurl",{"_index":1041,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:backend_token,usevalue:'firebase",{"_index":1066,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:crypto_api_url_token,usevalue:environment.cryptoapiurl",{"_index":1042,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:crypto_mapping_token,useclass:coingekomapping",{"_index":1047,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:crypto_repository_token",{"_index":4030,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provide:crypto_service_token,useclass:cryptogeko",{"_index":1046,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:cryptotoken_token,usevalue:environment.cryptoken",{"_index":1044,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:firebase_config_token",{"_index":1049,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:firebase_main_service,useclass:firebasemainservice",{"_index":1048,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:login_api_url_token",{"_index":1038,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:register_api_url_token,usevalue:environment.registerapiurl",{"_index":1040,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:upload_api_url_token,usevalue:environment.uploadapi",{"_index":1043,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:user_csv_url_token,usevalue:environment.usercsv",{"_index":1045,"title":{},"body":{"modules/AppModule.html":{}}}],["provide:user_repository_token",{"_index":4042,"title":{},"body":{"miscellaneous/variables.html":{}}}],["provided",{"_index":1530,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseService.html":{},"interfaces/LoginResponse.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"interfaces/StsTokenManager.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["providedata",{"_index":2181,"title":{"interfaces/providedata.html":{}},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/providedata.html":{}}}],["providedin",{"_index":1184,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["providehttpclient",{"_index":974,"title":{},"body":{"modules/AppModule.html":{}}}],["providelottieoptions",{"_index":1006,"title":{},"body":{"modules/AppModule.html":{}}}],["provider",{"_index":1125,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["provider:string",{"_index":3548,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["provider_metadata",{"_index":1180,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["providerdata",{"_index":2180,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["providerid",{"_index":2187,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["providers",{"_index":233,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"components/CustomGenderComponent.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["providers:[currencypipe,backgraphbuttondirective",{"_index":1875,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["provides",{"_index":1286,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CryptoBaseRepository.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"miscellaneous/variables.html":{}}}],["providing",{"_index":2309,"title":{},"body":{"injectables/FirebaseMainService.html":{},"injectables/SharedService.html":{}}}],["proyecto",{"_index":3946,"title":{},"body":{"index.html":{}}}],["ptima",{"_index":3901,"title":{},"body":{"index.html":{}}}],["public",{"_index":272,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard2.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{}}}],["publishedat",{"_index":1115,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["puedes",{"_index":3965,"title":{},"body":{"index.html":{}}}],["purposes",{"_index":2749,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{}}}],["que",{"_index":367,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{},"index.html":{}}}],["quede",{"_index":2521,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["querying",{"_index":3276,"title":{},"body":{"components/SearchPage.html":{}}}],["radio",{"_index":829,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["radius",{"_index":135,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["range",{"_index":1812,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["ratón",{"_index":3198,"title":{},"body":{"components/ProfilePage.html":{}}}],["raw",{"_index":1187,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["rawbasiclist",{"_index":2414,"title":{"interfaces/rawbasiclist.html":{}},"body":{"injectables/FirebaseUserMapping.html":{},"coverage.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["re",{"_index":3471,"title":{},"body":{"components/SplashPage.html":{}}}],["reactive",{"_index":295,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/CustomGenderComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["reactiveformsmodule",{"_index":3102,"title":{},"body":{"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SharedModule.html":{}}}],["reactively",{"_index":2800,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["reader",{"_index":3172,"title":{},"body":{"components/ProfilePage.html":{}}}],["reader.onload",{"_index":3174,"title":{},"body":{"components/ProfilePage.html":{}}}],["reader.readasdataurl(file",{"_index":3180,"title":{},"body":{"components/ProfilePage.html":{}}}],["readonly",{"_index":3600,"title":{},"body":{"injectables/TranslationService.html":{}}}],["reads",{"_index":1852,"title":{},"body":{"components/CryptoviewPage.html":{},"components/ProfilePage.html":{}}}],["real",{"_index":3838,"title":{},"body":{"index.html":{}}}],["received",{"_index":1503,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["receives",{"_index":2101,"title":{},"body":{"components/CustomGenderComponent.html":{},"components/ListcryptoComponent.html":{}}}],["recognition",{"_index":3261,"title":{},"body":{"components/SearchPage.html":{},"dependencies.html":{}}}],["reconocimiento",{"_index":3373,"title":{},"body":{"components/SearchPage.html":{},"index.html":{}}}],["red",{"_index":1759,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["redirect",{"_index":1348,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["redirected",{"_index":1304,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["redirecting",{"_index":1328,"title":{},"body":{"guards/AuthGuard2.html":{}}}],["redirection",{"_index":1285,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["redirects",{"_index":1278,"title":{},"body":{"guards/AuthGuard.html":{}}}],["redirectto",{"_index":1081,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["redonda",{"_index":909,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["redondeados",{"_index":396,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["ref",{"_index":2353,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["ref(storage",{"_index":2366,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["reference",{"_index":1652,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["referencia",{"_index":3873,"title":{},"body":{"index.html":{}}}],["refresh",{"_index":3206,"title":{},"body":{"components/ProfilePage.html":{}}}],["refreshes",{"_index":2540,"title":{},"body":{"components/HomePage.html":{},"components/ProfilePage.html":{}}}],["refreshtoken",{"_index":2193,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["register",{"_index":1088,"title":{},"body":{"modules/AppRoutingModule.html":{},"guards/AuthGuard2.html":{},"injectables/BaseAutenticationService.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/FormularyComponent.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"index.html":{}}}],["register'},{'name",{"_index":214,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["register(authenticationregister",{"_index":1421,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["register(authenticationregister:any",{"_index":3531,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["register(authenticationregister:any):observable",{"_index":2632,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["register(event",{"_index":3237,"title":{},"body":{"components/RegisterPage.html":{}}}],["register(event:any",{"_index":3243,"title":{},"body":{"components/RegisterPage.html":{}}}],["register(payload",{"_index":2169,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["register(payload:registerpayload):any",{"_index":2607,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["register.page",{"_index":3253,"title":{},"body":{"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{}}}],["register.page.html",{"_index":3226,"title":{},"body":{"components/RegisterPage.html":{}}}],["register.page.scss",{"_index":3225,"title":{},"body":{"components/RegisterPage.html":{}}}],["register_api_url_token",{"_index":988,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["registerables",{"_index":1869,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["registerapiurl",{"_index":4066,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registerapiurl:\"http://localhost:1337/api/auth/local/register",{"_index":4077,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registered",{"_index":1425,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["registeronchange",{"_index":2083,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["registeronchange(fn",{"_index":2097,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["registerontouched",{"_index":2084,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["registerontouched(fn",{"_index":2102,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["registerpage",{"_index":213,"title":{"components/RegisterPage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["registerpagemodule",{"_index":3247,"title":{"modules/RegisterPageModule.html":{}},"body":{"modules/RegisterPageModule.html":{},"modules.html":{},"overview.html":{}}}],["registerpageroutingmodule",{"_index":3251,"title":{"modules/RegisterPageRoutingModule.html":{}},"body":{"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["registerpayload",{"_index":2170,"title":{"interfaces/RegisterPayLoad.html":{}},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/RegisterPayLoad.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/providedata.html":{}}}],["registerpayload):strapiregister",{"_index":3557,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["registerresponse",{"_index":2159,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"injectables/StrapiAuthMappingService.html":{}}}],["registerresponse(response",{"_index":2172,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["registerresponse(response:any,name?:string,gender?:string):any",{"_index":2609,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["registers",{"_index":1423,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["registertoken",{"_index":2214,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["registertoken:string",{"_index":2261,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["registration",{"_index":1322,"title":{},"body":{"guards/AuthGuard2.html":{},"injectables/BaseAutenticationService.html":{},"classes/FirebaseAuthMappingService.html":{},"components/FormularyComponent.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/LoginResponse.html":{},"components/RegisterPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["related",{"_index":725,"title":{},"body":{"components/AppComponent.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"components/SearchPage.html":{},"injectables/UserFirebaseService.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["relative",{"_index":365,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["relevant",{"_index":2695,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["reloads",{"_index":2536,"title":{},"body":{"components/HomePage.html":{}}}],["removal",{"_index":2940,"title":{},"body":{"components/ListcontentPage.html":{}}}],["remove",{"_index":1224,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["removecryptofromlist",{"_index":2732,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["removecryptofromlist(listid",{"_index":2806,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["removecryptofromlist(listid:string,cryptoid:string):observable",{"_index":2819,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["removecryptofromlist(token",{"_index":2759,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["removecryptofromlist(token:string,listid:string,cryptoid:string):observable",{"_index":2775,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["removed",{"_index":2810,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["removeid",{"_index":1380,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["removeid():void",{"_index":2642,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["removelistfromuser",{"_index":2733,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["removelistfromuser(listid",{"_index":2808,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["removelistfromuser(listid:string):observable",{"_index":2816,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["removelistfromuser(token",{"_index":2762,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["removelistfromuser(token:string,listid:string):observable",{"_index":2771,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["removes",{"_index":1388,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["render",{"_index":1357,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"index.html":{}}}],["render:renderer2",{"_index":1366,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["renderer2",{"_index":1358,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["repeat(auto",{"_index":2576,"title":{},"body":{"components/HomePage.html":{}}}],["repositories/interfaces/crypto/coingeko.interface",{"_index":1721,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["repositories/interfaces/crypto/cryptobase.interface",{"_index":1701,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["repositories/repository.tokens",{"_index":1313,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseMainService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["repository",{"_index":1573,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/IUserbaseRepositoy.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/variables.html":{}}}],["repository.tokens",{"_index":1616,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/UserBaseRepository.html":{}}}],["repository:icoingeko",{"_index":1722,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["repository:icryptobase",{"_index":1702,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["repository:iuserbaserepositoy",{"_index":3675,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["represented",{"_index":1487,"title":{},"body":{"injectables/BaseMediaService.html":{}}}],["representing",{"_index":1492,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoFromApi.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["represents",{"_index":12,"title":{},"body":{"components/AboutPage.html":{}}}],["request",{"_index":1204,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["requested",{"_index":1280,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"injectables/CoinGekoRepository.html":{}}}],["requests",{"_index":1577,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["require",{"_index":1277,"title":{},"body":{"guards/AuthGuard.html":{}}}],["required",{"_index":288,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/LoginPage.html":{},"miscellaneous/functions.html":{}}}],["requires",{"_index":1392,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["reset",{"_index":240,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}],["resets",{"_index":2451,"title":{},"body":{"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["resolve(value",{"_index":3355,"title":{},"body":{"components/SearchPage.html":{}}}],["resolves",{"_index":305,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/SearchPage.html":{}}}],["resolving",{"_index":3288,"title":{},"body":{"components/SearchPage.html":{}}}],["resources",{"_index":3599,"title":{},"body":{"injectables/TranslationService.html":{}}}],["response",{"_index":576,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["response.headers.get('content",{"_index":578,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["responses",{"_index":1589,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"miscellaneous/functions.html":{},"interfaces/providedata.html":{}}}],["responsible",{"_index":2307,"title":{},"body":{"injectables/FirebaseMainService.html":{},"injectables/FirebaseUserMapping.html":{},"components/LoginPage.html":{},"injectables/TranslationService.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["responsive",{"_index":389,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListformularyComponent.html":{}}}],["responsivos",{"_index":1760,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["restful",{"_index":3922,"title":{},"body":{"index.html":{}}}],["restricts",{"_index":1334,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["result",{"_index":1398,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"pipes/PercentformaterPipe.html":{},"components/SearchPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["result.matches[0",{"_index":3368,"title":{},"body":{"components/SearchPage.html":{}}}],["resultados",{"_index":3410,"title":{},"body":{"components/SearchPage.html":{}}}],["results",{"_index":225,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"routes.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["retains",{"_index":3670,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["retrieval",{"_index":2162,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["retrieve",{"_index":1692,"title":{},"body":{"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseService.html":{}}}],["retrieves",{"_index":1400,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["return",{"_index":354,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AppModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListformularyComponent.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["returned",{"_index":1494,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["returning",{"_index":3025,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["returns",{"_index":58,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["rgb",{"_index":863,"title":{},"body":{"components/AppComponent.html":{}}}],["rgb(217",{"_index":2032,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["rgba(0",{"_index":152,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["rgba(200",{"_index":1971,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["rgba(76",{"_index":1937,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["rgba(var",{"_index":861,"title":{},"body":{"components/AppComponent.html":{}}}],["right",{"_index":871,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["rights",{"_index":2795,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["roi",{"_index":1525,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["rojo",{"_index":1802,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["role",{"_index":114,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"injectables/SharedService.html":{}}}],["root",{"_index":674,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["root'},{'name",{"_index":188,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["round",{"_index":2031,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["route",{"_index":710,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/CryptoviewPage.html":{},"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["router",{"_index":688,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["router:router",{"_index":777,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["routereusestrategy",{"_index":969,"title":{},"body":{"modules/AppModule.html":{}}}],["routermodule",{"_index":260,"title":{},"body":{"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"modules/SplashPageRoutingModule.html":{}}}],["routermodule.forchild(routes",{"_index":264,"title":{},"body":{"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SplashPageRoutingModule.html":{}}}],["routermodule.forroot(routes",{"_index":1110,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["routerstatesnapshot",{"_index":1291,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["routes",{"_index":259,"title":{"routes.html":{}},"body":{"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SplashPageRoutingModule.html":{},"overview.html":{},"routes.html":{}}}],["routing",{"_index":3132,"title":{},"body":{"components/ProfilePage.html":{}}}],["routing.module",{"_index":251,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{}}}],["routing.module.ts",{"_index":258,"title":{},"body":{"modules/AboutPageRoutingModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"modules/AppRoutingModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"modules/HomePageRoutingModule.html":{},"modules/ListPageRoutingModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"modules/LoginPageRoutingModule.html":{},"modules/ProfilePageRoutingModule.html":{},"modules/RegisterPageRoutingModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SplashPageRoutingModule.html":{}}}],["runs",{"_index":2538,"title":{},"body":{"components/HomePage.html":{}}}],["rxjs",{"_index":771,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{},"injectables/UserBaseRepository.html":{},"dependencies.html":{}}}],["rápida",{"_index":3920,"title":{},"body":{"index.html":{}}}],["rápidamente",{"_index":3879,"title":{},"body":{"index.html":{}}}],["rápido",{"_index":3859,"title":{},"body":{"index.html":{}}}],["s",{"_index":2029,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["safely",{"_index":1654,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["sans",{"_index":1952,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["saveas",{"_index":545,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["saveas(blob",{"_index":587,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["saved",{"_index":1403,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{}}}],["savedlang",{"_index":3614,"title":{},"body":{"injectables/TranslationService.html":{}}}],["saver",{"_index":546,"title":{},"body":{"components/AdminPanelPage.html":{},"dependencies.html":{}}}],["saves",{"_index":1429,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{}}}],["sc",{"_index":2027,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["scale(1.05",{"_index":1747,"title":{},"body":{"components/CryptocardComponent.html":{},"components/ProfilePage.html":{}}}],["scale(1.1",{"_index":928,"title":{},"body":{"components/AppComponent.html":{}}}],["scales",{"_index":1964,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["screen",{"_index":1279,"title":{},"body":{"guards/AuthGuard.html":{},"components/SplashPage.html":{},"index.html":{}}}],["scroll",{"_index":528,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{},"components/SearchPage.html":{}}}],["scroller",{"_index":3817,"title":{},"body":{"dependencies.html":{}}}],["scrolling",{"_index":513,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["scrollingmodule",{"_index":3421,"title":{},"body":{"modules/SearchPageModule.html":{}}}],["scrolls",{"_index":529,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{}}}],["se",{"_index":932,"title":{},"body":{"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/SplashPage.html":{}}}],["sea",{"_index":388,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["search",{"_index":742,"title":{},"body":{"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/ListcontentPage.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{}}}],["search',hidden:false",{"_index":743,"title":{},"body":{"components/AppComponent.html":{}}}],["search'},{'name",{"_index":216,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["search.page",{"_index":3420,"title":{},"body":{"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{}}}],["search.page.html",{"_index":3257,"title":{},"body":{"components/SearchPage.html":{}}}],["search.page.scss",{"_index":3256,"title":{},"body":{"components/SearchPage.html":{}}}],["search/:id",{"_index":1091,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["searchinput",{"_index":3262,"title":{},"body":{"components/SearchPage.html":{}}}],["searchinput:string",{"_index":3328,"title":{},"body":{"components/SearchPage.html":{}}}],["searchpage",{"_index":215,"title":{"components/SearchPage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"components/SplashPage.html":{},"coverage.html":{},"overview.html":{}}}],["searchpagemodule",{"_index":3414,"title":{"modules/SearchPageModule.html":{}},"body":{"modules/SearchPageModule.html":{},"modules.html":{},"overview.html":{}}}],["searchpageroutingmodule",{"_index":3418,"title":{"modules/SearchPageRoutingModule.html":{}},"body":{"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules.html":{},"overview.html":{}}}],["sección",{"_index":166,"title":{},"body":{"components/AboutPage.html":{}}}],["secondary",{"_index":2905,"title":{},"body":{"components/ListPage.html":{}}}],["section",{"_index":93,"title":{},"body":{"components/AboutPage.html":{}}}],["security",{"_index":2191,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["según",{"_index":3944,"title":{},"body":{"index.html":{}}}],["seleccionado",{"_index":2024,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["select",{"_index":3074,"title":{},"body":{"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["selected",{"_index":488,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"injectables/TranslationService.html":{}}}],["selected_language",{"_index":3612,"title":{},"body":{"injectables/TranslationService.html":{}}}],["selectedcurrency",{"_index":3124,"title":{},"body":{"components/ProfilePage.html":{}}}],["selectedoption",{"_index":2081,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["selectedoption:any",{"_index":2135,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["selecting",{"_index":2062,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["selection",{"_index":3066,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["selector",{"_index":26,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["self",{"_index":1804,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["separadora",{"_index":949,"title":{},"body":{"components/AppComponent.html":{}}}],["separar",{"_index":1764,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["serif",{"_index":1953,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["server",{"_index":1215,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["service",{"_index":22,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseMediaService.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"classes/StrapiMediaService.html":{},"interfaces/StsTokenManager.html":{},"injectables/TranslationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/cryptosxd.html":{},"miscellaneous/functions.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["service.interface",{"_index":549,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["service.interface.ts",{"_index":1709,"title":{},"body":{"interfaces/CryptoCoinGeko.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserbaseService.html":{},"coverage.html":{}}}],["service.interface.ts:101",{"_index":2792,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:112",{"_index":2794,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:118",{"_index":2805,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:12",{"_index":2668,"title":{},"body":{"interfaces/ICryptobaseService.html":{}}}],["service.interface.ts:13",{"_index":2802,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:20",{"_index":2790,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:21",{"_index":2667,"title":{},"body":{"interfaces/ICryptobaseService.html":{}}}],["service.interface.ts:27",{"_index":2809,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:28",{"_index":2670,"title":{},"body":{"interfaces/ICryptobaseService.html":{}}}],["service.interface.ts:34",{"_index":2812,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:38",{"_index":2672,"title":{},"body":{"interfaces/ICryptobaseService.html":{}}}],["service.interface.ts:43",{"_index":2787,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:51",{"_index":2807,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:58",{"_index":2797,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:65",{"_index":2785,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:72",{"_index":2813,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:78",{"_index":2798,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:84",{"_index":2799,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["service.interface.ts:93",{"_index":2793,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["services",{"_index":289,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"miscellaneous/variables.html":{}}}],["services/interfaces/authentication/authentication.interface",{"_index":1312,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["services/interfaces/user/user",{"_index":1345,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["servicios",{"_index":3930,"title":{},"body":{"index.html":{}}}],["session",{"_index":1287,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["set",{"_index":1406,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"directives/ColorpercentDirective.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{}}}],["setcurrency",{"_index":1381,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["setcurrency(currency",{"_index":1427,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["setcurrency(currency:string):string",{"_index":2638,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["setdisabledstate",{"_index":2085,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["setdisabledstate(isdisabled",{"_index":2106,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["setdisabledstate?(isdisabled",{"_index":2143,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["setdoc",{"_index":2253,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["setdoc(doc(firestore,\"persons\",usercredential.user.uid",{"_index":2276,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["setid",{"_index":1382,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["setid(id",{"_index":1430,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["setid(id:string",{"_index":1467,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["setid(id:string):void",{"_index":2641,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["setlanguage",{"_index":3604,"title":{},"body":{"injectables/TranslationService.html":{}}}],["setlanguage(lang",{"_index":3610,"title":{},"body":{"injectables/TranslationService.html":{}}}],["setmenu",{"_index":1383,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["setmenu(val",{"_index":1433,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["setmenu(val:boolean",{"_index":1472,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["setmenu(val:boolean):void",{"_index":2635,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["setmenutitles",{"_index":683,"title":{},"body":{"components/AppComponent.html":{}}}],["setmenutitles(lang",{"_index":728,"title":{},"body":{"components/AppComponent.html":{}}}],["setmenutitles(lang:string",{"_index":783,"title":{},"body":{"components/AppComponent.html":{}}}],["sets",{"_index":16,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptoviewPage.html":{},"interfaces/IAuthenticationService.html":{},"injectables/TranslationService.html":{}}}],["settimeout",{"_index":3388,"title":{},"body":{"components/SearchPage.html":{}}}],["setting",{"_index":3609,"title":{},"body":{"injectables/TranslationService.html":{}}}],["settoken",{"_index":1384,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["settoken(token",{"_index":1436,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["settoken(token:string",{"_index":1464,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["settoken(token:string):void",{"_index":2636,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["shade",{"_index":874,"title":{},"body":{"components/AppComponent.html":{}}}],["shadow",{"_index":149,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["shared",{"_index":457,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{}}}],["shared/shared.module",{"_index":2930,"title":{},"body":{"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{}}}],["shared/splash/splash.page",{"_index":1069,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["shared:sharedservice",{"_index":554,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["sharedmodule",{"_index":2588,"title":{"modules/SharedModule.html":{}},"body":{"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"modules.html":{},"overview.html":{}}}],["sharedservice",{"_index":458,"title":{"injectables/SharedService.html":{}},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"coverage.html":{}}}],["show",{"_index":2533,"title":{},"body":{"components/HomePage.html":{},"components/LoginPage.html":{}}}],["showing",{"_index":1735,"title":{},"body":{"components/CryptocardComponent.html":{},"components/RegisterPage.html":{}}}],["shows",{"_index":481,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["showtoast",{"_index":3444,"title":{},"body":{"injectables/SharedService.html":{}}}],["showtoast(color",{"_index":3449,"title":{},"body":{"injectables/SharedService.html":{}}}],["si",{"_index":2516,"title":{},"body":{"components/FormularyComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/SplashPage.html":{}}}],["side",{"_index":698,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["siempre",{"_index":876,"title":{},"body":{"components/AppComponent.html":{}}}],["sign",{"_index":3110,"title":{},"body":{"pipes/PercentformaterPipe.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["signing",{"_index":2228,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["signinwithemailandpassword",{"_index":2250,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["signinwithemailandpassword(auth",{"_index":2288,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["siguiente",{"_index":3970,"title":{},"body":{"index.html":{}}}],["similar",{"_index":1439,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["simple",{"_index":1604,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptosimplecardComponent.html":{},"interfaces/ICryptobaseService.html":{}}}],["simplechanges",{"_index":1361,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{}}}],["sin",{"_index":3201,"title":{},"body":{"components/ProfilePage.html":{}}}],["size",{"_index":116,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["sizing",{"_index":1794,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{}}}],["small",{"_index":1182,"title":{"interfaces/Small.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["snapshot",{"_index":1305,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["sobre",{"_index":926,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["sobresalga",{"_index":912,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["solid",{"_index":851,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["sombra",{"_index":398,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["soporte",{"_index":3839,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AboutPage.html":{},"modules/AboutPageModule.html":{},"modules/AboutPageRoutingModule.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"modules/AppRoutingModule.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoCoinGeko.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/CryptoviewPageRoutingModule.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"modules/HomePageRoutingModule.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICoinGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseAuthentication.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiAuthentication.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"modules/ListPageRoutingModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"modules/ListcontentPageRoutingModule.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"modules/LoginPageRoutingModule.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"modules/ProfilePageRoutingModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"modules/RegisterPageRoutingModule.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SearchPageRoutingModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["space",{"_index":1750,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{}}}],["spacing",{"_index":632,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["span",{"_index":2652,"title":{},"body":{"interfaces/ICryptoBase.html":{}}}],["specific",{"_index":1455,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/ICryptoBaseMapping.html":{},"components/ListcontentPage.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["specifically",{"_index":3649,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["specified",{"_index":1610,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"interfaces/ICryptoBase.html":{},"interfaces/IUserbaseService.html":{},"injectables/SharedService.html":{},"miscellaneous/variables.html":{}}}],["specifies",{"_index":4050,"title":{},"body":{"miscellaneous/variables.html":{}}}],["speech",{"_index":3290,"title":{},"body":{"components/SearchPage.html":{}}}],["speechrecognition",{"_index":3321,"title":{},"body":{"components/SearchPage.html":{}}}],["speechrecognition.available",{"_index":3364,"title":{},"body":{"components/SearchPage.html":{}}}],["speechrecognition.requestpermissions",{"_index":3363,"title":{},"body":{"components/SearchPage.html":{}}}],["speechrecognition.start",{"_index":3365,"title":{},"body":{"components/SearchPage.html":{}}}],["splash",{"_index":218,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"index.html":{}}}],["splash.page",{"_index":3504,"title":{},"body":{"modules/SplashPageRoutingModule.html":{}}}],["splash.page.html",{"_index":3463,"title":{},"body":{"components/SplashPage.html":{}}}],["splash.page.scss",{"_index":3462,"title":{},"body":{"components/SplashPage.html":{}}}],["splashpage",{"_index":217,"title":{"components/SplashPage.html":{}},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"modules/AppRoutingModule.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"modules/SplashPageRoutingModule.html":{},"coverage.html":{}}}],["splashpageroutingmodule",{"_index":3502,"title":{"modules/SplashPageRoutingModule.html":{}},"body":{"modules/SplashPageRoutingModule.html":{},"modules.html":{}}}],["spoken",{"_index":3294,"title":{},"body":{"components/SearchPage.html":{}}}],["spokentext",{"_index":3367,"title":{},"body":{"components/SearchPage.html":{}}}],["src/.../app.module.ts",{"_index":3824,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../environment.prod.ts",{"_index":3991,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":3992,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../factory.ts",{"_index":3823,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../repository.tokens.ts",{"_index":3990,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../search.page.ts",{"_index":3993,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/app",{"_index":1067,"title":{},"body":{"modules/AppRoutingModule.html":{}}}],["src/app/app.component.ts",{"_index":673,"title":{},"body":{"components/AppComponent.html":{},"coverage.html":{}}}],["src/app/app.component.ts:134",{"_index":763,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:139",{"_index":727,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:148",{"_index":708,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:21",{"_index":691,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:212",{"_index":718,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:47",{"_index":759,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:48",{"_index":761,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:55",{"_index":729,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:84",{"_index":757,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:98",{"_index":723,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":965,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/app/core/directives/backgraphbutton.directive",{"_index":1870,"title":{},"body":{"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{}}}],["src/app/core/directives/backgraphbutton.directive.ts",{"_index":1349,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"coverage.html":{}}}],["src/app/core/directives/backgraphbutton.directive.ts:11",{"_index":1359,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{}}}],["src/app/core/directives/backgraphbutton.directive.ts:15",{"_index":1363,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{}}}],["src/app/core/directives/backgraphbutton.directive.ts:19",{"_index":1362,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{}}}],["src/app/core/directives/colorpercent.directive",{"_index":2047,"title":{},"body":{"modules/CryptoviewPageModule.html":{}}}],["src/app/core/directives/colorpercent.directive.ts",{"_index":1636,"title":{},"body":{"directives/ColorpercentDirective.html":{},"coverage.html":{}}}],["src/app/core/directives/colorpercent.directive.ts:20",{"_index":1651,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["src/app/core/directives/colorpercent.directive.ts:35",{"_index":1658,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["src/app/core/guards/auth.guard.ts",{"_index":1273,"title":{},"body":{"guards/AuthGuard.html":{},"coverage.html":{}}}],["src/app/core/guards/auth.guard.ts:16",{"_index":1284,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/core/guards/auth.guard.ts:38",{"_index":1292,"title":{},"body":{"guards/AuthGuard.html":{}}}],["src/app/core/guards/auth2.guard.ts",{"_index":1319,"title":{},"body":{"guards/AuthGuard2.html":{},"coverage.html":{}}}],["src/app/core/guards/auth2.guard.ts:16",{"_index":1324,"title":{},"body":{"guards/AuthGuard2.html":{}}}],["src/app/core/guards/auth2.guard.ts:39",{"_index":1326,"title":{},"body":{"guards/AuthGuard2.html":{}}}],["src/app/core/guards/authadmin.guard.ts",{"_index":1333,"title":{},"body":{"guards/AuthGuardAdmin.html":{},"coverage.html":{}}}],["src/app/core/guards/authadmin.guard.ts:18",{"_index":1338,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["src/app/core/guards/authadmin.guard.ts:42",{"_index":1339,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["src/app/core/models/auth.model",{"_index":2174,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["src/app/core/models/auth.model.ts",{"_index":3105,"title":{},"body":{"interfaces/LoginPayLoad.html":{},"interfaces/RegisterPayLoad.html":{},"coverage.html":{}}}],["src/app/core/models/base.model.ts",{"_index":3106,"title":{},"body":{"interfaces/Model.html":{},"coverage.html":{}}}],["src/app/core/models/crypto.model",{"_index":1123,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["src/app/core/models/crypto.model.ts",{"_index":658,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/BasicCrypto.html":{},"interfaces/CryptoGraphPrice.html":{},"coverage.html":{}}}],["src/app/core/models/cryptolist.model",{"_index":1122,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["src/app/core/models/cryptolist.model.ts",{"_index":1556,"title":{},"body":{"interfaces/BasicList.html":{},"interfaces/CryptoList.html":{},"coverage.html":{}}}],["src/app/core/models/user.model",{"_index":327,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["src/app/core/models/user.model.ts",{"_index":1559,"title":{},"body":{"interfaces/BasicUser.html":{},"interfaces/User.html":{},"coverage.html":{}}}],["src/app/core/pipes/currency.pipe",{"_index":1871,"title":{},"body":{"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{}}}],["src/app/core/pipes/currency.pipe.ts",{"_index":2051,"title":{},"body":{"pipes/CurrencyPipe.html":{},"coverage.html":{}}}],["src/app/core/pipes/currency.pipe.ts:23",{"_index":2056,"title":{},"body":{"pipes/CurrencyPipe.html":{}}}],["src/app/core/pipes/percentformater.pipe",{"_index":2048,"title":{},"body":{"modules/CryptoviewPageModule.html":{}}}],["src/app/core/pipes/percentformater.pipe.ts",{"_index":3107,"title":{},"body":{"pipes/PercentformaterPipe.html":{},"coverage.html":{}}}],["src/app/core/pipes/percentformater.pipe.ts:20",{"_index":3114,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["src/app/core/repositories/factory.ts",{"_index":3701,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/repositories/impl/crypto/coingeko.repository.ts",{"_index":1572,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"coverage.html":{}}}],["src/app/core/repositories/impl/crypto/coingeko.repository.ts:18",{"_index":1585,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["src/app/core/repositories/impl/crypto/coingekomapping.service.ts",{"_index":1491,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{},"coverage.html":{}}}],["src/app/core/repositories/impl/crypto/coingekomapping.service.ts:105",{"_index":1570,"title":{},"body":{"injectables/CoinGekoMapping.html":{}}}],["src/app/core/repositories/impl/crypto/coingekomapping.service.ts:72",{"_index":1569,"title":{},"body":{"injectables/CoinGekoMapping.html":{}}}],["src/app/core/repositories/impl/crypto/coingekomapping.service.ts:90",{"_index":1568,"title":{},"body":{"injectables/CoinGekoMapping.html":{}}}],["src/app/core/repositories/impl/crypto/cryptobase.repository.ts",{"_index":1664,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"coverage.html":{}}}],["src/app/core/repositories/impl/crypto/cryptobase.repository.ts:21",{"_index":1668,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["src/app/core/repositories/impl/crypto/cryptobase.repository.ts:46",{"_index":1674,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["src/app/core/repositories/impl/crypto/cryptobase.repository.ts:59",{"_index":1672,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["src/app/core/repositories/impl/crypto/cryptobase.repository.ts:71",{"_index":1671,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["src/app/core/repositories/impl/crypto/cryptobase.repository.ts:81",{"_index":1673,"title":{},"body":{"injectables/CryptoBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/firebase",{"_index":2385,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"coverage.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["src/app/core/repositories/impl/user/strapiuser.repository.ts",{"_index":3713,"title":{},"body":{"coverage.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts",{"_index":1113,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:207",{"_index":3595,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:229",{"_index":3590,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:244",{"_index":3591,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:253",{"_index":3596,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:267",{"_index":3592,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:283",{"_index":3593,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:297",{"_index":3586,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:310",{"_index":3587,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:323",{"_index":3589,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:338",{"_index":3597,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/strapiusermapping.service.ts:361",{"_index":3594,"title":{},"body":{"injectables/StrapiUserMapping.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts",{"_index":3621,"title":{},"body":{"injectables/UserBaseRepository.html":{},"coverage.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:14",{"_index":3622,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:26",{"_index":3629,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:29",{"_index":3628,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:32",{"_index":3627,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:35",{"_index":3631,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:38",{"_index":3636,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:41",{"_index":3625,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:44",{"_index":3630,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:47",{"_index":3624,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:50",{"_index":3633,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:53",{"_index":3635,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:56",{"_index":3632,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:59",{"_index":3626,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/impl/user/userbase.repository.ts:62",{"_index":3634,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["src/app/core/repositories/interfaces/crypto/coingeko.interface.ts",{"_index":2643,"title":{},"body":{"interfaces/ICoinGeko.html":{},"coverage.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobase.interface.ts",{"_index":2645,"title":{},"body":{"interfaces/ICryptoBase.html":{},"coverage.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobase.interface.ts:15",{"_index":2647,"title":{},"body":{"interfaces/ICryptoBase.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobase.interface.ts:23",{"_index":2646,"title":{},"body":{"interfaces/ICryptoBase.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobase.interface.ts:29",{"_index":2650,"title":{},"body":{"interfaces/ICryptoBase.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobase.interface.ts:38",{"_index":2651,"title":{},"body":{"interfaces/ICryptoBase.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobasemapping.interface.ts",{"_index":2658,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{},"coverage.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobasemapping.interface.ts:17",{"_index":2660,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobasemapping.interface.ts:25",{"_index":2659,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/crypto/cryptobasemapping.interface.ts:33",{"_index":2664,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/firebase.interface.ts",{"_index":2719,"title":{},"body":{"interfaces/IUserFirebaseRepository.html":{},"coverage.html":{}}}],["src/app/core/repositories/interfaces/user/strapi.interface.ts",{"_index":2723,"title":{},"body":{"interfaces/IUserStrapiRepositoy.html":{},"coverage.html":{}}}],["src/app/core/repositories/interfaces/user/user",{"_index":2725,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts",{"_index":2689,"title":{},"body":{"interfaces/IUserBaseMapping.html":{},"coverage.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:103",{"_index":2703,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:17",{"_index":2704,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:26",{"_index":2696,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:34",{"_index":2698,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:42",{"_index":2705,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:50",{"_index":2699,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:59",{"_index":2700,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:67",{"_index":2693,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:75",{"_index":2692,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:83",{"_index":2694,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/interfaces/user/userbasemapping.interface.ts:91",{"_index":2706,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["src/app/core/repositories/repository.tokens",{"_index":64,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"classes/StrapiMediaService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["src/app/core/repositories/repository.tokens.ts",{"_index":3728,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/services/impl/authentication/base",{"_index":1373,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"coverage.html":{}}}],["src/app/core/services/impl/authentication/firebase",{"_index":2150,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{}}}],["src/app/core/services/impl/authentication/strapi",{"_index":3505,"title":{},"body":{"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"coverage.html":{}}}],["src/app/core/services/impl/crypto/cryptobase.service.ts",{"_index":1686,"title":{},"body":{"injectables/CryptoBaseService.html":{},"coverage.html":{}}}],["src/app/core/services/impl/crypto/cryptobase.service.ts:15",{"_index":1689,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["src/app/core/services/impl/crypto/cryptobase.service.ts:27",{"_index":1696,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["src/app/core/services/impl/crypto/cryptobase.service.ts:38",{"_index":1691,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["src/app/core/services/impl/crypto/cryptobase.service.ts:48",{"_index":1690,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["src/app/core/services/impl/crypto/cryptobase.service.ts:56",{"_index":1695,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["src/app/core/services/impl/crypto/cryptogeko.service.ts",{"_index":1710,"title":{},"body":{"injectables/CryptoGeko.html":{},"coverage.html":{}}}],["src/app/core/services/impl/crypto/cryptogeko.service.ts:16",{"_index":1714,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["src/app/core/services/impl/firebasemain.service.ts",{"_index":2306,"title":{},"body":{"injectables/FirebaseMainService.html":{},"coverage.html":{}}}],["src/app/core/services/impl/firebasemain.service.ts:17",{"_index":2324,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["src/app/core/services/impl/firebasemain.service.ts:18",{"_index":2325,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["src/app/core/services/impl/firebasemain.service.ts:19",{"_index":2316,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["src/app/core/services/impl/firebasemain.service.ts:42",{"_index":2319,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["src/app/core/services/impl/firebasemain.service.ts:51",{"_index":2322,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["src/app/core/services/impl/firebasemain.service.ts:60",{"_index":2323,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["src/app/core/services/impl/media/base",{"_index":1479,"title":{},"body":{"injectables/BaseMediaService.html":{},"components/ProfilePage.html":{},"coverage.html":{}}}],["src/app/core/services/impl/media/firebase",{"_index":2337,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"coverage.html":{}}}],["src/app/core/services/impl/media/strapi",{"_index":3572,"title":{},"body":{"classes/StrapiMediaService.html":{},"coverage.html":{}}}],["src/app/core/services/impl/translation.service",{"_index":1872,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/RegisterPage.html":{}}}],["src/app/core/services/impl/translation.service.ts",{"_index":3598,"title":{},"body":{"injectables/TranslationService.html":{},"coverage.html":{}}}],["src/app/core/services/impl/translation.service.ts:12",{"_index":3605,"title":{},"body":{"injectables/TranslationService.html":{}}}],["src/app/core/services/impl/translation.service.ts:30",{"_index":3608,"title":{},"body":{"injectables/TranslationService.html":{}}}],["src/app/core/services/impl/translation.service.ts:41",{"_index":3611,"title":{},"body":{"injectables/TranslationService.html":{}}}],["src/app/core/services/impl/translation.service.ts:51",{"_index":3607,"title":{},"body":{"injectables/TranslationService.html":{}}}],["src/app/core/services/impl/user/base",{"_index":3741,"title":{},"body":{"coverage.html":{}}}],["src/app/core/services/impl/user/firebase",{"_index":3647,"title":{},"body":{"injectables/UserFirebaseService.html":{},"coverage.html":{}}}],["src/app/core/services/impl/user/strapi",{"_index":3681,"title":{},"body":{"injectables/UserStrapiService.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/authentication/auth",{"_index":2593,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface",{"_index":65,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts",{"_index":2611,"title":{},"body":{"interfaces/IAuthenticationService.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:103",{"_index":2623,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:110",{"_index":2615,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:14",{"_index":2618,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:19",{"_index":2621,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:27",{"_index":2622,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:36",{"_index":2613,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:43",{"_index":2617,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:50",{"_index":2628,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:57",{"_index":2626,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:64",{"_index":2627,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:69",{"_index":2612,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:77",{"_index":2624,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:84",{"_index":2614,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:91",{"_index":2616,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/authentication.interface.ts:98",{"_index":2625,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["src/app/core/services/interfaces/authentication/firebase",{"_index":2673,"title":{},"body":{"interfaces/IFirebaseAuthentication.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/authentication/strapi",{"_index":2686,"title":{},"body":{"interfaces/IStrapiAuthentication.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/crypto/coingeko",{"_index":1708,"title":{},"body":{"interfaces/CryptoCoinGeko.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/crypto/crypto",{"_index":1873,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{},"interfaces/ICryptobaseService.html":{},"components/SearchPage.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/firebasemain.service.interface.ts",{"_index":2675,"title":{},"body":{"interfaces/IFirebaseMainService.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/firebasemain.service.interface.ts:15",{"_index":2676,"title":{},"body":{"interfaces/IFirebaseMainService.html":{}}}],["src/app/core/services/interfaces/firebasemain.service.interface.ts:21",{"_index":2678,"title":{},"body":{"interfaces/IFirebaseMainService.html":{}}}],["src/app/core/services/interfaces/firebasemain.service.interface.ts:9",{"_index":2677,"title":{},"body":{"interfaces/IFirebaseMainService.html":{}}}],["src/app/core/services/interfaces/user/firebase.service.interface.ts",{"_index":2683,"title":{},"body":{"interfaces/IFirebaseService.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/user/strapi.service.interface.ts",{"_index":2688,"title":{},"body":{"interfaces/IStrapiService.html":{},"coverage.html":{}}}],["src/app/core/services/interfaces/user/user",{"_index":548,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"coverage.html":{}}}],["src/app/pages/general/about/about",{"_index":257,"title":{},"body":{"modules/AboutPageRoutingModule.html":{}}}],["src/app/pages/general/about/about.module.ts",{"_index":242,"title":{},"body":{"modules/AboutPageModule.html":{}}}],["src/app/pages/general/about/about.page.ts",{"_index":10,"title":{},"body":{"components/AboutPage.html":{},"coverage.html":{}}}],["src/app/pages/general/about/about.page.ts:16",{"_index":39,"title":{},"body":{"components/AboutPage.html":{}}}],["src/app/pages/general/about/about.page.ts:29",{"_index":53,"title":{},"body":{"components/AboutPage.html":{}}}],["src/app/pages/general/admin",{"_index":425,"title":{},"body":{"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"modules/AdminPanelPageRoutingModule.html":{},"coverage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview",{"_index":2049,"title":{},"body":{"modules/CryptoviewPageRoutingModule.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.module.ts",{"_index":2042,"title":{},"body":{"modules/CryptoviewPageModule.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts",{"_index":1808,"title":{},"body":{"components/CryptoviewPage.html":{},"coverage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:112",{"_index":1849,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:123",{"_index":1837,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:156",{"_index":1853,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:168",{"_index":1843,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:30",{"_index":1867,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:304",{"_index":1858,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:31",{"_index":1865,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:315",{"_index":1846,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:32",{"_index":1864,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:325",{"_index":1833,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:33",{"_index":1866,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:34",{"_index":1868,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:35",{"_index":1862,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:36",{"_index":1828,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:62",{"_index":1861,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/cryptoview/cryptoview.page.ts:96",{"_index":1851,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["src/app/pages/general/home/home",{"_index":2592,"title":{},"body":{"modules/HomePageRoutingModule.html":{}}}],["src/app/pages/general/home/home.module.ts",{"_index":2589,"title":{},"body":{"modules/HomePageModule.html":{}}}],["src/app/pages/general/home/home.page.ts",{"_index":2526,"title":{},"body":{"components/HomePage.html":{},"coverage.html":{}}}],["src/app/pages/general/home/home.page.ts:105",{"_index":2543,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:115",{"_index":2534,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:27",{"_index":2548,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:28",{"_index":2550,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:29",{"_index":2552,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:30",{"_index":2549,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:31",{"_index":2532,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:55",{"_index":2544,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:65",{"_index":2537,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:82",{"_index":2542,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/home/home.page.ts:97",{"_index":2546,"title":{},"body":{"components/HomePage.html":{}}}],["src/app/pages/general/list/list",{"_index":2931,"title":{},"body":{"modules/ListPageRoutingModule.html":{}}}],["src/app/pages/general/list/list.module.ts",{"_index":2928,"title":{},"body":{"modules/ListPageModule.html":{}}}],["src/app/pages/general/list/list.page.ts",{"_index":2825,"title":{},"body":{"components/ListPage.html":{},"coverage.html":{}}}],["src/app/pages/general/list/list.page.ts:121",{"_index":2845,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:138",{"_index":2850,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:150",{"_index":2841,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:176",{"_index":2852,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:24",{"_index":2836,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:37",{"_index":2864,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:44",{"_index":2863,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:45",{"_index":2861,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:46",{"_index":2862,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:51",{"_index":2853,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:64",{"_index":2843,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:72",{"_index":2860,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/list/list.page.ts:83",{"_index":2855,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/pages/general/listcontent/listcontent",{"_index":2983,"title":{},"body":{"modules/ListcontentPageRoutingModule.html":{}}}],["src/app/pages/general/listcontent/listcontent.module.ts",{"_index":2981,"title":{},"body":{"modules/ListcontentPageModule.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts",{"_index":2932,"title":{},"body":{"components/ListcontentPage.html":{},"coverage.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts:24",{"_index":2946,"title":{},"body":{"components/ListcontentPage.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts:25",{"_index":2945,"title":{},"body":{"components/ListcontentPage.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts:26",{"_index":2948,"title":{},"body":{"components/ListcontentPage.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts:27",{"_index":2936,"title":{},"body":{"components/ListcontentPage.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts:56",{"_index":2941,"title":{},"body":{"components/ListcontentPage.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts:67",{"_index":2938,"title":{},"body":{"components/ListcontentPage.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts:76",{"_index":2939,"title":{},"body":{"components/ListcontentPage.html":{}}}],["src/app/pages/general/listcontent/listcontent.page.ts:99",{"_index":2942,"title":{},"body":{"components/ListcontentPage.html":{}}}],["src/app/pages/general/profile/profile",{"_index":3223,"title":{},"body":{"modules/ProfilePageRoutingModule.html":{}}}],["src/app/pages/general/profile/profile.module.ts",{"_index":3217,"title":{},"body":{"modules/ProfilePageModule.html":{}}}],["src/app/pages/general/profile/profile.page.ts",{"_index":3118,"title":{},"body":{"components/ProfilePage.html":{},"coverage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:108",{"_index":3140,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:116",{"_index":3134,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:150",{"_index":3142,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:174",{"_index":3147,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:188",{"_index":3138,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:25",{"_index":3152,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:26",{"_index":3154,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:27",{"_index":3149,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:28",{"_index":3129,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:64",{"_index":3155,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:72",{"_index":3148,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:80",{"_index":3151,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:81",{"_index":3150,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:86",{"_index":3135,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/profile/profile.page.ts:95",{"_index":3136,"title":{},"body":{"components/ProfilePage.html":{}}}],["src/app/pages/general/search/search",{"_index":3423,"title":{},"body":{"modules/SearchPageRoutingModule.html":{}}}],["src/app/pages/general/search/search.module.ts",{"_index":3419,"title":{},"body":{"modules/SearchPageModule.html":{}}}],["src/app/pages/general/search/search.page.ts",{"_index":3255,"title":{},"body":{"components/SearchPage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/app/pages/general/search/search.page.ts:113",{"_index":3287,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:129",{"_index":3278,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:147",{"_index":3280,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:162",{"_index":3305,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:199",{"_index":3297,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:205",{"_index":3313,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:206",{"_index":3317,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:207",{"_index":3314,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:208",{"_index":3320,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:209",{"_index":3319,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:214",{"_index":3289,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:231",{"_index":3300,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:239",{"_index":3304,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:248",{"_index":3292,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:28",{"_index":3312,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:29",{"_index":3318,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:30",{"_index":3271,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:58",{"_index":3311,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:59",{"_index":3315,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:60",{"_index":3310,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:65",{"_index":3298,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:80",{"_index":3285,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/general/search/search.page.ts:91",{"_index":3283,"title":{},"body":{"components/SearchPage.html":{}}}],["src/app/pages/start/login/login",{"_index":3104,"title":{},"body":{"modules/LoginPageRoutingModule.html":{}}}],["src/app/pages/start/login/login.module.ts",{"_index":3101,"title":{},"body":{"modules/LoginPageModule.html":{}}}],["src/app/pages/start/login/login.page.ts",{"_index":3059,"title":{},"body":{"components/LoginPage.html":{},"coverage.html":{}}}],["src/app/pages/start/login/login.page.ts:112",{"_index":3072,"title":{},"body":{"components/LoginPage.html":{}}}],["src/app/pages/start/login/login.page.ts:21",{"_index":3064,"title":{},"body":{"components/LoginPage.html":{}}}],["src/app/pages/start/login/login.page.ts:47",{"_index":3068,"title":{},"body":{"components/LoginPage.html":{}}}],["src/app/pages/start/login/login.page.ts:56",{"_index":3070,"title":{},"body":{"components/LoginPage.html":{}}}],["src/app/pages/start/login/login.page.ts:70",{"_index":3073,"title":{},"body":{"components/LoginPage.html":{}}}],["src/app/pages/start/register/register",{"_index":3254,"title":{},"body":{"modules/RegisterPageRoutingModule.html":{}}}],["src/app/pages/start/register/register.module.ts",{"_index":3252,"title":{},"body":{"modules/RegisterPageModule.html":{}}}],["src/app/pages/start/register/register.page.ts",{"_index":3224,"title":{},"body":{"components/RegisterPage.html":{},"coverage.html":{}}}],["src/app/pages/start/register/register.page.ts:22",{"_index":3227,"title":{},"body":{"components/RegisterPage.html":{}}}],["src/app/pages/start/register/register.page.ts:50",{"_index":3232,"title":{},"body":{"components/RegisterPage.html":{}}}],["src/app/pages/start/register/register.page.ts:59",{"_index":3238,"title":{},"body":{"components/RegisterPage.html":{}}}],["src/app/pages/start/register/register.page.ts:70",{"_index":3240,"title":{},"body":{"components/RegisterPage.html":{}}}],["src/app/pages/start/register/register.page.ts:71",{"_index":3239,"title":{},"body":{"components/RegisterPage.html":{}}}],["src/app/pages/start/register/register.page.ts:76",{"_index":3233,"title":{},"body":{"components/RegisterPage.html":{}}}],["src/app/pages/start/register/register.page.ts:84",{"_index":3234,"title":{},"body":{"components/RegisterPage.html":{}}}],["src/app/pages/start/register/register.page.ts:93",{"_index":3236,"title":{},"body":{"components/RegisterPage.html":{}}}],["src/app/shared/admin",{"_index":265,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"coverage.html":{}}}],["src/app/shared/cryptocard/cryptocard.component.ts",{"_index":1724,"title":{},"body":{"components/CryptocardComponent.html":{},"coverage.html":{}}}],["src/app/shared/cryptocard/cryptocard.component.ts:14",{"_index":1730,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["src/app/shared/cryptocard/cryptocard.component.ts:15",{"_index":1731,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["src/app/shared/cryptocard/cryptocard.component.ts:16",{"_index":1729,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["src/app/shared/cryptosimplecard/cryptosimplecard.component.ts",{"_index":1766,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"coverage.html":{}}}],["src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:13",{"_index":1773,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:16",{"_index":1774,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:17",{"_index":1775,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:18",{"_index":1777,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:24",{"_index":1779,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["src/app/shared/custom",{"_index":2058,"title":{},"body":{"components/CustomGenderComponent.html":{},"coverage.html":{}}}],["src/app/shared/formulary/formulary.component.ts",{"_index":2430,"title":{},"body":{"components/FormularyComponent.html":{},"coverage.html":{}}}],["src/app/shared/formulary/formulary.component.ts:103",{"_index":2467,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:115",{"_index":2449,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:23",{"_index":2455,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:24",{"_index":2441,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:25",{"_index":2440,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:26",{"_index":2438,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:29",{"_index":2461,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:36",{"_index":2445,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:67",{"_index":2458,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:68",{"_index":2457,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:74",{"_index":2442,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:82",{"_index":2463,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:89",{"_index":2465,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/formulary/formulary.component.ts:96",{"_index":2466,"title":{},"body":{"components/FormularyComponent.html":{}}}],["src/app/shared/listcrypto/listcrypto.component.ts",{"_index":2984,"title":{},"body":{"components/ListcryptoComponent.html":{},"coverage.html":{}}}],["src/app/shared/listcrypto/listcrypto.component.ts:19",{"_index":2990,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["src/app/shared/listcrypto/listcrypto.component.ts:21",{"_index":2991,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["src/app/shared/listcrypto/listcrypto.component.ts:22",{"_index":2992,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["src/app/shared/listcrypto/listcrypto.component.ts:29",{"_index":2994,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["src/app/shared/listcrypto/listcrypto.component.ts:39",{"_index":2999,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component",{"_index":2865,"title":{},"body":{"components/ListPage.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts",{"_index":3012,"title":{},"body":{"components/ListformularyComponent.html":{},"coverage.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:21",{"_index":3017,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:22",{"_index":3018,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:23",{"_index":3016,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:33",{"_index":3028,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:41",{"_index":3024,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:50",{"_index":3026,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:72",{"_index":3019,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:85",{"_index":3030,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/listformulary/listformulary.component.ts:92",{"_index":3033,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["src/app/shared/shared.module",{"_index":2591,"title":{},"body":{"modules/HomePageModule.html":{},"modules/SearchPageModule.html":{}}}],["src/app/shared/shared.module.ts",{"_index":3428,"title":{},"body":{"modules/SharedModule.html":{}}}],["src/app/shared/sharedservice/shared.service",{"_index":551,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{}}}],["src/app/shared/sharedservice/shared.service.ts",{"_index":3443,"title":{},"body":{"injectables/SharedService.html":{},"coverage.html":{}}}],["src/app/shared/sharedservice/shared.service.ts:13",{"_index":3447,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/sharedservice/shared.service.ts:23",{"_index":3450,"title":{},"body":{"injectables/SharedService.html":{}}}],["src/app/shared/splash/splash",{"_index":3503,"title":{},"body":{"modules/SplashPageRoutingModule.html":{}}}],["src/app/shared/splash/splash.page.ts",{"_index":3460,"title":{},"body":{"components/SplashPage.html":{},"coverage.html":{}}}],["src/app/shared/splash/splash.page.ts:27",{"_index":3465,"title":{},"body":{"components/SplashPage.html":{}}}],["src/app/shared/splash/splash.page.ts:33",{"_index":3477,"title":{},"body":{"components/SplashPage.html":{}}}],["src/app/shared/splash/splash.page.ts:38",{"_index":3478,"title":{},"body":{"components/SplashPage.html":{}}}],["src/app/shared/splash/splash.page.ts:44",{"_index":3466,"title":{},"body":{"components/SplashPage.html":{}}}],["src/app/shared/splash/splash.page.ts:75",{"_index":3470,"title":{},"body":{"components/SplashPage.html":{}}}],["src/app/shared/splash/splash.page.ts:82",{"_index":3474,"title":{},"body":{"components/SplashPage.html":{}}}],["src/app/shared/splash/splash.page.ts:90",{"_index":3472,"title":{},"body":{"components/SplashPage.html":{}}}],["src/environments/environment",{"_index":1015,"title":{},"body":{"modules/AppModule.html":{}}}],["src/environments/environment.prod.ts",{"_index":3774,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":3775,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":1352,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{},"directives/ColorpercentDirective.html":{},"pipes/CurrencyPipe.html":{},"pipes/PercentformaterPipe.html":{},"components/SplashPage.html":{}}}],["standalone:true",{"_index":3479,"title":{},"body":{"components/SplashPage.html":{}}}],["star',hidden:false",{"_index":745,"title":{},"body":{"components/AppComponent.html":{}}}],["start",{"_index":173,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["started",{"_index":3833,"title":{"index.html":{}},"body":{}}],["starting",{"_index":2648,"title":{},"body":{"interfaces/ICryptoBase.html":{}}}],["starts",{"_index":3301,"title":{},"body":{"components/SearchPage.html":{}}}],["startup",{"_index":3482,"title":{},"body":{"components/SplashPage.html":{}}}],["state",{"_index":51,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["statements",{"_index":3688,"title":{},"body":{"coverage.html":{}}}],["states",{"_index":2452,"title":{},"body":{"components/FormularyComponent.html":{}}}],["stats",{"_index":1757,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["status",{"_index":1297,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["step",{"_index":852,"title":{},"body":{"components/AppComponent.html":{}}}],["stop",{"_index":3269,"title":{},"body":{"components/SearchPage.html":{}}}],["stops",{"_index":1781,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{},"components/SearchPage.html":{}}}],["storage",{"_index":1420,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/StrapiAutenticationService.html":{},"miscellaneous/variables.html":{}}}],["storage=getstorage(app",{"_index":2362,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["storagebucket",{"_index":1057,"title":{},"body":{"modules/AppModule.html":{}}}],["storageref",{"_index":2365,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["stored",{"_index":1408,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["stores",{"_index":2231,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"components/SearchPage.html":{},"injectables/StrapiAutenticationService.html":{}}}],["strapi",{"_index":3508,"title":{},"body":{"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/UserStrapiService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["strapi's",{"_index":3512,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["strapiautenticationservice",{"_index":993,"title":{"injectables/StrapiAutenticationService.html":{}},"body":{"modules/AppModule.html":{},"injectables/StrapiAutenticationService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["strapiautenticationservice(httpclient,userapiurl,loginapiurl,registerapiurl,authenticationurl,authenticationmapping",{"_index":4025,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strapiauthmappingservice",{"_index":1004,"title":{"injectables/StrapiAuthMappingService.html":{}},"body":{"modules/AppModule.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["strapiloginresponse",{"_index":3517,"title":{"interfaces/StrapiLoginResponse.html":{}},"body":{"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"coverage.html":{}}}],["strapiloginresponse):user",{"_index":3559,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["strapimediaservice",{"_index":3571,"title":{"classes/StrapiMediaService.html":{}},"body":{"classes/StrapiMediaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["strapimediaservice(upload",{"_index":4036,"title":{},"body":{"miscellaneous/variables.html":{}}}],["strapiregister",{"_index":3543,"title":{"interfaces/StrapiRegister.html":{}},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"coverage.html":{}}}],["strapiregisterresponse",{"_index":3547,"title":{"interfaces/StrapiRegisterResponse.html":{}},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"coverage.html":{}}}],["strapisignin",{"_index":3540,"title":{"interfaces/StrapiSignIn.html":{}},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"coverage.html":{}}}],["strapiuser",{"_index":3518,"title":{"interfaces/StrapiUser.html":{}},"body":{"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"coverage.html":{}}}],["strapiusermapping",{"_index":1185,"title":{"injectables/StrapiUserMapping.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["strapiuserrepository",{"_index":3714,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strategy",{"_index":1587,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["string",{"_index":490,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["string(date.getdate()).padstart(2",{"_index":1893,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["string(date.gethours()).padstart(2",{"_index":1900,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["string(date.getminutes()).padstart(2",{"_index":1902,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["string(date.getmonth",{"_index":1895,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["string):deletecryptofromfavoritelist",{"_index":1227,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["string,crypto",{"_index":3641,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["string,currency:string",{"_index":1630,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{}}}],["string,id?:string",{"_index":3644,"title":{},"body":{"injectables/UserBaseRepository.html":{}}}],["string,iduser:string",{"_index":1459,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"interfaces/IAuthenticationService.html":{}}}],["string=\"usd",{"_index":3157,"title":{},"body":{"components/ProfilePage.html":{}}}],["strings",{"_index":706,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/ListPage.html":{}}}],["strong",{"_index":2572,"title":{},"body":{"components/HomePage.html":{}}}],["structure",{"_index":1502,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["ststokenmanager",{"_index":2182,"title":{"interfaces/StsTokenManager.html":{}},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"coverage.html":{},"interfaces/providedata.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["styleurls",{"_index":28,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["su",{"_index":3894,"title":{},"body":{"index.html":{}}}],["suave",{"_index":915,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["suaves",{"_index":921,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["sub1=this.auth.getuser().subscribe",{"_index":3486,"title":{},"body":{"components/SplashPage.html":{}}}],["sub2=timer(1500).subscribe",{"_index":3490,"title":{},"body":{"components/SplashPage.html":{}}}],["subclasses",{"_index":1395,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CryptoBaseRepository.html":{}}}],["submission",{"_index":3021,"title":{},"body":{"components/ListformularyComponent.html":{},"components/RegisterPage.html":{}}}],["submitform",{"_index":2435,"title":{},"body":{"components/FormularyComponent.html":{}}}],["submits",{"_index":300,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/RegisterPage.html":{}}}],["submitted",{"_index":2471,"title":{},"body":{"components/FormularyComponent.html":{}}}],["subscribes",{"_index":3137,"title":{},"body":{"components/ProfilePage.html":{}}}],["subscription",{"_index":758,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["subscription.unsubscribe",{"_index":3498,"title":{},"body":{"components/SplashPage.html":{}}}],["subscriptions",{"_index":678,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["subscriptions:subscription",{"_index":781,"title":{},"body":{"components/AppComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["subtitle",{"_index":162,"title":{},"body":{"components/AboutPage.html":{}}}],["success",{"_index":482,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"injectables/SharedService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["successful",{"_index":2221,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"components/ProfilePage.html":{}}}],["such",{"_index":1321,"title":{},"body":{"guards/AuthGuard2.html":{},"components/ProfilePage.html":{}}}],["super",{"_index":1624,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/StrapiAutenticationService.html":{},"classes/StrapiMediaService.html":{}}}],["super(repository",{"_index":1723,"title":{},"body":{"injectables/CryptoGeko.html":{}}}],["super(repository,auth,url,http",{"_index":3679,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["superior",{"_index":910,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/FormularyComponent.html":{},"components/ProfilePage.html":{}}}],["support",{"_index":2063,"title":{},"body":{"components/CustomGenderComponent.html":{},"modules.html":{}}}],["supported",{"_index":2053,"title":{},"body":{"pipes/CurrencyPipe.html":{}}}],["supports",{"_index":1810,"title":{},"body":{"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListformularyComponent.html":{}}}],["susbscriptions",{"_index":3263,"title":{},"body":{"components/SearchPage.html":{}}}],["susbscriptions:subscription",{"_index":3329,"title":{},"body":{"components/SearchPage.html":{}}}],["suscriptions",{"_index":1816,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["suscriptions:subscription",{"_index":2557,"title":{},"body":{"components/HomePage.html":{}}}],["sutil",{"_index":3194,"title":{},"body":{"components/ProfilePage.html":{}}}],["svg",{"_index":3977,"title":{},"body":{"modules.html":{}}}],["switch(backend",{"_index":4016,"title":{},"body":{"miscellaneous/variables.html":{}}}],["switcher",{"_index":3076,"title":{},"body":{"components/LoginPage.html":{}}}],["switching",{"_index":773,"title":{},"body":{"components/AppComponent.html":{},"components/RegisterPage.html":{}}}],["symbol",{"_index":1133,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["symbol:c.symbol",{"_index":1545,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["symbol:data.data.attributes.symbol",{"_index":1242,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["symbol:data.symbol",{"_index":1246,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["symbol:string",{"_index":666,"title":{},"body":{"interfaces/AdvancedCrypto.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/PricesCryptoFromApi.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["symbol:x.symbol",{"_index":1202,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["symbols",{"_index":1830,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["símbolo",{"_index":1799,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["t",{"_index":1677,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{}}}],["table",{"_index":629,"title":{},"body":{"components/AdminPanelPage.html":{},"coverage.html":{}}}],["tablemodule",{"_index":3219,"title":{},"body":{"modules/ProfilePageModule.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":3776,"title":{},"body":{"coverage.html":{}}}],["tailored",{"_index":3682,"title":{},"body":{"injectables/UserStrapiService.html":{}}}],["takes",{"_index":2603,"title":{},"body":{"interfaces/IAuthenticationMapping.html":{}}}],["takevoice",{"_index":3270,"title":{},"body":{"components/SearchPage.html":{}}}],["tamaño",{"_index":901,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{}}}],["tanto",{"_index":3902,"title":{},"body":{"index.html":{}}}],["tarjeta",{"_index":1792,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["tbody",{"_index":638,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["td",{"_index":647,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["te",{"_index":3855,"title":{},"body":{"index.html":{}}}],["tecnologías",{"_index":3906,"title":{},"body":{"index.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["templateurl",{"_index":30,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["temporary",{"_index":3295,"title":{},"body":{"components/SearchPage.html":{}}}],["tems",{"_index":942,"title":{},"body":{"components/AppComponent.html":{}}}],["tendencias",{"_index":3866,"title":{},"body":{"index.html":{}}}],["tension",{"_index":1934,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["text",{"_index":94,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/ColorpercentDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{}}}],["text/csv;charset=utf",{"_index":585,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["text:this.translate.instant(\"common.no",{"_index":824,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["text:this.translate.instant(\"common.yes",{"_index":821,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["textarea",{"_index":411,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["textemporal",{"_index":3264,"title":{},"body":{"components/SearchPage.html":{}}}],["texto",{"_index":1765,"title":{},"body":{"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["tfg.onrender.com/export",{"_index":4074,"title":{},"body":{"miscellaneous/variables.html":{}}}],["th",{"_index":637,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["thead",{"_index":633,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["then((usercredential",{"_index":2291,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["then(async",{"_index":2272,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["thereof",{"_index":1342,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["this.activateroute.parammap.subscribe(params",{"_index":2951,"title":{},"body":{"components/ListcontentPage.html":{},"components/SearchPage.html":{}}}],["this.actualuser",{"_index":556,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.actualuser.id",{"_index":565,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.actualuser.id).foreach((it",{"_index":568,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.addcryptotodatabase(id",{"_index":3350,"title":{},"body":{"components/SearchPage.html":{}}}],["this.addcryptotolist(this.idlist,idfinal+\"\",id",{"_index":3347,"title":{},"body":{"components/SearchPage.html":{}}}],["this.alertcontroller.create",{"_index":818,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["this.alertdelete(event.id",{"_index":2898,"title":{},"body":{"components/ListPage.html":{}}}],["this.app",{"_index":2330,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["this.apppages=this.apppages",{"_index":813,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apppages[0].title",{"_index":786,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apppages[1].title",{"_index":788,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apppages[2].title",{"_index":790,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apppages[3].title",{"_index":792,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apppages[4].title",{"_index":794,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apppages[5].title",{"_index":796,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apppages[6].title",{"_index":798,"title":{},"body":{"components/AppComponent.html":{}}}],["this.apppages[7].title",{"_index":800,"title":{},"body":{"components/AppComponent.html":{}}}],["this.auth.gettoken",{"_index":3580,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["this.auth.getuser().pipe",{"_index":1314,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{}}}],["this.auth.logout",{"_index":822,"title":{},"body":{"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["this.authenticated",{"_index":1476,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["this.authenticated.next(val",{"_index":1473,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["this.authservice.getcurrency",{"_index":3309,"title":{},"body":{"components/SearchPage.html":{}}}],["this.authservice.logout",{"_index":3168,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.authservice.setcurrency($event",{"_index":3165,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.authservice.setmenu(true",{"_index":72,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["this.chart",{"_index":1906,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.chart.destroy",{"_index":1907,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.click(id",{"_index":3351,"title":{},"body":{"components/SearchPage.html":{}}}],["this.createchart",{"_index":1909,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.crypto",{"_index":2563,"title":{},"body":{"components/HomePage.html":{}}}],["this.crypto.push(...value",{"_index":2565,"title":{},"body":{"components/HomePage.html":{}}}],["this.crypto=value[0",{"_index":1911,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.crypto={id:'',name:'',symbol:'',image:'',currentprice:0",{"_index":2005,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.currency",{"_index":2000,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["this.currency=data",{"_index":2006,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["this.currency=params.get('currency')??\"eur",{"_index":1905,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.currency=this.authservice.getcurrency",{"_index":2558,"title":{},"body":{"components/HomePage.html":{},"components/ListcontentPage.html":{}}}],["this.days=number",{"_index":1885,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.db",{"_index":2332,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["this.deletelist(id",{"_index":2907,"title":{},"body":{"components/ListPage.html":{}}}],["this.deletetoken",{"_index":1462,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["this.emitter.emit(userlogin",{"_index":2495,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.emitter.emit(userregister",{"_index":2493,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.emitter.emit(userupdate",{"_index":2499,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.emmiter.emit(this.crypto.id",{"_index":1790,"title":{},"body":{"components/CryptosimplecardComponent.html":{}}}],["this.eventemiter.emit({type:\"delete\",id:this.list.id",{"_index":3001,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["this.eventemiter.emit({type:\"update\",id:this.list.id",{"_index":3002,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["this.extractfilename(contentdisposition",{"_index":579,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.fbbuilder.group",{"_index":2478,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{}}}],["this.filterfinal({detail:{value:spokentext",{"_index":3370,"title":{},"body":{"components/SearchPage.html":{}}}],["this.filterfinal({detail:{value:value",{"_index":3378,"title":{},"body":{"components/SearchPage.html":{}}}],["this.formattooltiplabel.bind(this",{"_index":1961,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.formulary",{"_index":2477,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.formulary!.get(\"description",{"_index":3050,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["this.formulary!.get(\"title",{"_index":3048,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["this.formulary.controls['email",{"_index":2486,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.formulary.controls['gender",{"_index":357,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["this.formulary.controls['isadmin",{"_index":358,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["this.formulary.controls['password",{"_index":2487,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.formulary.controls['username",{"_index":356,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["this.formulary.get('description')?.setvalue(this.list?.description",{"_index":3042,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["this.formulary.get('email')?.disable",{"_index":2483,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.formulary.get('email')?.setvalue(this.user?.email",{"_index":348,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["this.formulary.get('gender')?.setvalue(this.user?.gender",{"_index":349,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["this.formulary.get('isadmin')?.setvalue(this.user?.isadmin",{"_index":350,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["this.formulary.get('title')?.setvalue(this.list?.title",{"_index":3041,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["this.formulary.get('username')?.setvalue(this.user?.username",{"_index":347,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["this.formulary.markaspristine",{"_index":2497,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.formulary.markasuntouched",{"_index":2498,"title":{},"body":{"components/FormularyComponent.html":{}}}],["this.formulary=this.fb.group",{"_index":342,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["this.formularypassword",{"_index":3161,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.formularypassword.controls['password",{"_index":3162,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.formularypassword.reset",{"_index":3164,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.functions",{"_index":2334,"title":{},"body":{"injectables/FirebaseMainService.html":{}}}],["this.getcryptobyid(\"\"+id",{"_index":3344,"title":{},"body":{"components/SearchPage.html":{}}}],["this.getdatacrypto",{"_index":1908,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.getheaders()).pipe(map((response:any",{"_index":3583,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["this.hardlist.push(...value",{"_index":3336,"title":{},"body":{"components/SearchPage.html":{}}}],["this.httpclient.delete(this.userapiurltoken+`users/${iduser",{"_index":3519,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["this.httpclient.get(this.apiurl+\"/coins/list\"+`?x_cg_demo_api_key=${this.cryptotoken}`).pipe",{"_index":1632,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["this.httpclient.get(this.apiurl+`/coins/markets?vs_currency=${currency}&ids=${id}`+`&x_cg_demo_api_key=${this.cryptotoken}`).pipe",{"_index":1631,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["this.httpclient.get(this.apiurl+`/coins/markets?vs_currency=${currency}&per_page=${pagesize}&page=${page}`+`&x_cg_demo_api_key=${this.cryptotoken}`).pipe",{"_index":1627,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["this.httpclient.get(this.apiurl+`coins/${id}/market_chart?vs_currency=${currency}&days=${days}`+`&x_cg_demo_api_key=${this.cryptotoken}`).pipe",{"_index":1634,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["this.httpclient.get(this.authenticationurltoken,{headers:{authorization",{"_index":3535,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["this.httpclient.post(`${this.uploadurl",{"_index":3582,"title":{},"body":{"classes/StrapiMediaService.html":{}}}],["this.httpclient.post(this.loginapitoken,this.mapping.login(authenticationlogin)).pipe(map((resp:strapiloginresponse",{"_index":3524,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["this.httpclient.post(this.registertoken,this.mapping.register(authenticationregister)).pipe(map((resp:strapiloginresponse",{"_index":3532,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["this.id=params.get('id",{"_index":2952,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.id=params.get('id')??\"bitcoin",{"_index":1904,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.idlist=params.get('id",{"_index":3330,"title":{},"body":{"components/SearchPage.html":{}}}],["this.inactivitytimeout",{"_index":3387,"title":{},"body":{"components/SearchPage.html":{}}}],["this.inicializateformulary",{"_index":334,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["this.init",{"_index":3334,"title":{},"body":{"components/SearchPage.html":{}}}],["this.initsubscriptions",{"_index":3496,"title":{},"body":{"components/SplashPage.html":{}}}],["this.inittranslate",{"_index":3613,"title":{},"body":{"injectables/TranslationService.html":{}}}],["this.isdisabled=isdisabled",{"_index":2144,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.isstoppedspeechrecog",{"_index":3391,"title":{},"body":{"components/SearchPage.html":{}}}],["this.juntartexto",{"_index":3393,"title":{},"body":{"components/SearchPage.html":{}}}],["this.languagechangesubscription",{"_index":2130,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.languagechangesubscription.unsubscribe",{"_index":2147,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.list.cryptos.splice(index,1",{"_index":2963,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.list=this.hardlist.filter(c=>c.name.includes(value",{"_index":3339,"title":{},"body":{"components/SearchPage.html":{}}}],["this.list=value",{"_index":3337,"title":{},"body":{"components/SearchPage.html":{}}}],["this.list=value.find(c=>c.id==this.id",{"_index":2954,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.lists.push(value",{"_index":2880,"title":{},"body":{"components/ListPage.html":{}}}],["this.lists.splice(index,1",{"_index":2892,"title":{},"body":{"components/ListPage.html":{}}}],["this.lists=value",{"_index":2869,"title":{},"body":{"components/ListPage.html":{}}}],["this.lists[valuexd]=value",{"_index":2886,"title":{},"body":{"components/ListPage.html":{}}}],["this.loaddata",{"_index":2559,"title":{},"body":{"components/HomePage.html":{}}}],["this.loaddata($event.target",{"_index":2568,"title":{},"body":{"components/HomePage.html":{}}}],["this.loadmoreusers($event.target",{"_index":610,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.loadusers",{"_index":557,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.mapping.getalllist(res",{"_index":1633,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["this.mapping.getallpaginated(res",{"_index":1629,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["this.mapping.getpricelist(res",{"_index":1635,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["this.mapping.getuserresponse(resp,localstorage.getitem(\"token",{"_index":3537,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["this.mapping.loginresponse(resp",{"_index":3527,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["this.mapping.registerresponse(resp",{"_index":3533,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["this.menucontroller.open",{"_index":815,"title":{},"body":{"components/AppComponent.html":{}}}],["this.modalcontroller.create",{"_index":597,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListPage.html":{}}}],["this.modalcontroller.dismiss",{"_index":335,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["this.modalcontroller.dismiss(data",{"_index":355,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{}}}],["this.onchange(value",{"_index":2146,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.onchange=fn",{"_index":2141,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.ontouched=fn",{"_index":2142,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.options",{"_index":2136,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.page+=1",{"_index":2566,"title":{},"body":{"components/HomePage.html":{}}}],["this.page=0",{"_index":2569,"title":{},"body":{"components/HomePage.html":{}}}],["this.page=1",{"_index":2562,"title":{},"body":{"components/HomePage.html":{}}}],["this.passwordicon",{"_index":2485,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["this.passwordtype",{"_index":2484,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["this.presentmodal(\"create",{"_index":2870,"title":{},"body":{"components/ListPage.html":{}}}],["this.presentmodal(\"update\",lista",{"_index":2873,"title":{},"body":{"components/ListPage.html":{}}}],["this.presentmodal(user",{"_index":571,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.recognition.addeventlistener('result",{"_index":3381,"title":{},"body":{"components/SearchPage.html":{}}}],["this.recognition.start",{"_index":3392,"title":{},"body":{"components/SearchPage.html":{}}}],["this.recognition.stop",{"_index":3394,"title":{},"body":{"components/SearchPage.html":{}}}],["this.removeid",{"_index":1463,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["this.repository.findbyid(id,currency",{"_index":1705,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["this.repository.getallpaginated(page,pagesize,currency",{"_index":1704,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["this.repository.getallsimple",{"_index":1706,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["this.repository.getpricelist(id,currency,days",{"_index":1703,"title":{},"body":{"injectables/CryptoBaseService.html":{}}}],["this.router.createurltree(['/home",{"_index":1331,"title":{},"body":{"guards/AuthGuard2.html":{}}}],["this.router.navigate([\"/splash",{"_index":823,"title":{},"body":{"components/AppComponent.html":{}}}],["this.router.navigate(['/'+valor",{"_index":3494,"title":{},"body":{"components/SplashPage.html":{}}}],["this.router.navigate(['/'+valor]).then",{"_index":3491,"title":{},"body":{"components/SplashPage.html":{}}}],["this.router.navigate(['/cryptoview',id,this.currency",{"_index":3342,"title":{},"body":{"components/SearchPage.html":{}}}],["this.router.navigate(['/listcontent',this.idlist",{"_index":3349,"title":{},"body":{"components/SearchPage.html":{}}}],["this.router.navigate(['/splash",{"_index":1317,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["this.router.navigate(['search',this.id",{"_index":2955,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.router.navigate([argu",{"_index":841,"title":{},"body":{"components/AppComponent.html":{}}}],["this.searchinput=spokentext",{"_index":3369,"title":{},"body":{"components/SearchPage.html":{}}}],["this.searchinput=value",{"_index":3377,"title":{},"body":{"components/SearchPage.html":{}}}],["this.selectedcurrency=this.authservice.getcurrency",{"_index":3160,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.selectedoption",{"_index":2145,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.selectedoption=find",{"_index":2134,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.setlanguage(savedlang",{"_index":3616,"title":{},"body":{"injectables/TranslationService.html":{}}}],["this.setmenu(false",{"_index":1461,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{}}}],["this.setmenutitles(data",{"_index":840,"title":{},"body":{"components/AppComponent.html":{}}}],["this.setmenutitles(this.translation.getcurrentlanguage",{"_index":780,"title":{},"body":{"components/AppComponent.html":{}}}],["this.shared.showtoast(\"danger\",err",{"_index":3081,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.shared.showtoast(\"danger\",this.translate.instant(\"cruduser.errors.deleteaccountfailed",{"_index":3169,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.shared.showtoast(\"danger\",this.translate.instant(\"cruduser.errors.updatefailed",{"_index":3184,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.shared.showtoast(\"danger\",this.translate.instant(\"cryptolist.cryptodeletefailed",{"_index":2964,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.shared.showtoast(\"danger\",this.translate.instant(\"lists.listcreationfailed",{"_index":2881,"title":{},"body":{"components/ListPage.html":{}}}],["this.shared.showtoast(\"danger\",this.translate.instant(\"lists.listdeletionfailed",{"_index":2893,"title":{},"body":{"components/ListPage.html":{}}}],["this.shared.showtoast(\"danger\",this.translate.instant(\"lists.listmodificationfailed",{"_index":2887,"title":{},"body":{"components/ListPage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"cruduser.deleteaccountsuccessful",{"_index":573,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ProfilePage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"cruduser.login.loginsuccessful",{"_index":3080,"title":{},"body":{"components/LoginPage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"cruduser.register.registersuccessful",{"_index":3245,"title":{},"body":{"components/RegisterPage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"cruduser.update.updatesuccessfull",{"_index":3183,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"cryptolist.cryptoaddedsuccessful",{"_index":3348,"title":{},"body":{"components/SearchPage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"cryptolist.cryptodeletesuccessful",{"_index":2961,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"lists.listcreatedsuccessful",{"_index":2879,"title":{},"body":{"components/ListPage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"lists.listdeletedsuccessful",{"_index":2890,"title":{},"body":{"components/ListPage.html":{}}}],["this.shared.showtoast(\"success\",this.translate.instant(\"lists.listmodifiedsuccessful",{"_index":2884,"title":{},"body":{"components/ListPage.html":{}}}],["this.shared.showtoast('danger',this.translate.instant('cruduser.errors.updatefailed",{"_index":609,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.shared.showtoast('success',this.translate.instant('admin_panel.csv_button.error",{"_index":591,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.shared.showtoast('success',this.translate.instant('admin_panel.csv_button.success",{"_index":588,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.shared.showtoast('success',this.translate.instant('cruduser.update.updatesuccessfull",{"_index":607,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.start",{"_index":3375,"title":{},"body":{"components/SearchPage.html":{}}}],["this.stop",{"_index":3389,"title":{},"body":{"components/SearchPage.html":{}}}],["this.subscriptions.foreach((subscription",{"_index":3497,"title":{},"body":{"components/SplashPage.html":{}}}],["this.subscriptions.foreach(c",{"_index":842,"title":{},"body":{"components/AppComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["this.subscriptions.push(sub1",{"_index":3489,"title":{},"body":{"components/SplashPage.html":{}}}],["this.subscriptions.push(sub2",{"_index":3495,"title":{},"body":{"components/SplashPage.html":{}}}],["this.subscriptions.push(this.auth.verificateuser().subscribe",{"_index":802,"title":{},"body":{"components/AppComponent.html":{}}}],["this.subscriptions.push(this.authservice.deleteuser(this.authservice.gettoken(),this.authservice.getid()).subscribe",{"_index":3167,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.subscriptions.push(this.authservice.login(event).subscribe",{"_index":3079,"title":{},"body":{"components/LoginPage.html":{}}}],["this.subscriptions.push(this.authservice.register(event).subscribe",{"_index":3244,"title":{},"body":{"components/RegisterPage.html":{}}}],["this.subscriptions.push(this.translate.get(\"common.language\").subscribe",{"_index":801,"title":{},"body":{"components/AppComponent.html":{}}}],["this.subscriptions.push(this.translate.onlangchange.subscribe((event:langchangeevent",{"_index":779,"title":{},"body":{"components/AppComponent.html":{}}}],["this.subscriptions.push(this.translate.use(lang).subscribe",{"_index":784,"title":{},"body":{"components/AppComponent.html":{}}}],["this.subscriptions.push(this.userservice.addlisttouser(data).subscribe",{"_index":2878,"title":{},"body":{"components/ListPage.html":{}}}],["this.subscriptions.push(this.userservice.findcryptobyid(event).subscribe",{"_index":2958,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.subscriptions.push(this.userservice.getbasicuser().subscribe",{"_index":804,"title":{},"body":{"components/AppComponent.html":{}}}],["this.subscriptions.push(this.userservice.getbehaviouruser().subscribe",{"_index":805,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["this.subscriptions.push(this.userservice.getlistfromuser().subscribe",{"_index":2868,"title":{},"body":{"components/ListPage.html":{}}}],["this.subscriptions.push(this.userservice.getlistfromuser(this.id).subscribe",{"_index":2953,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.subscriptions.push(this.userservice.removecryptofromlist(this.id,value).subscribe",{"_index":2960,"title":{},"body":{"components/ListcontentPage.html":{}}}],["this.subscriptions.push(this.userservice.removelistfromuser(id).subscribe",{"_index":2889,"title":{},"body":{"components/ListPage.html":{}}}],["this.subscriptions.push(this.userservice.updatelistfromuser(data).subscribe",{"_index":2883,"title":{},"body":{"components/ListPage.html":{}}}],["this.subscriptions.push(this.userservice.updateuserdata(event).subscribe",{"_index":3182,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.susbscriptions.foreach(c",{"_index":3379,"title":{},"body":{"components/SearchPage.html":{}}}],["this.susbscriptions.push(this.cryptoservice.getallsimple().subscribe",{"_index":3335,"title":{},"body":{"components/SearchPage.html":{}}}],["this.susbscriptions.push(this.textemporal.subscribe",{"_index":3376,"title":{},"body":{"components/SearchPage.html":{}}}],["this.susbscriptions.push(this.userservice.addcryptotodatabase(this.list.filter(c=>c.id==id)[0]).subscribe",{"_index":3357,"title":{},"body":{"components/SearchPage.html":{}}}],["this.susbscriptions.push(this.userservice.addcryptotolist(idlist,idcrypto,crypto).subscribe",{"_index":3360,"title":{},"body":{"components/SearchPage.html":{}}}],["this.susbscriptions.push(this.userservice.findcryptobyid(idcrypto).subscribe",{"_index":3354,"title":{},"body":{"components/SearchPage.html":{}}}],["this.suscriptions.foreach(c",{"_index":1994,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["this.suscriptions.push(this.cryptoservice.findbyid(this.id,this.currency).subscribe",{"_index":1910,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.suscriptions.push(this.cryptoservice.getallpaginated(this.page,this.perpage,this.currency).subscribe",{"_index":2564,"title":{},"body":{"components/HomePage.html":{}}}],["this.suscriptions.push(this.cryptoservice.getpricelist(this.id,this.currency,\"1\").subscribe",{"_index":1914,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.suscriptions.push(this.cryptoservice.getpricelist(this.id,this.currency,number+\"\").subscribe",{"_index":1887,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.suscriptions.push(this.userservice.getbasicuser().subscribe",{"_index":2560,"title":{},"body":{"components/HomePage.html":{}}}],["this.text",{"_index":3395,"title":{},"body":{"components/SearchPage.html":{}}}],["this.textemporal",{"_index":3396,"title":{},"body":{"components/SearchPage.html":{}}}],["this.textemporal.next",{"_index":3397,"title":{},"body":{"components/SearchPage.html":{}}}],["this.textemporal.next(transcript",{"_index":3385,"title":{},"body":{"components/SearchPage.html":{}}}],["this.toastctrl.create",{"_index":3455,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.token",{"_index":558,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.token=this.authservice.gettoken",{"_index":2867,"title":{},"body":{"components/ListPage.html":{}}}],["this.translate.currentlang",{"_index":3619,"title":{},"body":{"injectables/TranslationService.html":{}}}],["this.translate.get(\"mainmenu.home",{"_index":736,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.get('mainmenu.aboutus').subscribe((translation",{"_index":795,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.get('mainmenu.adminpanel').subscribe((translation",{"_index":797,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.get('mainmenu.home').subscribe((translation",{"_index":785,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.get('mainmenu.language').subscribe((translation",{"_index":793,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.get('mainmenu.list').subscribe((translation",{"_index":789,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.get('mainmenu.logout').subscribe((translation",{"_index":799,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.get('mainmenu.profile').subscribe((translation",{"_index":791,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.get('mainmenu.search').subscribe((translation",{"_index":787,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant(\"admin_panel.csv_button.filename",{"_index":580,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.translate.instant(\"common.cancel",{"_index":2903,"title":{},"body":{"components/ListPage.html":{}}}],["this.translate.instant(\"common.close",{"_index":3458,"title":{},"body":{"injectables/SharedService.html":{}}}],["this.translate.instant(\"common.delete",{"_index":2906,"title":{},"body":{"components/ListPage.html":{}}}],["this.translate.instant(\"cruduser.register.female",{"_index":2123,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.translate.instant(\"cruduser.register.male",{"_index":2121,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.translate.instant(\"cruduser.register.other",{"_index":2125,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.translate.instant(\"lists.deletelist",{"_index":2900,"title":{},"body":{"components/ListPage.html":{}}}],["this.translate.instant(\"lists.deletelistquestion",{"_index":2902,"title":{},"body":{"components/ListPage.html":{}}}],["this.translate.instant(\"mainmenu.aboutus",{"_index":750,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant(\"mainmenu.adminpanel",{"_index":752,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant(\"mainmenu.language",{"_index":748,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant(\"mainmenu.list",{"_index":744,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant(\"mainmenu.logout",{"_index":754,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant(\"mainmenu.profile",{"_index":746,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant(\"mainmenu.search",{"_index":741,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translate.instant('common.cancel",{"_index":835,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.translate.instant('common.english",{"_index":831,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.translate.instant('common.save",{"_index":837,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.translate.instant('common.spanish",{"_index":834,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.translate.instant('cruduser.register.female",{"_index":2138,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.translate.instant('cruduser.register.male",{"_index":2137,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.translate.instant('cruduser.register.other",{"_index":2139,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.translate.instant('cryptoview.selectcurrency",{"_index":1998,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["this.translate.instant('currency.dollar",{"_index":1999,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["this.translate.instant('currency.euro",{"_index":2001,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["this.translate.instant('currency.libra",{"_index":2002,"title":{},"body":{"components/CryptoviewPage.html":{},"components/HomePage.html":{}}}],["this.translate.instant('mainmenu.selectlanguage",{"_index":828,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.translate.onlangchange.subscribe",{"_index":2131,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.translate.use(data",{"_index":839,"title":{},"body":{"components/AppComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.translate.use(lang",{"_index":3617,"title":{},"body":{"injectables/TranslationService.html":{}}}],["this.translation.getcurrentlanguage",{"_index":833,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translation.setlanguage(data",{"_index":838,"title":{},"body":{"components/AppComponent.html":{}}}],["this.translationservice.getcurrentlanguage",{"_index":3082,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.translationservice.setlanguage(data",{"_index":3083,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.translationservice.setlanguage(lang",{"_index":3077,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["this.updatechart(this.days",{"_index":2007,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["this.updatelist(event.id",{"_index":2896,"title":{},"body":{"components/ListPage.html":{}}}],["this.updateoptions",{"_index":2132,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["this.user.img",{"_index":3175,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.user=value",{"_index":806,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["this.users",{"_index":562,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.users.push(it",{"_index":569,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.userservice.admindeleteuser('',userid).subscribe",{"_index":572,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.userservice.admingetuserspagination(this.token",{"_index":559,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.userservice.adminupdateuser",{"_index":601,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.userservice.getbasicuser().pipe",{"_index":1346,"title":{},"body":{"guards/AuthGuardAdmin.html":{}}}],["this.userservice.getbehaviouruser().subscribe(value",{"_index":555,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.userservice.getuserscsv().subscribe",{"_index":574,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.userservice.updateuserdata({password:this.formularypassword.get('password')?.value}).subscribe",{"_index":3163,"title":{},"body":{"components/ProfilePage.html":{}}}],["this.userslimit).subscribe(usersresponse",{"_index":560,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["this.vermenu=value",{"_index":803,"title":{},"body":{"components/AppComponent.html":{}}}],["three",{"_index":2468,"title":{},"body":{"components/FormularyComponent.html":{}}}],["through",{"_index":2225,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"components/FormularyComponent.html":{}}}],["throw",{"_index":1683,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserBaseRepository.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"miscellaneous/variables.html":{}}}],["throwerror",{"_index":3516,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["throwerror(()=>err.error.error.message",{"_index":3534,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["throwerror(()=>error12",{"_index":3530,"title":{},"body":{"injectables/StrapiAutenticationService.html":{}}}],["throws",{"_index":1680,"title":{},"body":{"injectables/CryptoBaseRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["thumbnail",{"_index":1183,"title":{"interfaces/Thumbnail.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["ticks",{"_index":1969,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["tiempo",{"_index":3837,"title":{},"body":{"index.html":{}}}],["tiene",{"_index":2517,"title":{},"body":{"components/FormularyComponent.html":{},"components/SplashPage.html":{}}}],["time",{"_index":1611,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["timeout",{"_index":3291,"title":{},"body":{"components/SearchPage.html":{}}}],["timer",{"_index":3468,"title":{},"body":{"components/SplashPage.html":{}}}],["title",{"_index":158,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoList.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["title():abstractcontrol",{"_index":3047,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["title:[\"\",[validators.required,validators.minlength(3",{"_index":3038,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["title:c.title",{"_index":1197,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["title:data.data.attributes.title",{"_index":1218,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["title:data.title",{"_index":1212,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["title:string",{"_index":1137,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicList.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/CryptoList.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["title:this.formulary.controls['title'].value",{"_index":3045,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["titles",{"_index":730,"title":{},"body":{"components/AppComponent.html":{}}}],["toast",{"_index":470,"title":{},"body":{"components/AdminPanelPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{}}}],["toast.present",{"_index":3459,"title":{},"body":{"injectables/SharedService.html":{}}}],["toastcontroller",{"_index":3446,"title":{},"body":{"injectables/SharedService.html":{}}}],["toastctrl",{"_index":3448,"title":{},"body":{"injectables/SharedService.html":{}}}],["toasts",{"_index":2839,"title":{},"body":{"components/ListPage.html":{},"injectables/SharedService.html":{}}}],["toasts/messages",{"_index":3133,"title":{},"body":{"components/ProfilePage.html":{}}}],["toda",{"_index":371,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["todo",{"_index":3095,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["toggle",{"_index":697,"title":{},"body":{"components/AppComponent.html":{}}}],["toggles",{"_index":2443,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["toggling",{"_index":3241,"title":{},"body":{"components/RegisterPage.html":{}}}],["token",{"_index":442,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/functions.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["token:response.accesstoken",{"_index":2200,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["token:response.jwt",{"_index":3564,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["token:string",{"_index":1560,"title":{},"body":{"interfaces/BasicUser.html":{},"components/ListPage.html":{},"interfaces/User.html":{}}}],["token:token",{"_index":3570,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["tokens",{"_index":3684,"title":{},"body":{"injectables/UserStrapiService.html":{}}}],["toolbar",{"_index":422,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/ListformularyComponent.html":{}}}],["tooltip",{"_index":1847,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["tooltip.getactiveelements().length",{"_index":1976,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["tooltip.getactiveelements()[0",{"_index":1979,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["tooltipitem",{"_index":1848,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["tooltipitem.raw.tofixed(5",{"_index":1995,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["top",{"_index":102,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["total_supply",{"_index":1517,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["total_volume",{"_index":1509,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["total_volumes",{"_index":1534,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["touched",{"_index":2105,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["tr",{"_index":639,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["track",{"_index":1457,"title":{},"body":{"injectables/BaseAutenticationService.html":{}}}],["transcript",{"_index":3382,"title":{},"body":{"components/SearchPage.html":{}}}],["transform",{"_index":383,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"pipes/CurrencyPipe.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"miscellaneous/functions.html":{}}}],["transform(value",{"_index":2055,"title":{},"body":{"pipes/CurrencyPipe.html":{},"pipes/PercentformaterPipe.html":{}}}],["transformation",{"_index":2389,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["transformations",{"_index":2690,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["transformed",{"_index":2663,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{}}}],["transforming",{"_index":1588,"title":{},"body":{"injectables/CoinGekoRepository.html":{}}}],["transforms",{"_index":1536,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"pipes/CurrencyPipe.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["transiciones",{"_index":920,"title":{},"body":{"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["transition",{"_index":917,"title":{},"body":{"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["translate",{"_index":74,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"components/SplashPage.html":{},"injectables/TranslationService.html":{}}}],["translate/core",{"_index":255,"title":{},"body":{"modules/AboutPageModule.html":{},"components/AdminPanelPage.html":{},"modules/AdminPanelPageModule.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"components/CryptoviewPage.html":{},"modules/CryptoviewPageModule.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"modules/HomePageModule.html":{},"components/ListPage.html":{},"modules/ListPageModule.html":{},"components/ListcontentPage.html":{},"modules/ListcontentPageModule.html":{},"components/LoginPage.html":{},"modules/LoginPageModule.html":{},"components/ProfilePage.html":{},"modules/ProfilePageModule.html":{},"components/RegisterPage.html":{},"modules/RegisterPageModule.html":{},"components/SearchPage.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"injectables/SharedService.html":{},"injectables/TranslationService.html":{},"dependencies.html":{}}}],["translate/http",{"_index":976,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["translate:translateservice",{"_index":2129,"title":{},"body":{"components/CustomGenderComponent.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["translatehttploader",{"_index":975,"title":{},"body":{"modules/AppModule.html":{}}}],["translatehttploader(http",{"_index":1022,"title":{},"body":{"modules/AppModule.html":{}}}],["translateloader",{"_index":972,"title":{},"body":{"modules/AppModule.html":{}}}],["translatemodule",{"_index":253,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{}}}],["translatemodule.forchild",{"_index":256,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{}}}],["translatemodule.forroot",{"_index":1028,"title":{},"body":{"modules/AppModule.html":{}}}],["translateservice",{"_index":456,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"injectables/TranslationService.html":{}}}],["translatex",{"_index":956,"title":{},"body":{"components/AppComponent.html":{}}}],["translatey",{"_index":1796,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ListcryptoComponent.html":{},"components/SearchPage.html":{}}}],["translation",{"_index":689,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"injectables/TranslationService.html":{}}}],["translation:translationservice",{"_index":778,"title":{},"body":{"components/AppComponent.html":{}}}],["translations",{"_index":2111,"title":{},"body":{"components/CustomGenderComponent.html":{},"components/RegisterPage.html":{},"injectables/TranslationService.html":{}}}],["translationservice",{"_index":690,"title":{"injectables/TranslationService.html":{}},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"injectables/TranslationService.html":{},"coverage.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["triggered",{"_index":1783,"title":{},"body":{"components/CryptosimplecardComponent.html":{},"components/ProfilePage.html":{}}}],["triggering",{"_index":2997,"title":{},"body":{"components/ListcryptoComponent.html":{}}}],["triggers",{"_index":2857,"title":{},"body":{"components/ListPage.html":{}}}],["true",{"_index":19,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"directives/ColorpercentDirective.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"pipes/PercentformaterPipe.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":1442,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["try",{"_index":3362,"title":{},"body":{"components/SearchPage.html":{}}}],["tslib",{"_index":3814,"title":{},"body":{"dependencies.html":{}}}],["turing",{"_index":80,"title":{},"body":{"components/AboutPage.html":{}}}],["tus",{"_index":3877,"title":{},"body":{"index.html":{}}}],["two",{"_index":3034,"title":{},"body":{"components/ListformularyComponent.html":{},"pipes/PercentformaterPipe.html":{}}}],["type",{"_index":45,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"interfaces/AdvancedCrypto.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"injectables/BaseMediaService.html":{},"interfaces/BasiCryptoFromApi.html":{},"interfaces/BasicCrypto.html":{},"interfaces/BasicList.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoMapping.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoBaseService.html":{},"interfaces/CryptoFromApi.html":{},"injectables/CryptoGeko.html":{},"interfaces/CryptoGraphPrice.html":{},"interfaces/CryptoList.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptoBaseMapping.html":{},"interfaces/ICryptobaseService.html":{},"interfaces/IFirebaseMainService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/LoginResponse.html":{},"interfaces/Model.html":{},"pipes/PercentformaterPipe.html":{},"interfaces/PricesCryptoFromApi.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"interfaces/RegisterPayLoad.html":{},"components/SearchPage.html":{},"injectables/SharedService.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"classes/StrapiMediaService.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["type,list:list",{"_index":2876,"title":{},"body":{"components/ListPage.html":{}}}],["type:string,id:string",{"_index":2894,"title":{},"body":{"components/ListPage.html":{}}}],["type:string=\"login",{"_index":2474,"title":{},"body":{"components/FormularyComponent.html":{}}}],["typebackend",{"_index":2433,"title":{},"body":{"components/FormularyComponent.html":{}}}],["typebackend:string",{"_index":2475,"title":{},"body":{"components/FormularyComponent.html":{}}}],["types",{"_index":2444,"title":{},"body":{"components/FormularyComponent.html":{}}}],["typically",{"_index":2662,"title":{},"body":{"interfaces/ICryptoBaseMapping.html":{},"components/LoginPage.html":{}}}],["título",{"_index":2968,"title":{},"body":{"components/ListcontentPage.html":{}}}],["ui",{"_index":52,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"index.html":{}}}],["uid",{"_index":2177,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["un",{"_index":392,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{},"index.html":{}}}],["una",{"_index":3193,"title":{},"body":{"components/ProfilePage.html":{},"index.html":{}}}],["unauthenticated",{"_index":1329,"title":{},"body":{"guards/AuthGuard2.html":{}}}],["unauthorized",{"_index":1275,"title":{},"body":{"guards/AuthGuard.html":{}}}],["undefined",{"_index":2117,"title":{},"body":{"components/CustomGenderComponent.html":{},"classes/StrapiMediaService.html":{}}}],["under",{"_index":2344,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["unique",{"_index":1596,"title":{},"body":{"injectables/CoinGekoRepository.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{}}}],["unknown",{"_index":590,"title":{},"body":{"components/AdminPanelPage.html":{},"components/SearchPage.html":{}}}],["unsubscribes",{"_index":719,"title":{},"body":{"components/AppComponent.html":{},"components/CryptoviewPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["untouched",{"_index":2454,"title":{},"body":{"components/FormularyComponent.html":{}}}],["unused",{"_index":3230,"title":{},"body":{"components/RegisterPage.html":{}}}],["up",{"_index":1856,"title":{},"body":{"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/RegisterPage.html":{},"components/SplashPage.html":{}}}],["update",{"_index":1222,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["update(event",{"_index":3146,"title":{},"body":{"components/ProfilePage.html":{}}}],["update(event:any",{"_index":3181,"title":{},"body":{"components/ProfilePage.html":{}}}],["updateat",{"_index":3585,"title":{},"body":{"interfaces/StrapiUser.html":{}}}],["updateat:string",{"_index":3552,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["updatechart",{"_index":1823,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["updatechart(number",{"_index":1860,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["updatechart(number:number",{"_index":1884,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["updatecryptodata",{"_index":1160,"title":{"interfaces/updateCryptoData.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updatecryptofromfavoritelist",{"_index":1158,"title":{"interfaces/updatecryptofromfavoritelist.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updatecryptoid",{"_index":1164,"title":{"interfaces/updateCryptoId.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updatecryptos",{"_index":1162,"title":{"interfaces/updateCryptos.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updated",{"_index":1251,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updatedat",{"_index":1116,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updatedoc",{"_index":2357,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["updatedoc(doc(firestore,\"persons\",user.uid",{"_index":2379,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["updatelist",{"_index":2835,"title":{},"body":{"components/ListPage.html":{}}}],["updatelist(id",{"_index":2859,"title":{},"body":{"components/ListPage.html":{}}}],["updatelist(id:string",{"_index":2871,"title":{},"body":{"components/ListPage.html":{}}}],["updatelistbody",{"_index":2399,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{}}}],["updatelistbody(data",{"_index":2416,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["updatelistbody(data:any):any",{"_index":2710,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["updatelistbody(data:basiclist):createlistupdate",{"_index":1223,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updatelistfromuser",{"_index":2734,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["updatelistfromuser(list",{"_index":2811,"title":{},"body":{"interfaces/IUserbaseService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["updatelistfromuser(list:basiclist):observable",{"_index":2817,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["updatelistfromuser(token",{"_index":2764,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["updatelistfromuser(token:string,list:basiclist):observable",{"_index":2772,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["updateoptions",{"_index":2086,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["updateorcreate",{"_index":2875,"title":{},"body":{"components/ListPage.html":{},"components/ListformularyComponent.html":{}}}],["updateorcreate?:string=\"create",{"_index":3036,"title":{},"body":{"components/ListformularyComponent.html":{}}}],["updatepassword",{"_index":3127,"title":{},"body":{"components/ProfilePage.html":{}}}],["updates",{"_index":533,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updateuser",{"_index":1166,"title":{"interfaces/updateuser.html":{}},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updateuserdata",{"_index":2400,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"injectables/StrapiUserMapping.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["updateuserdata(data",{"_index":1253,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["updateuserdata(data:any):any",{"_index":2716,"title":{},"body":{"interfaces/IUserBaseMapping.html":{}}}],["updateuserdata(data:any):observable",{"_index":2822,"title":{},"body":{"interfaces/IUserbaseService.html":{}}}],["updateuserdata(token",{"_index":2766,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["updateuserdata(token:string,data:any,userid:string):observable",{"_index":2778,"title":{},"body":{"interfaces/IUserbaseRepositoy.html":{}}}],["updating",{"_index":1221,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListformularyComponent.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["upload",{"_index":1483,"title":{},"body":{"injectables/BaseMediaService.html":{},"injectables/FirebaseMediaService.html":{},"components/ProfilePage.html":{},"classes/StrapiMediaService.html":{},"miscellaneous/variables.html":{}}}],["upload(blob",{"_index":1484,"title":{},"body":{"injectables/BaseMediaService.html":{},"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{}}}],["upload(blob:blob):observable",{"_index":1489,"title":{},"body":{"injectables/BaseMediaService.html":{}}}],["upload:string",{"_index":4034,"title":{},"body":{"miscellaneous/variables.html":{}}}],["upload_api_url_token",{"_index":989,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["uploadapi",{"_index":4070,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadapi:\"http://localhost:1337/api/upload",{"_index":4079,"title":{},"body":{"miscellaneous/variables.html":{}}}],["uploadbytes",{"_index":2354,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["uploadbytes(storageref",{"_index":2375,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["uploaded",{"_index":2371,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["uploadedblob",{"_index":3177,"title":{},"body":{"components/ProfilePage.html":{}}}],["uploadedblob.push(downloadurl",{"_index":2382,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["uploadedblob:any",{"_index":2381,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["uploading",{"_index":1482,"title":{},"body":{"injectables/BaseMediaService.html":{},"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{}}}],["uploads",{"_index":1486,"title":{},"body":{"injectables/BaseMediaService.html":{},"injectables/FirebaseMediaService.html":{},"components/ProfilePage.html":{},"classes/StrapiMediaService.html":{}}}],["uploads/${filename",{"_index":2367,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["uploadtask",{"_index":2374,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["uploadurl",{"_index":2341,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{}}}],["uploadurl:string",{"_index":2359,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"classes/StrapiMediaService.html":{}}}],["upon",{"_index":2345,"title":{},"body":{"injectables/FirebaseMediaService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["url",{"_index":737,"title":{},"body":{"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"injectables/CoinGekoRepository.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"injectables/CryptoBaseRepository.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"classes/StrapiMediaService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["url:string",{"_index":3677,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["urltree",{"_index":1307,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{}}}],["usado",{"_index":3957,"title":{},"body":{"index.html":{}}}],["usamos",{"_index":3089,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{},"index.html":{}}}],["usando",{"_index":3882,"title":{},"body":{"index.html":{}}}],["usar",{"_index":3955,"title":{},"body":{"index.html":{}}}],["usd",{"_index":1405,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/CryptoviewPage.html":{},"injectables/FirebaseAuthenticationService.html":{},"components/HomePage.html":{},"interfaces/ICryptoBase.html":{},"components/ProfilePage.html":{},"injectables/StrapiAutenticationService.html":{},"index.html":{}}}],["use",{"_index":2649,"title":{},"body":{"interfaces/ICryptoBase.html":{},"components/LoginPage.html":{},"components/RegisterPage.html":{},"miscellaneous/variables.html":{}}}],["useclass",{"_index":1033,"title":{},"body":{"modules/AppModule.html":{}}}],["used",{"_index":48,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/CoinGekoRepository.html":{},"directives/ColorpercentDirective.html":{},"injectables/CryptoBaseRepository.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/LoginResponse.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"interfaces/StsTokenManager.html":{},"miscellaneous/functions.html":{},"interfaces/providedata.html":{},"miscellaneous/variables.html":{}}}],["useexisting",{"_index":2072,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["usefactory",{"_index":1030,"title":{},"body":{"modules/AppModule.html":{},"miscellaneous/variables.html":{}}}],["usefactory:(backend:string,httpclient:httpclient,apiurltoken:string,mapping:icryptobasemapping,cryptoken:string",{"_index":4032,"title":{},"body":{"miscellaneous/variables.html":{}}}],["usefactory:(backend:string,httpclient:httpclient,apiurltoken:string,mapping:iuserbasemapping,firebasemainservice:ifirebasemainservice,functions",{"_index":4044,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useful",{"_index":1645,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["user",{"_index":277,"title":{"interfaces/User.html":{}},"body":{"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMediaService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/IFirebaseService.html":{},"interfaces/IStrapiService.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserFirebaseRepository.html":{},"interfaces/IUserStrapiRepositoy.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/LoginPage.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"coverage.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"miscellaneous/functions.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["user's",{"_index":1296,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IUserbaseRepositoy.html":{},"components/ListPage.html":{},"interfaces/LoginResponse.html":{},"components/ProfilePage.html":{},"injectables/StrapiAutenticationService.html":{},"interfaces/StsTokenManager.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/providedata.html":{}}}],["user.email",{"_index":618,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["user.gender",{"_index":619,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["user.id",{"_index":602,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["user.isadmin",{"_index":625,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuardAdmin.html":{}}}],["user.repository.ts",{"_index":3710,"title":{},"body":{"coverage.html":{}}}],["user.service",{"_index":769,"title":{},"body":{"components/AppComponent.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["user.service.ts",{"_index":3648,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{}}}],["user.service.ts:18",{"_index":3650,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["user.uid",{"_index":2372,"title":{},"body":{"injectables/FirebaseMediaService.html":{}}}],["user.username",{"_index":617,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/ProfilePage.html":{}}}],["user/session",{"_index":724,"title":{},"body":{"components/AppComponent.html":{}}}],["user/user",{"_index":2724,"title":{},"body":{"interfaces/IUserStrapiRepositoy.html":{}}}],["user:basicuser={id:\"\",email:\"\",username:\"\",img:\"\",gender:'',isadmin:false",{"_index":3158,"title":{},"body":{"components/ProfilePage.html":{}}}],["user:basicuser={id:\"\",username:\"\",email:\"\",img:\"\",gender:'',isadmin:false",{"_index":782,"title":{},"body":{"components/AppComponent.html":{}}}],["user:strapiuser",{"_index":3546,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["user?:basicuser",{"_index":332,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["user_api_url_token",{"_index":990,"title":{},"body":{"modules/AppModule.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/UserBaseRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_csv_url_token",{"_index":991,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_csv_url_token,httpclient",{"_index":4055,"title":{},"body":{"miscellaneous/variables.html":{}}}],["user_mapping_token",{"_index":992,"title":{},"body":{"modules/AppModule.html":{},"injectables/UserBaseRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_repository_token",{"_index":3673,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user_service_token",{"_index":547,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"modules/AppModule.html":{},"guards/AuthGuardAdmin.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userapilogin",{"_index":4064,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userapilogin:\"http://localhost:1337/api/auth/local",{"_index":4076,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userapiurl",{"_index":4061,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userapiurl:\"http://localhost:1337/api",{"_index":4075,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userapiurltoken",{"_index":2212,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["userapiurltoken:string",{"_index":2257,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["userbaserepository",{"_index":3620,"title":{"injectables/UserBaseRepository.html":{}},"body":{"injectables/UserBaseRepository.html":{},"coverage.html":{}}}],["userbaseservice",{"_index":685,"title":{},"body":{"components/AppComponent.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"coverage.html":{}}}],["userbaseservice:116",{"_index":3652,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:126",{"_index":3657,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:136",{"_index":3651,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:146",{"_index":3663,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:156",{"_index":3653,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:166",{"_index":3667,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:176",{"_index":3666,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:187",{"_index":3665,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:199",{"_index":3655,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:210",{"_index":3654,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:224",{"_index":3656,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:25",{"_index":3671,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:54",{"_index":3664,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:63",{"_index":3662,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:74",{"_index":3658,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["userbaseservice:93",{"_index":3668,"title":{},"body":{"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["usercredential",{"_index":2273,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["usercredential.user",{"_index":2274,"title":{},"body":{"injectables/FirebaseAuthenticationService.html":{}}}],["usercsv:\"https://cryptowizzard",{"_index":4073,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userfactoryservice",{"_index":1000,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userfirebaseservice",{"_index":3646,"title":{"injectables/UserFirebaseService.html":{}},"body":{"injectables/UserFirebaseService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userfirebaseservice(repository,authentication,usercsvurl,http",{"_index":4053,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userid",{"_index":476,"title":{},"body":{"components/AdminPanelPage.html":{},"interfaces/IUserbaseRepositoy.html":{},"injectables/UserBaseRepository.html":{}}}],["userlogin={email:email,password:password",{"_index":2494,"title":{},"body":{"components/FormularyComponent.html":{}}}],["usermappingfactory",{"_index":1001,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["username",{"_index":279,"title":{},"body":{"components/AdminFormularyComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"interfaces/Image.html":{},"interfaces/LoginResponse.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/StsTokenManager.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptosxd.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["username:\"xd",{"_index":2201,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/providedata.html":{}}}],["username:['',[validators.required",{"_index":343,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["username:data.username",{"_index":1268,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["username:name",{"_index":2205,"title":{},"body":{"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseUserMapping.html":{},"interfaces/LoginResponse.html":{},"interfaces/StsTokenManager.html":{},"interfaces/cryptosxd.html":{},"interfaces/providedata.html":{},"interfaces/rawbasiclist.html":{}}}],["username:payload.username,password:payload.password,email:payload.email,gender:payload.gender",{"_index":3558,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["username:response.user.username",{"_index":3562,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["username:response.username",{"_index":3569,"title":{},"body":{"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{}}}],["username:string",{"_index":1169,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BasicUser.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/LoginPayLoad.html":{},"interfaces/Meta.html":{},"interfaces/RegisterPayLoad.html":{},"interfaces/Small.html":{},"injectables/StrapiAuthMappingService.html":{},"interfaces/StrapiLoginResponse.html":{},"interfaces/StrapiRegister.html":{},"interfaces/StrapiRegisterResponse.html":{},"interfaces/StrapiSignIn.html":{},"interfaces/StrapiUser.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/User.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["username:string=this.formulary.get(\"username\")?.value",{"_index":2488,"title":{},"body":{"components/FormularyComponent.html":{}}}],["username:this.formulary.controls['username'].value",{"_index":351,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["userregister={username:username,email:email,password:password,gender:gender.value",{"_index":2492,"title":{},"body":{"components/FormularyComponent.html":{}}}],["users",{"_index":434,"title":{},"body":{"components/AdminPanelPage.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/RegisterPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"miscellaneous/variables.html":{}}}],["users_permissions_user",{"_index":1564,"title":{},"body":{"interfaces/BodyCreateList.html":{}}}],["users_permissions_user:number",{"_index":1139,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["users_permissions_user:parseint(iduser",{"_index":1214,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["userservice",{"_index":454,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"guards/AuthGuardAdmin.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["userservice:iuserbaseservice",{"_index":553,"title":{},"body":{"components/AdminPanelPage.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SearchPage.html":{}}}],["userservice:userbaseservice",{"_index":775,"title":{},"body":{"components/AppComponent.html":{}}}],["userservicefactory",{"_index":1002,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userslimit",{"_index":443,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["usersresponse.filter((it",{"_index":563,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["usersresponse[0",{"_index":561,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["usersresponse[usersresponse.length",{"_index":566,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["userstrapiservice",{"_index":3680,"title":{"injectables/UserStrapiService.html":{}},"body":{"injectables/UserStrapiService.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userstrapiservice(repository,authentication,usercsvurl,http",{"_index":4052,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userupdate={email:email,username:username,gender:gender.value",{"_index":2496,"title":{},"body":{"components/FormularyComponent.html":{}}}],["uses",{"_index":1712,"title":{},"body":{"injectables/CryptoGeko.html":{},"components/ListPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["usevalue",{"_index":1050,"title":{},"body":{"modules/AppModule.html":{}}}],["usevalue:environment.userapilogin",{"_index":1039,"title":{},"body":{"modules/AppModule.html":{}}}],["usevalue:environment.userapiurl",{"_index":1037,"title":{},"body":{"modules/AppModule.html":{}}}],["using",{"_index":20,"title":{},"body":{"components/AboutPage.html":{},"guards/AuthGuardAdmin.html":{},"injectables/BaseAutenticationService.html":{},"injectables/CryptoBaseService.html":{},"components/CustomGenderComponent.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseMainService.html":{},"components/FormularyComponent.html":{},"components/LoginPage.html":{},"components/SearchPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["uso",{"_index":3956,"title":{},"body":{"index.html":{}}}],["usually",{"_index":2669,"title":{},"body":{"interfaces/ICryptobaseService.html":{}}}],["usuario",{"_index":897,"title":{},"body":{"components/AppComponent.html":{},"index.html":{}}}],["usuarios",{"_index":3892,"title":{},"body":{"index.html":{}}}],["utilities",{"_index":2838,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{},"injectables/SharedService.html":{}}}],["utility",{"_index":468,"title":{},"body":{"components/AdminPanelPage.html":{},"injectables/BaseAutenticationService.html":{}}}],["utiliza",{"_index":3862,"title":{},"body":{"index.html":{}}}],["utilizamos",{"_index":3951,"title":{},"body":{"index.html":{}}}],["val",{"_index":1435,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["valid",{"_index":1299,"title":{},"body":{"guards/AuthGuard.html":{},"interfaces/IAuthenticationService.html":{}}}],["validate",{"_index":1325,"title":{},"body":{"guards/AuthGuard2.html":{}}}],["validates",{"_index":3143,"title":{},"body":{"components/ProfilePage.html":{}}}],["validation",{"_index":1288,"title":{},"body":{"guards/AuthGuard.html":{}}}],["validators",{"_index":312,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/ProfilePage.html":{}}}],["validators.required,validators.minlength(6",{"_index":2479,"title":{},"body":{"components/FormularyComponent.html":{},"components/ProfilePage.html":{}}}],["validators.required,validators.pattern(emailpattern",{"_index":344,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["validity",{"_index":2630,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["valor",{"_index":3485,"title":{},"body":{"components/SplashPage.html":{}}}],["valor=\"home",{"_index":3487,"title":{},"body":{"components/SplashPage.html":{}}}],["valor=\"login",{"_index":3488,"title":{},"body":{"components/SplashPage.html":{}}}],["value",{"_index":496,"title":{},"body":{"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"injectables/BaseAutenticationService.html":{},"interfaces/BodyCreateList.html":{},"directives/ColorpercentDirective.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"pipes/CurrencyPipe.html":{},"components/CustomGenderComponent.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/Meta.html":{},"pipes/PercentformaterPipe.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"injectables/TranslationService.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{},"miscellaneous/variables.html":{}}}],["value.email=data.email",{"_index":1256,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["value.password=data.email",{"_index":1259,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["value.tofixed(2",{"_index":3117,"title":{},"body":{"pipes/PercentformaterPipe.html":{}}}],["value:\"male",{"_index":2120,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["value:'female",{"_index":2122,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["value:'other',name",{"_index":2124,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["value:any",{"_index":1254,"title":{},"body":{"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"interfaces/Meta.html":{},"interfaces/Small.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["value=event.detail.value",{"_index":3338,"title":{},"body":{"components/SearchPage.html":{}}}],["valueaccessor",{"_index":405,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["values",{"_index":303,"title":{},"body":{"components/AdminFormularyComponent.html":{},"injectables/CryptoBaseService.html":{},"injectables/CryptoGeko.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"pipes/PercentformaterPipe.html":{},"components/RegisterPage.html":{}}}],["valuexd=this.lists.findindex(c=>c.id==value.id",{"_index":2885,"title":{},"body":{"components/ListPage.html":{}}}],["valuexd=value",{"_index":1888,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["var",{"_index":179,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{}}}],["variable",{"_index":1642,"title":{},"body":{"directives/ColorpercentDirective.html":{},"coverage.html":{}}}],["variables",{"_index":3989,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["ventana",{"_index":3088,"title":{},"body":{"components/LoginPage.html":{},"components/RegisterPage.html":{}}}],["verificateuser",{"_index":1385,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/FirebaseAuthenticationService.html":{},"interfaces/IAuthenticationService.html":{},"injectables/StrapiAutenticationService.html":{}}}],["verificateuser():observable",{"_index":2634,"title":{},"body":{"interfaces/IAuthenticationService.html":{}}}],["verifies",{"_index":2629,"title":{},"body":{"interfaces/IAuthenticationService.html":{},"components/SplashPage.html":{}}}],["vermenu",{"_index":679,"title":{},"body":{"components/AppComponent.html":{}}}],["vermenu:boolean=true",{"_index":814,"title":{},"body":{"components/AppComponent.html":{}}}],["versa",{"_index":2388,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["version",{"_index":3985,"title":{},"body":{"properties.html":{}}}],["vertical",{"_index":380,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/ListformularyComponent.html":{},"components/SplashPage.html":{}}}],["verticalline",{"_index":1973,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["verticalmente",{"_index":955,"title":{},"body":{"components/AppComponent.html":{},"components/FormularyComponent.html":{}}}],["via",{"_index":1451,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{},"injectables/CryptoBaseRepository.html":{},"injectables/CryptoGeko.html":{},"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["vice",{"_index":2387,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/cryptosxd.html":{},"interfaces/rawbasiclist.html":{}}}],["view",{"_index":2539,"title":{},"body":{"components/HomePage.html":{},"components/ListcontentPage.html":{},"components/ProfilePage.html":{},"components/SplashPage.html":{}}}],["viewport",{"_index":3401,"title":{},"body":{"components/SearchPage.html":{}}}],["views",{"_index":3326,"title":{},"body":{"components/SearchPage.html":{}}}],["virtual",{"_index":3400,"title":{},"body":{"components/SearchPage.html":{},"dependencies.html":{}}}],["visibility",{"_index":18,"title":{},"body":{"components/AboutPage.html":{},"components/FormularyComponent.html":{},"interfaces/IAuthenticationService.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{}}}],["visible",{"_index":57,"title":{},"body":{"components/AboutPage.html":{},"components/AppComponent.html":{}}}],["visual",{"_index":1734,"title":{},"body":{"components/CryptocardComponent.html":{}}}],["visualiza",{"_index":3874,"title":{},"body":{"index.html":{}}}],["visually",{"_index":1646,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["voice",{"_index":3299,"title":{},"body":{"components/SearchPage.html":{}}}],["void",{"_index":59,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"directives/BackgraphbuttonDirective.html":{},"injectables/BaseAutenticationService.html":{},"directives/ColorpercentDirective.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/CustomGenderComponent.html":{},"classes/FirebaseAuthMappingService.html":{},"injectables/FirebaseAuthenticationService.html":{},"injectables/FirebaseUserMapping.html":{},"components/FormularyComponent.html":{},"components/HomePage.html":{},"interfaces/IAuthenticationService.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"components/SplashPage.html":{},"injectables/StrapiAutenticationService.html":{},"injectables/TranslationService.html":{}}}],["volume",{"_index":1529,"title":{},"body":{"interfaces/BasiCryptoFromApi.html":{},"injectables/CoinGekoMapping.html":{},"interfaces/CryptoFromApi.html":{},"interfaces/PricesCryptoFromApi.html":{}}}],["voz",{"_index":3374,"title":{},"body":{"components/SearchPage.html":{},"index.html":{}}}],["vue",{"_index":3816,"title":{},"body":{"dependencies.html":{}}}],["warning",{"_index":3454,"title":{},"body":{"injectables/SharedService.html":{}}}],["wavechart",{"_index":1920,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["web",{"_index":1036,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{},"index.html":{}}}],["webdir",{"_index":4058,"title":{},"body":{"miscellaneous/variables.html":{}}}],["webkit",{"_index":3302,"title":{},"body":{"components/SearchPage.html":{}}}],["webkitspeechrecognition",{"_index":3316,"title":{},"body":{"components/SearchPage.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["weight",{"_index":160,"title":{},"body":{"components/AboutPage.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ProfilePage.html":{}}}],["well",{"_index":1450,"title":{},"body":{"injectables/BaseAutenticationService.html":{},"injectables/CoinGekoRepository.html":{}}}],["whether",{"_index":1294,"title":{},"body":{"guards/AuthGuard.html":{},"guards/AuthGuard2.html":{},"guards/AuthGuardAdmin.html":{},"components/CustomGenderComponent.html":{}}}],["white",{"_index":636,"title":{},"body":{"components/AdminPanelPage.html":{}}}],["width",{"_index":107,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AdminPanelPage.html":{},"components/AppComponent.html":{},"interfaces/Attributes.html":{},"interfaces/Attributes2.html":{},"interfaces/BodyCreateList.html":{},"interfaces/CreateListUpdate.html":{},"interfaces/Crypto.html":{},"components/CryptocardComponent.html":{},"components/CryptosimplecardComponent.html":{},"components/CryptoviewPage.html":{},"interfaces/Data.html":{},"interfaces/Data2.html":{},"interfaces/Favoritelist.html":{},"interfaces/Formats.html":{},"components/FormularyComponent.html":{},"interfaces/GetAllList.html":{},"interfaces/Image.html":{},"components/ListPage.html":{},"components/ListcontentPage.html":{},"components/ListcryptoComponent.html":{},"components/ListformularyComponent.html":{},"components/LoginPage.html":{},"interfaces/Meta.html":{},"components/ProfilePage.html":{},"components/RegisterPage.html":{},"components/SearchPage.html":{},"interfaces/Small.html":{},"components/SplashPage.html":{},"injectables/StrapiUserMapping.html":{},"interfaces/Thumbnail.html":{},"interfaces/addcrypto.html":{},"interfaces/addlistresponse.html":{},"interfaces/basicuseresponse.html":{},"interfaces/bodyupdate.html":{},"interfaces/createListRemote.html":{},"interfaces/cryptoid.html":{},"interfaces/cryptos.html":{},"interfaces/cryptoxd.html":{},"interfaces/datadelete.html":{},"interfaces/deletecryptofromfavoritelist.html":{},"interfaces/getallresponse.html":{},"interfaces/updateCryptoData.html":{},"interfaces/updateCryptoId.html":{},"interfaces/updateCryptos.html":{},"interfaces/updatecryptofromfavoritelist.html":{},"interfaces/updateuser.html":{}}}],["within",{"_index":331,"title":{},"body":{"components/AdminFormularyComponent.html":{}}}],["without",{"_index":309,"title":{},"body":{"components/AdminFormularyComponent.html":{},"interfaces/ICryptoBase.html":{},"interfaces/ICryptobaseService.html":{},"components/ListformularyComponent.html":{}}}],["writes",{"_index":2114,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["writevalue",{"_index":2087,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["writevalue(obj",{"_index":2112,"title":{},"body":{"components/CustomGenderComponent.html":{}}}],["www",{"_index":4059,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":630,"title":{},"body":{"components/AdminPanelPage.html":{},"components/CryptoviewPage.html":{}}}],["xd",{"_index":1354,"title":{},"body":{"directives/BackgraphbuttonDirective.html":{}}}],["y",{"_index":171,"title":{},"body":{"components/AboutPage.html":{},"components/AdminFormularyComponent.html":{},"components/AppComponent.html":{},"components/CryptocardComponent.html":{},"components/CryptoviewPage.html":{},"components/FormularyComponent.html":{},"components/ListformularyComponent.html":{},"index.html":{}}}],["ybottom",{"_index":1983,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["year",{"_index":1897,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["yes",{"_index":2413,"title":{},"body":{"injectables/FirebaseUserMapping.html":{},"interfaces/IAuthenticationMapping.html":{},"interfaces/IUserBaseMapping.html":{},"interfaces/IUserbaseRepositoy.html":{},"interfaces/IUserbaseService.html":{},"components/ListPage.html":{},"injectables/UserBaseRepository.html":{},"injectables/UserFirebaseService.html":{},"injectables/UserStrapiService.html":{}}}],["ytop",{"_index":1981,"title":{},"body":{"components/CryptoviewPage.html":{}}}],["z",{"_index":2918,"title":{},"body":{"components/ListPage.html":{},"components/ListcontentPage.html":{}}}],["z0",{"_index":338,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["z]{2",{"_index":341,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["za",{"_index":337,"title":{},"body":{"components/AdminFormularyComponent.html":{},"components/FormularyComponent.html":{}}}],["zero",{"_index":1643,"title":{},"body":{"directives/ColorpercentDirective.html":{}}}],["zone.js",{"_index":3820,"title":{},"body":{"dependencies.html":{}}}],["zoom",{"_index":239,"title":{},"body":{"modules/AboutPageModule.html":{},"modules/AdminPanelPageModule.html":{},"modules/AppModule.html":{},"modules/CryptoviewPageModule.html":{},"modules/HomePageModule.html":{},"modules/ListPageModule.html":{},"modules/ListcontentPageModule.html":{},"modules/LoginPageModule.html":{},"modules/ProfilePageModule.html":{},"modules/RegisterPageModule.html":{},"modules/SearchPageModule.html":{},"modules/SharedModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AboutPage.html":{"url":"components/AboutPage.html","title":"component - AboutPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AboutPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/General/about/about.page.ts\n\n\n\n    \n        Description\n    \n    \n        AboutPage component.\nThis component represents the About page of the application.\nOn initialization, it sets the menu visibility to true using the authentication service.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-about\n            \n\n\n\n            \n                styleUrls\n                ./about.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./about.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authservice: IAuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/General/about/about.page.ts:16\n                            \n                        \n\n                \n                    \n                            Creates an instance of AboutPage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The authentication service used to manage auth state and UI.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/about/about.page.ts:29\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook called on component initialization.\nSets the menu to be visible.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, Inject, OnInit } from '@angular/core';\nimport { AUTH_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\n\n/**\n * AboutPage component.\n * \n * This component represents the About page of the application.\n * On initialization, it sets the menu visibility to true using the authentication service.\n */\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.page.html',\n  styleUrls: ['./about.page.scss'],\n})\nexport class AboutPage implements OnInit {\n  /**\n   * Creates an instance of AboutPage.\n   * @param authservice The authentication service used to manage auth state and UI.\n   */\n  constructor(\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n  ) { }\n\n  /**\n   * Lifecycle hook called on component initialization.\n   * Sets the menu to be visible.\n   */\n  ngOnInit() {\n    this.authservice.setmenu(true)\n  }\n}\n    \n\n    \n        \n  \n    {{ 'MAINMENU.ABOUTUS' | translate}}\n  \n\n\n\n  \n    \n      \n        \n          \n          \n            {{ 'ABOUTUS.PRESENTATION1' | translate }} Boris\n            {{ 'ABOUTUS.PRESENTATION2' | translate }} CPIFP ALAN TURING\n          \n        \n      \n\n      \n        \n          \n          \n            {{ 'ABOUTUS.PRESENTATION1' | translate }} Eloy\n            {{ 'ABOUTUS.PRESENTATION2' | translate }} CPIFP ALAN TURING\n          \n        \n      \n    \n\n    \n      \n        \n          \n            {{ 'ABOUTUS.SKILLS.TITLE' | translate }}\n          \n          \n            \n              \n              {{ 'ABOUTUS.SKILLS.SKILL1' | translate }}\n            \n            \n              \n              {{ 'ABOUTUS.SKILLS.SKILL2' | translate }}\n            \n            \n              \n              {{ 'ABOUTUS.SKILLS.SKILL3' | translate }}\n            \n            \n              \n              {{ 'ABOUTUS.SKILLS.SKILL4' | translate }}\n            \n            \n              \n              {{ 'ABOUTUS.SKILLS.SKILL5' | translate }}\n            \n          \n        \n      \n\n      \n        \n          \n            {{ 'ABOUTUS.PRESENTATION3' | translate }}\n          \n          \n            {{ 'ABOUTUS.PRESENTATION4' | translate }}\n            \n          \n        \n      \n    \n\n    \n      \n        \n          \n            {{ 'ABOUTUS.PRESENTATION5' | translate }} (Boris)\n          \n          \n            {{ 'ABOUTUS.PRESENTATION6' | translate }}\n            \n              {{ 'ABOUTUS.PRESENTATION7' | translate }}\n            \n            CPIFP ALAN TURING\n          \n        \n      \n\n      \n        \n          \n            {{ 'ABOUTUS.PRESENTATION5' | translate }} (Eloy)\n          \n          \n            {{ 'ABOUTUS.PRESENTATION6' | translate }}\n            \n              {{ 'ABOUTUS.PRESENTATION7' | translate }}\n            \n            CPIFP ALAN TURING\n          \n        \n      \n    \n  \n\n    \n\n    \n                \n                    ./about.page.scss\n                \n                .about-section {\n    text-align: center;\n    margin-bottom: 20px;\n  }\n\n  .profile-image {\n    margin-top: 20px!important;\n    display: block;\n    margin: auto;\n    width: 135px;\n    height: 135px;\n    object-fit: cover;\n    margin-bottom: 15px;\n  }\n\n  .role {\n    font-size: 1.2rem;\n  }\n\n  .project-section {\n    margin-top: 20px;\n    text-align: center;\n  }\n\n  .project-section h3 {\n    margin-bottom: 10px;\n  }\n\n  .project-section p {\n    font-size: 1rem;\n    line-height: 1.5;\n    max-width: 600px;\n    margin: 0 auto;\n  }\n\n  .center-image {\n    margin-top: 20px;\n    width: 100%;\n    max-width: 400px;\n    height: auto;\n  }\n\n  .links-section {\n    text-align: center;\n  }\n\n  .links-section ion-button {\n    margin: 10px 0;\n  }\n\n  img{\n    border-radius: 50%!important;\n  }\n\n  #container{\n\n    margin: auto;\n    max-width: 90%;\n  }\n\n\n  /////////\n  /// \n  /// /* Estilos generales */\n#container {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n  padding: 20px;\n}\n\nion-card {\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n  overflow: hidden;\n  padding: 16px;\n}\n\nion-card-header {\n  padding-bottom: 8px;\n}\n\nion-card-title {\n  font-size: 1.5rem;\n  font-weight: 600;\n  margin-bottom: 4px;\n}\n\nion-card-subtitle {\n  font-size: 1.1rem;\n  font-weight: 400;\n}\n\nion-card-content {\n  font-size: 1rem;\n  line-height: 1.5;\n}\n\n\n\n/* Sección de Enlaces */\n.links-section ion-button {\n  margin: 10px 0;\n}\n\n\n\n/* Ajustes de espaciado y márgenes */\nion-card {\n  margin-bottom: 20px;\n}\n\nion-card-header, ion-card-content {\n  padding: 16px;\n}\n\nion-button {\n  --padding-start: 16px;\n  --padding-end: 16px;\n  margin-top: 12px;\n  border-radius: 8px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ \\'MAINMENU.ABOUTUS\\' | translate}}                                                      {{ \\'ABOUTUS.PRESENTATION1\\' | translate }} Boris            {{ \\'ABOUTUS.PRESENTATION2\\' | translate }} CPIFP ALAN TURING                                                                      {{ \\'ABOUTUS.PRESENTATION1\\' | translate }} Eloy            {{ \\'ABOUTUS.PRESENTATION2\\' | translate }} CPIFP ALAN TURING                                                                    {{ \\'ABOUTUS.SKILLS.TITLE\\' | translate }}                                                            {{ \\'ABOUTUS.SKILLS.SKILL1\\' | translate }}                                                    {{ \\'ABOUTUS.SKILLS.SKILL2\\' | translate }}                                                    {{ \\'ABOUTUS.SKILLS.SKILL3\\' | translate }}                                                    {{ \\'ABOUTUS.SKILLS.SKILL4\\' | translate }}                                                    {{ \\'ABOUTUS.SKILLS.SKILL5\\' | translate }}                                                                        {{ \\'ABOUTUS.PRESENTATION3\\' | translate }}                                {{ \\'ABOUTUS.PRESENTATION4\\' | translate }}                                                                                {{ \\'ABOUTUS.PRESENTATION5\\' | translate }} (Boris)                                {{ \\'ABOUTUS.PRESENTATION6\\' | translate }}                          {{ \\'ABOUTUS.PRESENTATION7\\' | translate }}                        CPIFP ALAN TURING                                                            {{ \\'ABOUTUS.PRESENTATION5\\' | translate }} (Eloy)                                {{ \\'ABOUTUS.PRESENTATION6\\' | translate }}                          {{ \\'ABOUTUS.PRESENTATION7\\' | translate }}                        CPIFP ALAN TURING                              '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'AboutPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AboutPageModule.html":{"url":"modules/AboutPageModule.html","title":"module - AboutPageModule","body":"\n                   \n\n\n\n\n    Modules\n    AboutPageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AboutPageModule\n\n\n\ncluster_AboutPageModule_imports\n\n\n\ncluster_AboutPageModule_declarations\n\n\n\n\nAboutPage\n\nAboutPage\n\n\n\nAboutPageModule\n\nAboutPageModule\n\nAboutPageModule -->\n\nAboutPage->AboutPageModule\n\n\n\n\n\nAboutPageRoutingModule\n\nAboutPageRoutingModule\n\nAboutPageModule -->\n\nAboutPageRoutingModule->AboutPageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/about/about.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AboutPage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AboutPageRoutingModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { AboutPageRoutingModule } from './about-routing.module';\n\nimport { AboutPage } from './about.page';\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    AboutPageRoutingModule,\n    TranslateModule.forChild(),\n    \n  ],\n  declarations: [AboutPage]\n})\nexport class AboutPageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AboutPageRoutingModule.html":{"url":"modules/AboutPageRoutingModule.html","title":"module - AboutPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AboutPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/about/about-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AboutPage } from './about.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AboutPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AboutPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AdminFormularyComponent.html":{"url":"components/AdminFormularyComponent.html","title":"component - AdminFormularyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AdminFormularyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/admin-formulary/admin-formulary.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin-formulary\n            \n\n\n\n            \n                styleUrls\n                ./admin-formulary.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./admin-formulary.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                formulary\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                confirm\n                            \n                            \n                                dismissModal\n                            \n                            \n                                inicializateformulary\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    username\n                                \n                                \n                                    gender\n                                \n                                \n                                    isAdmin\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(modalController: ModalController, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:16\n                            \n                        \n\n                \n                    \n                            Creates the AdminFormularyComponent and injects required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        modalController\n                                                  \n                                                        \n                                                                    ModalController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Used to control the modal dialog (dismiss/close).\n\n                                                        \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                FormBuilder for creating the reactive form.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        user\n                    \n                \n                \n                    \n                        Type :         BasicUser\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:15\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        confirm\n                        \n                    \n                \n            \n            \n                \nconfirm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:65\n                        \n                    \n\n\n            \n                \n                        Submits the form and closes the modal, passing the form values.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                A promise that resolves after the modal is dismissed with the form data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dismissModal\n                        \n                    \n                \n            \n            \n                \ndismissModal()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:39\n                        \n                    \n\n\n            \n                \n                        Closes the modal without passing any data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inicializateformulary\n                        \n                    \n                \n            \n            \n                \ninicializateformulary()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:46\n                        \n                    \n\n\n            \n                \n                        Initializes the form with validators and optionally fills it with the @Input user data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:32\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes the form with existing user data if available.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        formulary\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        username\n                    \n                \n\n                \n                    \n                        getusername()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:78\n                                \n                            \n                    \n                        \n                                Getter for the username form control.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        gender\n                    \n                \n\n                \n                    \n                        getgender()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:85\n                                \n                            \n                    \n                        \n                                Getter for the gender form control.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isAdmin\n                    \n                \n\n                \n                    \n                        getisAdmin()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/admin-formulary/admin-formulary.component.ts:92\n                                \n                            \n                    \n                        \n                                Getter for the isAdmin form control.\n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalController } from '@ionic/angular';\nimport { BasicUser } from 'src/app/core/models/User.model';\n\n@Component({\n  selector: 'app-admin-formulary',\n  templateUrl: './admin-formulary.component.html',\n  styleUrls: ['./admin-formulary.component.scss'],\n})\n/**\n * Component for editing basic user data (username, email, gender, isAdmin) within a modal.\n */\nexport class AdminFormularyComponent  implements OnInit {\n  @Input() user?:BasicUser\n  public formulary!: FormGroup;\n\n  /**\n   * Creates the AdminFormularyComponent and injects required services.\n   * \n   * @param modalController Used to control the modal dialog (dismiss/close).\n   * @param fb FormBuilder for creating the reactive form.\n   */\n  constructor(\n    private modalController: ModalController,\n    private fb:FormBuilder\n  ) { }\n\n  /**\n   * Lifecycle hook that initializes the form with existing user data if available.\n   */\n  ngOnInit() {\n    this.inicializateformulary()\n  }\n\n  /**\n   * Closes the modal without passing any data.\n   */\n  dismissModal() {\n    this.modalController.dismiss();\n  }\n\n  /**\n   * Initializes the form with validators and optionally fills it with the `@Input` user data.\n   */\n  inicializateformulary(){\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n    this.formulary=this.fb.group({\n      username:['',[Validators.required]],\n      email: ['', [Validators.required,Validators.pattern(emailPattern)]],\n      gender:['',[Validators.required]],\n      isAdmin:['',[Validators.required]]\n    })\n    this.formulary.get('username')?.setValue(this.user?.username)\n    this.formulary.get('email')?.setValue(this.user?.email)\n    this.formulary.get('gender')?.setValue(this.user?.gender);\n    this.formulary.get('isAdmin')?.setValue(this.user?.isAdmin);\n  }\n  \n  /**\n   * Submits the form and closes the modal, passing the form values.\n   *\n   * @returns A promise that resolves after the modal is dismissed with the form data.\n   */\n  confirm() {\n    let data: any\n    data = {\n      username:this.formulary.controls['username'].value,\n      gender:(this.formulary.controls['gender'].value).value,\n      isAdmin:this.formulary.controls['isAdmin'].value\n    }\n    return this.modalController.dismiss(data, 'confirm');\n  }\n\n  /**\n   * Getter for the `username` form control.\n   */\n  get username(){\n    return this.formulary.controls['username'];\n  }\n\n  /**\n   * Getter for the `gender` form control.\n   */\n  get gender(){\n    return this.formulary.controls['gender'];\n  }\n\n  /**\n   * Getter for the `isAdmin` form control.\n   */\n  get isAdmin() {\n    return this.formulary.controls['isAdmin'];\n  }\n}\n    \n\n    \n        \n  \n    {{'PROFILE.MODIFY' | translate}}\n    \n      \n        \n      \n    \n  \n\n\n\n  \n    \n\n    \n    \n      \n    \n    \n      {{'CRUDUSER.ERRORS.USERNAMEREQUIRED' | translate}}\n    \n\n    \n    \n      \n    \n    \n      {{'CRUDUSER.ERRORS.GENDERSELECTED' | translate}}\n    \n\n    \n    \n      {{ 'ADMIN_PANEL.TABLE.ADMIN' | translate }}\n      \n    \n\n    \n      \n        {{'COMMON.SAVE' | translate}}\n      \n      \n        {{'COMMON.SAVE' | translate}}\n      \n    \n  \n\n    \n\n    \n                \n                    ./admin-formulary.component.scss\n                \n                .center-content {\n  position: relative;\n  height: 100%; /* Asegura que el contenido ocupe toda la pantalla */\n}\n\n.center-form {\n  position: absolute;\n  top: 50%; /* Coloca el formulario en el centro vertical */\n  left: 50%; /* Coloca el formulario en el centro horizontal */\n  transform: translate(-50%, -50%); /* Ajusta para centrar correctamente */\n  width: 100%; /* Asegura que el formulario sea responsive */\n  padding: 2rem; /* Espaciado interno para un diseño limpio */\n  border-radius: 12px; /* Bordes redondeados para un diseño moderno */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra ligera para profundidad */\n}\n\nion-item {\n  margin-bottom: 1rem; /* Espaciado entre los campos */\n}\n\n#valueaccessor{\n  margin-left: 15px;\n  margin-bottom: 5px;\n}\n\nion-footer {\n  margin-top: 1.5rem; /* Espaciado entre los campos y el botón */\n}\n\nion-button {\n  \n  font-size: 1rem;\n  border-radius: 6px; /* Bordes redondeados para consistencia */\n}\n\nion-textarea, ion-input {\n  --padding-start: 0.5rem;\n  --padding-end: 0.5rem;\n}\n\n@media (min-width: 768px) {\n  .center-form {\n    padding: 3rem; /* Mayor espacio en dispositivos más grandes */\n  }\n}\n\nion-toolbar{\n  text-align: left!important;\n}\nion-img{\n  width: 150px;\n  display: block;\n  margin: auto; \n  margin-bottom: 20px;\n}\np{\n  margin-left: 15px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{\\'PROFILE.MODIFY\\' | translate}}                                                                {{\\'CRUDUSER.ERRORS.USERNAMEREQUIRED\\' | translate}}                                {{\\'CRUDUSER.ERRORS.GENDERSELECTED\\' | translate}}                  {{ \\'ADMIN_PANEL.TABLE.ADMIN\\' | translate }}                            {{\\'COMMON.SAVE\\' | translate}}                    {{\\'COMMON.SAVE\\' | translate}}            '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'AdminFormularyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AdminPanelPage.html":{"url":"components/AdminPanelPage.html","title":"component - AdminPanelPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AdminPanelPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/General/admin-panel/admin-panel.page.ts\n\n\n\n    \n        Description\n    \n    \n        AdminPanelPage component.\nThis component manages the administration panel for user management,\nincluding listing users with pagination, editing, deleting users,\nand downloading user data as CSV.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-admin-panel\n            \n\n\n\n            \n                styleUrls\n                ./admin-panel.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./admin-panel.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                actualUser\n                            \n                            \n                                    Private\n                                token\n                            \n                            \n                                    Public\n                                users\n                            \n                            \n                                    Private\n                                usersLimit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteUser\n                            \n                            \n                                downloadCsv\n                            \n                            \n                                editUser\n                            \n                            \n                                    Private\n                                extractFileName\n                            \n                            \n                                ionViewWillEnter\n                            \n                            \n                                loadMoreUsers\n                            \n                            \n                                loadUsers\n                            \n                            \n                                onIonInfinite\n                            \n                            \n                                    Async\n                                presentModal\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authservice: IAuthenticationService, userService: IUserbaseService, modalController: ModalController, translate: TranslateService, shared: SharedService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:30\n                            \n                        \n\n                \n                    \n                            Creates an instance of AdminPanelPage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service for managing user auth and UI state.\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                    IUserbaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User base service for managing user CRUD operations.\n\n                                                        \n                                                \n                                                \n                                                        modalController\n                                                  \n                                                        \n                                                                    ModalController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Controller to open modals.\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translate service for internationalization.\n\n                                                        \n                                                \n                                                \n                                                        shared\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Shared service for utility functions like toast messages.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \ndeleteUser(userId: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:100\n                        \n                    \n\n\n            \n                \n                        Deletes a user by id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                userId\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The id of the user to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        downloadCsv\n                        \n                    \n                \n            \n            \n                \ndownloadCsv()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:111\n                        \n                    \n\n\n            \n                \n                        Downloads the user list as a CSV file.\nShows toast messages for success or error.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        editUser\n                        \n                    \n                \n            \n            \n                \neditUser(user: BasicUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:92\n                        \n                    \n\n\n            \n                \n                        Opens a modal to edit the selected user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            BasicUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user to edit.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        extractFileName\n                        \n                    \n                \n            \n            \n                \n                        \n                    extractFileName(header: string | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:133\n                        \n                    \n\n\n            \n                \n                        Extracts the filename from the Content-Disposition header.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                header\n                                            \n                                                        string | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Content-Disposition header value.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string | null\n\n                        \n                            \n                                The extracted filename or null if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ionViewWillEnter\n                        \n                    \n                \n            \n            \n                \nionViewWillEnter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:54\n                        \n                    \n\n\n            \n                \n                        Lifecycle event called when the page is about to enter and become active.\nFetches current user info and loads the first page of users.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadMoreUsers\n                        \n                    \n                \n            \n            \n                \nloadMoreUsers(notify: HTMLIonInfiniteScrollElement | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:78\n                        \n                    \n\n\n            \n                \n                        Loads more users for infinite scrolling, appending to the current list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                notify\n                                            \n                                                        HTMLIonInfiniteScrollElement | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    The IonInfiniteScroll element to complete the loading event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadUsers\n                        \n                    \n                \n            \n            \n                \nloadUsers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:64\n                        \n                    \n\n\n            \n                \n                        Loads the first page of users, excluding the current authenticated user.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onIonInfinite\n                        \n                    \n                \n            \n            \n                \nonIonInfinite($event: IonInfiniteScrollCustomEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:172\n                        \n                    \n\n\n            \n                \n                        Event handler for the Ionic infinite scroll event.\nLoads more users when the user scrolls to the bottom.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                $event\n                                            \n                                                        IonInfiniteScrollCustomEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        presentModal\n                        \n                    \n                \n            \n            \n                \n                        \n                    presentModal(user: BasicUser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:144\n                        \n                    \n\n\n            \n                \n                        Presents a modal with the AdminFormularyComponent for editing user data.\nAfter the modal is dismissed, updates the user if changes were made.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                user\n                                            \n                                                            BasicUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user to edit.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        actualUser\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BasicUser\n\n                    \n                \n                \n                    \n                        Default value : {id:'',email:'',username:'',img:'',gender:'',isAdmin:false}\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        users\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BasicUser[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        usersLimit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 15\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/admin-panel/admin-panel.page.ts:28\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { HttpResponse } from '@angular/common/http';\nimport { Component, Inject } from '@angular/core';\nimport { ModalController } from '@ionic/angular';\nimport { IonInfiniteScrollCustomEvent } from '@ionic/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport * as saveAs from 'file-saver';\nimport { BasicUser, User } from 'src/app/core/models/User.model';\nimport { AUTH_TOKEN, USER_SERVICE_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\nimport { IUserbaseService } from 'src/app/core/services/interfaces/user/User-base-service.interface';\nimport { AdminFormularyComponent } from 'src/app/shared/admin-formulary/admin-formulary.component';\nimport { SharedService } from 'src/app/shared/sharedservice/shared.service';\n\n/**\n * AdminPanelPage component.\n * \n * This component manages the administration panel for user management,\n * including listing users with pagination, editing, deleting users,\n * and downloading user data as CSV.\n */\n@Component({\n  selector: 'app-admin-panel',\n  templateUrl: './admin-panel.page.html',\n  styleUrls: ['./admin-panel.page.scss'],\n})\nexport class AdminPanelPage {\n  public users: BasicUser[] = [];\n  private usersLimit = 15;\n  private token = '';\n  private actualUser: BasicUser = {id:'',email:'',username:'',img:'',gender:'',isAdmin:false};\n\n  /**\n   * Creates an instance of AdminPanelPage.\n   * @param authservice Authentication service for managing user auth and UI state.\n   * @param userService User base service for managing user CRUD operations.\n   * @param modalController Controller to open modals.\n   * @param translate Translate service for internationalization.\n   * @param shared Shared service for utility functions like toast messages.\n   */\n  constructor(\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    @Inject(USER_SERVICE_TOKEN) private userService:IUserbaseService,\n    private modalController: ModalController,\n    private translate: TranslateService,\n    private shared:SharedService\n  ){\n    this.authservice.setmenu(true);\n  }\n\n  /**\n   * Lifecycle event called when the page is about to enter and become active.\n   * Fetches current user info and loads the first page of users.\n   */\n  ionViewWillEnter() {\n    this.userService.GetBehaviourUser().subscribe(value => {\n      this.actualUser = value;\n    });\n    this.loadUsers();\n  }\n\n  /**\n   * Loads the first page of users, excluding the current authenticated user.\n   */\n  loadUsers() {\n    this.token = ''\n    this.userService.AdminGetUsersPagination(this.token, 0, this.usersLimit).subscribe(usersResponse=>{\n      if (usersResponse[0]) {\n        this.users = usersResponse.filter((it: User) => it.id != this.actualUser.id);\n        this.token = usersResponse[usersResponse.length-1].id;\n      }\n    });\n  }\n\n  /**\n   * Loads more users for infinite scrolling, appending to the current list.\n   * @param notify The IonInfiniteScroll element to complete the loading event.\n   */\n  loadMoreUsers(notify: HTMLIonInfiniteScrollElement | null = null) {\n    this.userService.AdminGetUsersPagination(this.token, 0, this.usersLimit).subscribe(usersResponse=>{\n      if (usersResponse[0]) {\n        usersResponse.filter((it: BasicUser) => it.id != this.actualUser.id).forEach((it: BasicUser) => this.users.push(it));\n        this.token = usersResponse[usersResponse.length-1].id;\n      }\n      notify?.complete();\n    });\n  }\n\n  /**\n   * Opens a modal to edit the selected user.\n   * @param user The user to edit.\n   */\n  editUser(user: BasicUser) {\n    this.presentModal(user);\n  }\n  \n  /**\n   * Deletes a user by id.\n   * @param userId The id of the user to delete.\n   */\n  deleteUser(userId: any) {\n    this.userService.AdminDeleteUser('',userId).subscribe(()=>{\n      this.shared.showToast(\"success\",this.translate.instant(\"CRUDUSER.DELETEACCOUNTSUCCESSFUL\"));\n      this.loadUsers();\n    });\n  }\n\n  /**\n   * Downloads the user list as a CSV file.\n   * Shows toast messages for success or error.\n   */\n  downloadCsv() {\n    this.userService.getUsersCsv().subscribe({\n      next: (response: HttpResponse) => {\n        const contentDisposition = response.headers.get('Content-Disposition');\n        const filename = this.extractFileName(contentDisposition) ?? this.translate.instant(\"ADMIN_PANEL.CSV_BUTTON.FILENAME\");\n        const blob = new Blob([response.body as BlobPart], {\n          type: 'text/csv;charset=utf-8'\n        });\n        saveAs(blob, filename);\n        this.shared.showToast('success',this.translate.instant('ADMIN_PANEL.CSV_BUTTON.SUCCESS'));\n      },\n      error: (err: unknown) => {\n        this.shared.showToast('success',this.translate.instant('ADMIN_PANEL.CSV_BUTTON.ERROR'));\n      }\n    });\n  }\n\n  /**\n   * Extracts the filename from the Content-Disposition header.\n   * @param header The Content-Disposition header value.\n   * @returns The extracted filename or null if not found.\n   */\n  private extractFileName(header: string | null): string | null {\n    if (!header) return null;\n    const match = /filename[^;=\\n]*=((['\"]).*?\\2|[^;\\n]*)/.exec(header);\n    return match ? match[1].replace(/['\"]/g, '') : null;\n  }\n\n  /**\n   * Presents a modal with the AdminFormularyComponent for editing user data.\n   * After the modal is dismissed, updates the user if changes were made.\n   * @param user The user to edit.\n   */\n  async presentModal(user:BasicUser) {\n    const modal = await this.modalController.create({\n      component: AdminFormularyComponent,\n      componentProps: { user: user }\n    });\n    \n    await modal.present();\n    \n    const { data } = await modal.onWillDismiss();\n    \n    if (data) {\n      this.userService.AdminUpdateUser('', user.id, data.username, data.gender, data.isAdmin).subscribe({\n        next:(value)=>{\n          this.shared.showToast('success',this.translate.instant('CRUDUSER.UPDATE.UPDATESUCCESSFULL'));\n            this.loadUsers();\n        },\n        error:(err)=>{\n            this.shared.showToast('danger',this.translate.instant('CRUDUSER.ERRORS.UPDATEFAILED'))\n        },\n      })\n    }\n  }\n\n  /**\n   * Event handler for the Ionic infinite scroll event.\n   * Loads more users when the user scrolls to the bottom.\n   * @param event The infinite scroll event.\n   */\n  onIonInfinite($event: IonInfiniteScrollCustomEvent) {\n    this.loadMoreUsers($event.target);\n  }\n}\n    \n\n    \n        \n  \n    {{ 'MAINMENU.ADMINPANEL' | translate }}\n  \n\n\n\n  \n    {{ 'ADMIN_PANEL.CSV_BUTTON.TEXT' | translate }}\n  \n\n  \n    \n      \n        \n          {{ 'ADMIN_PANEL.TABLE.USERNAME' | translate }}\n          {{ 'ADMIN_PANEL.TABLE.EMAIL' | translate }}\n          {{ 'ADMIN_PANEL.TABLE.GENDER' | translate }}\n          {{ 'ADMIN_PANEL.TABLE.ADMIN' | translate }}\n          {{ 'ADMIN_PANEL.TABLE.ACTIONS' | translate }}\n        \n      \n      \n        \n          {{ user.username }}\n          {{ user.email }}\n          {{ user.gender === 'male' ? ('CRUDUSER.REGISTER.MALE' | translate) : user.gender === 'female' ? ('CRUDUSER.REGISTER.FEMALE' | translate) : ('CRUDUSER.REGISTER.OTHER' | translate) }}\n          {{ user.isAdmin ? ('COMMON.YES' | translate) : ('COMMON.NO' | translate) }}\n          \n            \n              \n            \n            \n              \n            \n          \n        \n      \n    \n  \n\n  \n    \n  \n\n    \n\n    \n                \n                    ./admin-panel.page.scss\n                \n                .button-container {\n    padding: 16px 16px 0px 0px;\n}\n\n.table-container {\n    padding: 16px;\n    overflow-x: auto;\n}\n\n.user-table {\n    width: 100%;\n    border-collapse: collapse;\n    border-spacing: 0 4px;\n    border-radius: 10px;\n    overflow: hidden;\n\n    thead {\n        background-color: var(--ion-header-background);\n        color: white;\n\n        th {\n            padding: 12px;\n            text-align: left;\n            font-weight: 600;\n            text-align: center;\n        }\n    }\n\n    tbody {\n        tr {\n            background-color: var(--ion-modal-background);\n            position: relative;\n            border-bottom: none;\n\n            &::after {\n                content: '';\n                position: absolute;\n                bottom: 0;\n                left: 2%;\n                width: 96%;\n                height: 1px;\n                background-color: #c0c0c0;\n            }\n\n            &:last-child::after {\n                display: none;\n            }\n\n            td {\n                padding: 12px;\n                font-size: 15px;\n                text-align: center;\n            }\n        }\n    }\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ \\'MAINMENU.ADMINPANEL\\' | translate }}        {{ \\'ADMIN_PANEL.CSV_BUTTON.TEXT\\' | translate }}                                {{ \\'ADMIN_PANEL.TABLE.USERNAME\\' | translate }}          {{ \\'ADMIN_PANEL.TABLE.EMAIL\\' | translate }}          {{ \\'ADMIN_PANEL.TABLE.GENDER\\' | translate }}          {{ \\'ADMIN_PANEL.TABLE.ADMIN\\' | translate }}          {{ \\'ADMIN_PANEL.TABLE.ACTIONS\\' | translate }}                                      {{ user.username }}          {{ user.email }}          {{ user.gender === \\'male\\' ? (\\'CRUDUSER.REGISTER.MALE\\' | translate) : user.gender === \\'female\\' ? (\\'CRUDUSER.REGISTER.FEMALE\\' | translate) : (\\'CRUDUSER.REGISTER.OTHER\\' | translate) }}          {{ user.isAdmin ? (\\'COMMON.YES\\' | translate) : (\\'COMMON.NO\\' | translate) }}                                                                                                                            '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'AdminPanelPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminPanelPageModule.html":{"url":"modules/AdminPanelPageModule.html","title":"module - AdminPanelPageModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminPanelPageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AdminPanelPageModule\n\n\n\ncluster_AdminPanelPageModule_imports\n\n\n\ncluster_AdminPanelPageModule_declarations\n\n\n\n\nAdminPanelPage\n\nAdminPanelPage\n\n\n\nAdminPanelPageModule\n\nAdminPanelPageModule\n\nAdminPanelPageModule -->\n\nAdminPanelPage->AdminPanelPageModule\n\n\n\n\n\nAdminPanelPageRoutingModule\n\nAdminPanelPageRoutingModule\n\nAdminPanelPageModule -->\n\nAdminPanelPageRoutingModule->AdminPanelPageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/admin-panel/admin-panel.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminPanelPage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AdminPanelPageRoutingModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { IonicModule } from '@ionic/angular';\n\nimport { AdminPanelPageRoutingModule } from './admin-panel-routing.module';\n\nimport { AdminPanelPage } from './admin-panel.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    AdminPanelPageRoutingModule,\n    TranslateModule.forChild(),\n  ],\n  declarations: [AdminPanelPage]\n})\nexport class AdminPanelPageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AdminPanelPageRoutingModule.html":{"url":"modules/AdminPanelPageRoutingModule.html","title":"module - AdminPanelPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AdminPanelPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/admin-panel/admin-panel-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { AdminPanelPage } from './admin-panel.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: AdminPanelPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class AdminPanelPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/AdvancedCrypto.html":{"url":"interfaces/AdvancedCrypto.html","title":"interface - AdvancedCrypto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  AdvancedCrypto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/Crypto.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BasicCrypto\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            currentPrice\n                                        \n                                \n                                \n                                        \n                                            image\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            pricechangepercent24horus\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        currentPrice\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        currentPrice:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        pricechangepercent24horus\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        pricechangepercent24horus:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Model } from \"./base.model\";\n\nexport interface BasicCrypto extends Model{\n    name:string,\n    symbol:string,\n}\n\nexport interface AdvancedCrypto extends BasicCrypto{\n    image:string,\n    currentPrice:number,\n    pricechangepercent24horus?:number \n}\n\nexport interface CryptoGraphPrice{\n    price:number,\n    date:number\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-root\n            \n\n\n\n            \n                styleUrls\n                app.component.scss\n            \n\n\n\n            \n                templateUrl\n                app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                appPages\n                            \n                            \n                                subscriptions\n                            \n                            \n                                user\n                            \n                            \n                                vermenu\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                navigate\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                openMenu\n                            \n                            \n                                    Private\n                                setMenuTitles\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(auth: IAuthenticationService, userservice: UserBaseService, alertcontroller: AlertController, menuController: MenuController, router: Router, translation: TranslationService, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:21\n                            \n                        \n\n                \n                    \n                            Constructs the root component and injects global services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service to manage user login/logout.\n\n                                                        \n                                                \n                                                \n                                                        userservice\n                                                  \n                                                        \n                                                                        UserBaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service to fetch user data.\n\n                                                        \n                                                \n                                                \n                                                        alertcontroller\n                                                  \n                                                        \n                                                                    AlertController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Controller to display alert modals.\n\n                                                        \n                                                \n                                                \n                                                        menuController\n                                                  \n                                                        \n                                                                    MenuController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Controller to toggle side menus.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation.\n\n                                                        \n                                                \n                                                \n                                                        translation\n                                                  \n                                                        \n                                                                        TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Custom translation service for handling language preference.\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ngx-translate service for localized strings.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        navigate\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigate(argu: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:148\n                        \n                    \n\n\n            \n                \n                        Navigates the user to the selected route or handles logout and language change dialogs.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                argu\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The selected route or action (e.g., '/logout', '/language').\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:212\n                        \n                    \n\n\n            \n                \n                        Unsubscribes from all active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:98\n                        \n                    \n\n\n            \n                \n                        Initializes the component and loads user/session-related information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        openMenu\n                        \n                    \n                \n            \n            \n                \nopenMenu()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:139\n                        \n                    \n\n\n            \n                \n                        Opens the side menu.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        setMenuTitles\n                        \n                    \n                \n            \n            \n                \n                        \n                    setMenuTitles(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.component.ts:55\n                        \n                    \n\n\n            \n                \n                        Sets localized titles for each menu item based on selected language.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Language code (e.g. 'en' or 'es').\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        appPages\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    { title: this.translate.get(\"MAINMENU.HOME\"), url: '/home', icon: 'Home',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.SEARCH\"), url: '/search', icon: 'Search',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.LIST\"), url: '/list', icon: 'star',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.PROFILE\"), url: '/profile', icon: 'person',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.LANGUAGE\"), url: '/language', icon: 'language',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.ABOUTUS\"), url: '/about', icon: 'information',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.ADMINPANEL\"), url: '/admin-panel', icon: 'people',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.LOGOUT\"), url: '/logout', icon: 'log-out',hidden:false }\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:84\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:47\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BasicUser\n\n                    \n                \n                \n                    \n                        Default value : {id:\"\",username:\"\",email:\"\",img:\"\",gender:'',isAdmin:false}\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:48\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        vermenu\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : true\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:134\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { AlertController, MenuController } from '@ionic/angular';\nimport { AUTH_TOKEN, USER_SERVICE_TOKEN } from './core/repositories/repository.tokens';\nimport { IAuthenticationService } from './core/services/interfaces/authentication/authentication.interface';\nimport { Router } from '@angular/router';\nimport { TranslationService } from './core/services/impl/translation.service';\nimport { LangChangeEvent, TranslateService } from '@ngx-translate/core';\nimport { UserBaseService } from './core/services/impl/user/base-user.service';\nimport { BasicUser, User } from './core/models/User.model';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: 'app.component.html',\n  styleUrls: ['app.component.scss'],\n})\n/**\n * Root application component that handles global services like authentication, user profile loading,\n * dynamic menu translation, and language switching.\n */\nexport class AppComponent {\n  /**\n   * Constructs the root component and injects global services.\n   *\n   * @param auth Authentication service to manage user login/logout.\n   * @param userservice User service to fetch user data.\n   * @param alertcontroller Controller to display alert modals.\n   * @param menuController Controller to toggle side menus.\n   * @param router Angular Router for navigation.\n   * @param translation Custom translation service for handling language preference.\n   * @param translate ngx-translate service for localized strings.\n   */\n  constructor(\n    @Inject(AUTH_TOKEN) private auth:IAuthenticationService,\n    @Inject(USER_SERVICE_TOKEN) private userservice:UserBaseService,\n    private alertcontroller:AlertController,\n    private menuController: MenuController,\n    private router:Router,\n    private translation:TranslationService,\n    private translate: TranslateService,\n  ) {\n    this.subscriptions.push(this.translate.onLangChange.subscribe((event:LangChangeEvent)=>{\n      this.setMenuTitles(this.translation.getCurrentLanguage()); \n    }))\n  }\n\n  subscriptions:Subscription[]=[]\n  user:BasicUser={id:\"\",username:\"\",email:\"\",img:\"\",gender:'',isAdmin:false}\n\n  /**\n   * Sets localized titles for each menu item based on selected language.\n   *\n   * @param lang Language code (e.g. 'en' or 'es').\n   */\n  private setMenuTitles(lang:string) {\n    this.subscriptions.push(this.translate.use(lang).subscribe(() => {\n      this.translate.get('MAINMENU.HOME').subscribe((translation) => {\n        this.appPages[0].title = translation;\n      });\n      this.translate.get('MAINMENU.SEARCH').subscribe((translation) => {\n        this.appPages[1].title = translation;\n      });\n      this.translate.get('MAINMENU.LIST').subscribe((translation) => {\n        this.appPages[2].title = translation;\n      });\n      this.translate.get('MAINMENU.PROFILE').subscribe((translation) => {\n        this.appPages[3].title = translation;\n      });\n      this.translate.get('MAINMENU.LANGUAGE').subscribe((translation) => {\n        this.appPages[4].title = translation;\n      });\n      this.translate.get('MAINMENU.ABOUTUS').subscribe((translation) => {\n        this.appPages[5].title = translation;\n      });\n      this.translate.get('MAINMENU.ADMINPANEL').subscribe((translation) => {\n        this.appPages[6].title = translation;\n      });\n      this.translate.get('MAINMENU.LOGOUT').subscribe((translation) => {\n        this.appPages[7].title = translation;\n      });\n    }));\n  }\n\n  public appPages = [\n    { title: this.translate.get(\"MAINMENU.HOME\"), url: '/home', icon: 'Home',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.SEARCH\"), url: '/search', icon: 'Search',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.LIST\"), url: '/list', icon: 'star',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.PROFILE\"), url: '/profile', icon: 'person',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.LANGUAGE\"), url: '/language', icon: 'language',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.ABOUTUS\"), url: '/about', icon: 'information',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.ADMINPANEL\"), url: '/admin-panel', icon: 'people',hidden:false },\n    { title: this.translate.instant(\"MAINMENU.LOGOUT\"), url: '/logout', icon: 'log-out',hidden:false }\n  ];\n\n  /**\n   * Initializes the component and loads user/session-related information.\n   */\n  ngOnInit(){\n    this.subscriptions.push(this.translate.get(\"COMMON.LANGUAGE\").subscribe({\n      next:(value)=>{\n      },\n    }))\n\n    this.subscriptions.push(this.auth.verificateUser().subscribe({\n      next:(value)=>{\n          this.vermenu=value\n      },\n    }))\n\n    this.subscriptions.push(this.userservice.GetBasicUser().subscribe({\n      next:(value)=>{\n      },\n    }))\n\n    this.subscriptions.push(this.userservice.GetBehaviourUser().subscribe({\n      next:(value)=>{\n        this.user=value\n        if(value.isAdmin){\n          const element=this.appPages.find(c=>c.url==\"/admin-panel\")\n          if(element){\n            element.hidden=false\n          }\n        }else if(value.isAdmin==false){\n          const element=this.appPages.find(c=>c.url==\"/admin-panel\")\n          if(element){\n            element.hidden=true\n          }\n        }\n        this.appPages=this.appPages\n      },\n    }))\n  }\n\n  vermenu:boolean=true\n\n  /**\n   * Opens the side menu.\n   */\n  openMenu() {\n    this.menuController.open(); \n  }\n\n  /**\n   * Navigates the user to the selected route or handles logout and language change dialogs.\n   *\n   * @param argu The selected route or action (e.g., '/logout', '/language').\n   */\n  async navigate(argu: string) {\n    if(argu==\"/logout\"){\n      const alert=await this.alertcontroller.create({\n        header:this.translate.instant(\"COMMON.CLOSESESSION\"),\n        buttons:[{\n          text:this.translate.instant(\"COMMON.YES\"),\n          handler:()=>{\n            this.auth.Logout()\n            this.router.navigate([\"/splash\"])\n          },\n        },{\n          text:this.translate.instant(\"COMMON.NO\"),\n          handler:()=>{\n            \n          }\n        }]\n      })\n      alert.dismiss()\n      await alert.present()\n    }else if(argu==\"/language\"){\n      const alert = await this.alertcontroller.create({\n        header: this.translate.instant('MAINMENU.SELECTLANGUAGE'), \n        inputs: [\n          {\n            name: 'language',\n            type: 'radio',\n            label: this.translate.instant('COMMON.ENGLISH'),\n            value: 'en', \n            checked: this.translation.getCurrentLanguage() === 'en', \n          },\n          {\n            name: 'language',\n            type: 'radio',\n            label: this.translate.instant('COMMON.SPANISH'),\n            value: 'es', \n            checked: this.translation.getCurrentLanguage() === 'es',\n          },\n        ],\n        buttons: [\n          {\n            text: this.translate.instant('COMMON.CANCEL'), \n            role: 'cancel',\n          },\n          {\n            text: this.translate.instant('COMMON.SAVE'),\n            handler: (data) => {\n              if (data) {\n                this.translation.setLanguage(data)\n                this.translate.use(data)\n                this.setMenuTitles(data)\n              }\n            },\n          },\n        ],\n      });\n      await alert.present();\n    }else{\n      this.router.navigate([argu])\n    }\n  }\n\n  /**\n   * Unsubscribes from all active subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(){\n    this.subscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n}\n    \n\n    \n        \n\n\n  \n    \n  -->\n  \n    \n      \n         \n      \n      CryptoWizzard \n    \n  \n\n  \n    \n      \n      \n        \n          \n            \n          \n          App Title\n        \n      \n\n      \n        \n        \n          \n            \n          \n          \n          \n            {{user.username}}\n            {{user.email}}\n          \n        \n\n        \n        \n\n        \n        \n          \n            \n              \n              {{ p.title | translate }}\n            \n          \n        \n      \n      \n\n    \n\n    \n    \n  \n  \n\n\n    \n\n    \n                \n                    app.component.scss\n                \n                ion-menu ion-content {\n    --background: var(--ion-item-background, var(--ion-background-color, #fff));\n  }\n  \n  ion-menu.md ion-content {\n    --padding-start: 8px;\n    --padding-end: 8px;\n    --padding-top: 20px;\n    --padding-bottom: 20px;\n  }\n\n  \n  \n  ion-menu.md ion-list {\n    padding: 20px 0;\n  }\n  \n  ion-menu.md ion-note {\n    margin-bottom: 30px;\n  }\n  \n  ion-menu.md ion-list-header,\n  ion-menu.md ion-note {\n    padding-left: 10px;\n  }\n  \n  ion-menu.md ion-list#inbox-list {\n    border-bottom: 1px solid var(--ion-background-color-step-150, #d7d8da);\n  }\n  \n  ion-menu.md ion-list#inbox-list ion-list-header {\n    font-size: 22px;\n    font-weight: 600;\n  \n    min-height: 20px;\n  }\n  \n  ion-menu.md ion-list#labels-list ion-list-header {\n    font-size: 16px;\n  \n    margin-bottom: 18px;\n  \n    color: #757575;\n  \n    min-height: 26px;\n  }\n  \n  ion-menu.md ion-item {\n    --padding-start: 10px;\n    --padding-end: 10px;\n    border-radius: 4px;\n\n  }\n \n  \n  ion-menu.md ion-item.selected {\n    --background: rgba(var(--ion-color-primary-rgb), 0.14);\n  }\n  \n  ion-menu.md ion-item.selected ion-icon {\n    color: var(--ion-color-primary);\n  }\n  \n  ion-menu.md ion-item ion-icon {\n    color: #616e7e;\n  }\n  \n  ion-menu.md ion-item ion-label {\n    font-weight: 500;\n  }\n  \n  ion-menu.ios ion-content {\n    --padding-bottom: 20px;\n  }\n  \n  ion-menu.ios ion-list {\n    padding: 20px 0 0 0;\n  }\n  \n  ion-menu.ios ion-note {\n    line-height: 24px;\n    margin-bottom: 20px;\n  }\n  \n  ion-menu.ios ion-item {\n    --padding-start: 16px;\n    --padding-end: 16px;\n    --min-height: 50px;\n  }\n  \n  ion-menu.ios ion-item.selected ion-icon {\n    color: var(--ion-color-primary);\n  }\n  \n  ion-menu.ios ion-item ion-icon {\n    font-size: 24px;\n    color: #73849a;\n  }\n  \n  ion-menu.ios ion-list#labels-list ion-list-header {\n    margin-bottom: 8px;\n  }\n  \n  ion-menu.ios ion-list-header,\n  ion-menu.ios ion-note {\n    padding-left: 16px;\n    padding-right: 16px;\n  }\n  \n  ion-menu.ios ion-note {\n    margin-bottom: 8px;\n  }\n  \n  ion-note {\n    display: inline-block;\n    font-size: 16px;\n  \n    color: var(--ion-color-medium-shade);\n  }\n  \n  ion-item.selected {\n    --color: var(--ion-color-primary);\n  }\n\n/* Mostrar ion-menu siempre en pantallas grandes */\n@media (min-width: 992px) {\n  ion-header {\n    display: none; /* Ocultar el encabezado porque el menú es visible */\n  }\n  ion-menu {\n    display: block; /* Mostrar siempre el menú */\n  }\n}\n\n/* Mostrar ion-header con el botón de menú en pantallas pequeñas e intermedias */\n@media (max-width: 991px) {\n  ion-header {\n    display: block; /* Asegurarse de que el encabezado esté disponible */\n  }\n  \n}\n\n\n.header-toolbar {\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n  padding-left: 16px;\n  padding-right: 16px;\n}\n\n.app-title {\n  font-size: 1.4em;\n  font-weight: bold;\n}\n\n/* Estilos del botón de menú */\n.menu-btn {\n  font-size: 24px;\n  color: #fff;\n}\n\n/* Estilos de la imagen de usuario */\nion-avatar.user-img {\n  \n  display: block;\n  margin: auto!important;\n  width: 200px; /* Tamaño ligeramente mayor para un avatar más prominente */\n  height: 200px; /* Mantiene la proporción cuadrada */\n  border-radius: 50%; /* Hace que la imagen sea redonda */\n  margin: 16px 0; /* Espaciado superior e inferior */\n  overflow: hidden; /* Asegura que la imagen no sobresalga del círculo */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Sombra suave para darle profundidad */\n  transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out; /* Transiciones suaves al pasar el mouse */\n}\n\n/* Efecto al pasar el mouse sobre el avatar */\nion-avatar.user-img:hover {\n  transform: scale(1.1); /* Aumenta ligeramente el tamaño al pasar el mouse */\n  box-shadow: 0 8px 16px rgba(0, 0, 0, 0.3); /* Aumenta la sombra para hacerla más prominente */\n}\n\n/* Asegura que la imagen se ajuste bien dentro del avatar */\nion-avatar.user-img img {\n  object-fit: cover; /* Hace que la imagen se ajuste correctamente al contenedor circular */\n  width: 100%;\n  height: 100%;\n}\n\n/* Estilos de la información del usuario */\n.user-info {\n  padding: 0 16px;\n}\n\n.user-name {\n  font-weight: bold;\n  font-size: 1.1em;\n}\n\n.user-email {\n  font-size: 0.9em;\n  color: #777;\n}\n\n/* Estilos para los ítems del menú */\n.menu-item {\n  padding: 12px 16px;\n}\n\n\n\n/* Estilo de la lista de menú */\nion-list {\n  padding-top: 16px;\n}\n\n\n\n/* Estilo para el nombre y el correo del usuario */\n.user-info {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  margin-top: 8px;\n}\n\n\n/* Barra separadora entre el perfil y el menú */\n.divider {\n  height: 1px;\n  background-color: #ccc;\n  margin: 16px 0;\n}\n\n\n/* Estilo de la lista de menú */\nion-list {\n  padding-top: 16px;\n}\nion-toolbar {\n  display: flex;\n  justify-content: center; /* Centrar horizontalmente */\n  align-items: center; /* Centrar verticalmente */\n  position: relative;\n}\n\nion-title {\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%); /* Asegura el centrado absoluto */\n  text-align: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '        -->                                 CryptoWizzard                                                                           App Title                                                                                                    {{user.username}}            {{user.email}}                                                                                                    {{ p.title | translate }}                                                          '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AppRoutingModule\n                        \n                    \n                \n                \n                    Bootstrap\n                    \n                        \n                            AppComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { RouteReuseStrategy } from '@angular/router';\n\nimport { IonicModule, IonicRouteStrategy } from '@ionic/angular';\n\nimport { AppComponent } from './app.component';\nimport { AppRoutingModule } from './app-routing.module';\nimport { TranslateLoader, TranslateModule } from '@ngx-translate/core';\nimport { HttpClient, provideHttpClient } from '@angular/common/http';\nimport { TranslateHttpLoader } from '@ngx-translate/http-loader';\nimport { AUTENTICATION_URL_TOKEN, AUTH_MAPPING_TOKEN, AUTH_TOKEN, BACKEND_TOKEN, CRYPTOTOKEN_TOKEN, CRYPTO_API_URL_TOKEN, CRYPTO_MAPPING_TOKEN, CRYPTO_SERVICE_TOKEN, FIREBASE_CONFIG_TOKEN, FIREBASE_MAIN_SERVICE, LOGIN_API_URL_TOKEN, REGISTER_API_URL_TOKEN, UPLOAD_API_URL_TOKEN, USER_API_URL_TOKEN, USER_CSV_URL_TOKEN, USER_MAPPING_TOKEN, USER_SERVICE_TOKEN } from './core/repositories/repository.tokens';\nimport { StrapiAutenticationService } from './core/services/impl/authentication/strapi-autentication.service';\nimport { AuthenticationMappingServiceFactory, AuthenticationServiceFactory, cryptofactoryservice, MediaServiceFactory, userfactoryservice, UserMappingFactory, UserServiceFactory } from './core/repositories/factory';\nimport { StrapiAuthMappingService } from './core/services/impl/authentication/strapi-auth-mapping.service';\nimport { provideLottieOptions } from 'ngx-lottie';\nimport { CryptoGeko } from './core/services/impl/crypto/CryptoGeko.service';\nimport { CoinGekoMapping } from './core/repositories/impl/crypto/CoinGekoMapping.service';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { environment } from 'src/environments/environment';\nimport { FirebaseMainService } from './core/services/impl/firebasemain.service';\nimport { AngularFireFunctionsModule } from '@angular/fire/compat/functions';\n\nexport function createTranslateLoader(http: HttpClient) {\n  return new TranslateHttpLoader(http, './assets/i18n/', '.json');\n}\n\n@NgModule({\n  declarations: [AppComponent],\n  imports: [BrowserModule,AngularFireFunctionsModule  , IonicModule.forRoot(), AppRoutingModule,BrowserAnimationsModule,\n    TranslateModule.forRoot({\n    loader: {\n      provide: TranslateLoader,\n      useFactory: createTranslateLoader,\n      deps: [HttpClient],\n    }\n  }),\n  BrowserModule,\n  BrowserAnimationsModule,\n  \n],\n  providers: [{ provide: RouteReuseStrategy, useClass: IonicRouteStrategy },\n    provideHttpClient(),\n    provideLottieOptions({\n      player: () => import('lottie-web'),\n    }),\n    {provide: USER_API_URL_TOKEN, useValue:environment.userapiurl},\n    {provide:LOGIN_API_URL_TOKEN, useValue:environment.userapilogin},\n    {provide:REGISTER_API_URL_TOKEN,useValue:environment.registerapiurl},\n    {provide:AUTENTICATION_URL_TOKEN,useValue:environment.authenticationurl},\n    {provide:CRYPTO_API_URL_TOKEN,useValue:environment.cryptoapiurl},\n    {provide:UPLOAD_API_URL_TOKEN,useValue:environment.uploadapi},\n    {provide:CRYPTOTOKEN_TOKEN,useValue:environment.cryptoken},\n    {provide:USER_CSV_URL_TOKEN,useValue:environment.userCsv},\n    {provide:CRYPTO_SERVICE_TOKEN,useClass:CryptoGeko},\n    {provide:CRYPTO_MAPPING_TOKEN,useClass:CoinGekoMapping},\n    {provide:FIREBASE_MAIN_SERVICE,useClass:FirebaseMainService},\n    {provide:FIREBASE_CONFIG_TOKEN, useValue:{\n      apiKey: \"AIzaSyA9vAyI9vLZwGm5uKy4gDwf3D5VAqoONgY\",\n      authDomain: \"cryptowizzard-ef8fd.firebaseapp.com\",\n      projectId: \"cryptowizzard-ef8fd\",\n      storageBucket: \"cryptowizzard-ef8fd.firebasestorage.app\",\n      messagingSenderId: \"643452286872\",\n      appId: \"1:643452286872:web:5bc55e732f97813fa4dded\",\n      measurementId: \"G-623G40JNKJ\"\n    }},\n    {provide:BACKEND_TOKEN,useValue:'firebase'},\n    AuthenticationMappingServiceFactory,\n    AuthenticationServiceFactory,\n    UserMappingFactory,\n    cryptofactoryservice,\n    userfactoryservice,\n    MediaServiceFactory,\n    UserServiceFactory,\n\n    \n  ],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppRoutingModule.html":{"url":"modules/AppRoutingModule.html","title":"module - AppRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    AppRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { PreloadAllModules, RouterModule, Routes } from '@angular/router';\nimport { SplashPage } from './shared/splash/splash.page';\nimport { AuthGuard } from './core/guards/auth.guard';\nimport { AuthGuard2 } from './core/guards/auth2.guard';\nimport { AuthGuardAdmin } from './core/guards/authAdmin.guard';\n\nconst routes: Routes = [\n  {\n    path: 'home',\n    canActivate:[AuthGuard],\n    loadChildren: () => \"import('./pages/General/home/home.module').then( m => m.HomePageModule)\"\n  },\n  {\n    path: '',\n    redirectTo: 'splash',\n    pathMatch: 'full'\n  },\n  {\n    path: 'login',\n    canActivate:[AuthGuard2],\n    loadChildren: () => \"import('./pages/Start/login/login.module').then( m => m.LoginPageModule)\"\n  },\n  {\n    canActivate:[AuthGuard2],\n    path: 'register',\n    loadChildren: () => \"import('./pages/Start/register/register.module').then( m => m.RegisterPageModule)\"\n  },\n  {\n    path: 'splash',\n    component: SplashPage\n  },\n  {\n    path: 'search/:id',\n    canActivate:[AuthGuard],\n    loadChildren: () => \"import('./pages/General/search/search.module').then( m => m.SearchPageModule)\"\n  },\n  {\n    path: 'search',\n    canActivate:[AuthGuard],\n    loadChildren: () => \"import('./pages/General/search/search.module').then( m => m.SearchPageModule)\"\n  },\n  {\n    path: 'profile',\n    canActivate:[AuthGuard],\n    loadChildren: () => \"import('./pages/General/profile/profile.module').then( m => m.ProfilePageModule)\"\n  },\n  {\n    path: 'list',\n    canActivate:[AuthGuard],\n    loadChildren: () => \"import('./pages/General/list/list.module').then( m => m.ListPageModule)\"\n  },\n  {\n    path: 'cryptoview/:id/:currency',\n    canActivate:[AuthGuard],\n    loadChildren: () => \"import('./pages/General/cryptoview/cryptoview.module').then( m => m.CryptoviewPageModule)\"\n  },\n  {\n    path: 'listcontent/:id',\n    canActivate:[AuthGuard],\n    loadChildren: () => \"import('./pages/General/listcontent/listcontent.module').then( m => m.ListcontentPageModule)\"\n  },\n  {\n    path: 'about',\n    canActivate:[AuthGuard],\n    loadChildren: () => \"import('./pages/General/about/about.module').then( m => m.AboutPageModule)\"\n  },\n  {\n    path: 'admin-panel',\n    canActivate:[AuthGuardAdmin],\n    loadChildren: () => \"import('./pages/General/admin-panel/admin-panel.module').then( m => m.AdminPanelPageModule)\"\n  },\n\n\n\n\n\n\n  \n];\n\n@NgModule({\n  imports: [\n    RouterModule.forRoot(routes, { preloadingStrategy: PreloadAllModules })\n  ],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Attributes.html":{"url":"interfaces/Attributes.html","title":"interface - Attributes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Attributes\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            publishedAt\n                                        \n                                \n                                \n                                        \n                                            Title\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publishedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Attributes2.html":{"url":"interfaces/Attributes2.html","title":"interface - Attributes2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Attributes2\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            cryptoId\n                                        \n                                \n                                \n                                        \n                                            Name\n                                        \n                                \n                                \n                                        \n                                            publishedAt\n                                        \n                                \n                                \n                                        \n                                            symbol\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptoId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cryptoId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publishedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        symbol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard.html":{"url":"guards/AuthGuard.html","title":"guard - AuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/core/guards/auth.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard that prevents unauthorized access to routes that require authentication.\nIf the user is not authenticated, it redirects them to the splash screen and prevents access.\nIf the user is authenticated, access to the requested route is granted.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, auth: IAuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/guards/auth.guard.ts:16\n                            \n                        \n\n                \n                    \n                            Creates an instance of the authentication guard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router used for navigation redirection.\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service that provides user session validation.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/auth.guard.ts:38\n                        \n                    \n\n\n            \n                \n                        Determines whether a route can be activated based on the user's authentication status.\nIf the user is authenticated (GetUser() returns a valid user), access is allowed.\nIf authentication fails or an error occurs, the user is logged out and redirected to the /splash page.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                route\n                                            \n                                                        ActivatedRouteSnapshot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The activated route snapshot.\n\n                                            \n                                        \n                                        \n                                                state\n                                            \n                                                        RouterStateSnapshot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The router state snapshot.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | Promise | boolean | UrlTree\n\n                        \n                            \n                                A boolean, UrlTree, or an Observable/Promise of either, indicating whether navigation is allowed.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Inject, Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';\nimport { catchError, map, Observable, of } from 'rxjs';\nimport { IAuthenticationService } from '../services/interfaces/authentication/authentication.interface';\nimport { AUTH_TOKEN } from '../repositories/repository.tokens';\n\n/**\n * Guard that prevents unauthorized access to routes that require authentication.\n * \n * If the user is not authenticated, it redirects them to the splash screen and prevents access.\n * If the user is authenticated, access to the requested route is granted.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard implements CanActivate {\n  /**\n   * Creates an instance of the authentication guard.\n   * \n   * @param router Router used for navigation redirection.\n   * @param auth Authentication service that provides user session validation.\n   */\n  constructor(\n    private router:Router,\n    @Inject(AUTH_TOKEN) private auth:IAuthenticationService\n  ){}\n\n  /**\n   * Determines whether a route can be activated based on the user's authentication status.\n   * \n   * If the user is authenticated (`GetUser()` returns a valid user), access is allowed.\n   * If authentication fails or an error occurs, the user is logged out and redirected to the `/splash` page.\n   * \n   * @param route The activated route snapshot.\n   * @param state The router state snapshot.\n   * @returns A boolean, UrlTree, or an Observable/Promise of either, indicating whether navigation is allowed.\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable | Promise | boolean | UrlTree {\n    return this.auth.GetUser().pipe(\n      map((user) => {\n        if (user) {\n        }\n        return true;\n      }),\n      catchError((err) => {\n        this.auth.Logout();\n        this.router.navigate(['/splash'])\n        return of(false); \n      })\n    );\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuard2.html":{"url":"guards/AuthGuard2.html","title":"guard - AuthGuard2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuard2\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/core/guards/auth2.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard that prevents authenticated users from accessing public routes such as login or registration.\nIf a user is already authenticated, they are redirected to the /home route.\nIf not authenticated, access to the requested public route is allowed.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, auth: IAuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/guards/auth2.guard.ts:16\n                            \n                        \n\n                \n                    \n                            Creates an instance of the guard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router instance used for navigation and redirection.\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service used to validate the current user session.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/auth2.guard.ts:39\n                        \n                    \n\n\n            \n                \n                        Determines whether a route can be activated.\nPrevents access to public routes (e.g., login or register) if the user is already authenticated.\nExample :     or a `UrlTree` redirecting to `/home` if the user is authenticated.\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                route\n                                            \n                                                        ActivatedRouteSnapshot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The current route snapshot.\n\n                                            \n                                        \n                                        \n                                                state\n                                            \n                                                        RouterStateSnapshot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The current router state snapshot.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | Promise | boolean | UrlTree\n\n                        \n                            \n                                true if the user is unauthenticated (allowing access),\nor a UrlTree redirecting to /home if the user is authenticated.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Inject, Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\nimport { AUTH_TOKEN } from \"../repositories/repository.tokens\";\nimport { IAuthenticationService } from \"../services/interfaces/authentication/authentication.interface\";\nimport { catchError, map, Observable, of } from \"rxjs\";\n\n/**\n * Guard that prevents authenticated users from accessing public routes such as login or registration.\n * \n * If a user is already authenticated, they are redirected to the `/home` route.\n * If not authenticated, access to the requested public route is allowed.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuard2 implements CanActivate {\n\n  /**\n   * Creates an instance of the guard.\n   * \n   * @param router Router instance used for navigation and redirection.\n   * @param auth Authentication service used to validate the current user session.\n   */\n  constructor(\n    private router: Router,\n    @Inject(AUTH_TOKEN) private auth: IAuthenticationService\n  ) {}\n\n  /**\n   * Determines whether a route can be activated.\n   * \n   * Prevents access to public routes (e.g., login or register) if the user is already authenticated.\n   * \n   * @param route The current route snapshot.\n   * @param state The current router state snapshot.\n   * @returns `true` if the user is unauthenticated (allowing access),\n   *          or a `UrlTree` redirecting to `/home` if the user is authenticated.\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable | Promise | boolean | UrlTree {\n    return this.auth.GetUser().pipe(\n      map((user) => {\n        if (user) {\n          return this.router.createUrlTree(['/home']);\n        }\n        return true;\n      }),\n      catchError((err) => {\n        this.auth.Logout();\n        return of(true);\n      })\n    );\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/AuthGuardAdmin.html":{"url":"guards/AuthGuardAdmin.html","title":"guard - AuthGuardAdmin","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    AuthGuardAdmin\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/app/core/guards/authAdmin.guard.ts\n            \n\n\n                \n                Description\n                \n                \n                    Guard that restricts access to routes intended only for admin users.\nIt fetches the current user's profile using userService and checks the isAdmin flag.\nIf the user is not an admin, they are redirected to the /splash page.\n\n                \n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, auth: IAuthenticationService, userService: IUserbaseService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/guards/authAdmin.guard.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of the admin guard.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular router used for navigation redirection.\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service used to manage the user's session.\n\n                                                        \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                    IUserbaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service that provides access to user profile data, including admin status.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/guards/authAdmin.guard.ts:42\n                        \n                    \n\n\n            \n                \n                        Determines whether the route can be activated based on the user's admin privileges.\nIf the user has isAdmin === true, access is granted.\nOtherwise, the user is redirected to the /splash route.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                route\n                                            \n                                                        ActivatedRouteSnapshot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The current activated route.\n\n                                            \n                                        \n                                        \n                                                state\n                                            \n                                                        RouterStateSnapshot\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The router state snapshot.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | Promise | boolean | UrlTree\n\n                        \n                            \n                                A boolean, UrlTree, or Observable/Promise thereof indicating access permission.\n\n                            \n                \n            \n        \n    \n\n        \n\n\n        \n            import { Inject, Injectable } from \"@angular/core\";\nimport { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from \"@angular/router\";\nimport { AUTH_TOKEN, USER_SERVICE_TOKEN } from \"../repositories/repository.tokens\";\nimport { IAuthenticationService } from \"../services/interfaces/authentication/authentication.interface\";\nimport { catchError, map, Observable, of } from \"rxjs\";\nimport { User } from \"firebase/auth\";\nimport { IUserbaseService } from \"../services/interfaces/user/User-base-service.interface\";\n\n/**\n * Guard that restricts access to routes intended only for admin users.\n * \n * It fetches the current user's profile using `userService` and checks the `isAdmin` flag.\n * If the user is not an admin, they are redirected to the `/splash` page.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthGuardAdmin implements CanActivate {\n  /**\n   * Creates an instance of the admin guard.\n   * \n   * @param router Angular router used for navigation redirection.\n   * @param auth Authentication service used to manage the user's session.\n   * @param userService Service that provides access to user profile data, including admin status.\n   */\n  constructor(\n    private router: Router,\n    @Inject(AUTH_TOKEN) private auth: IAuthenticationService,\n    @Inject(USER_SERVICE_TOKEN) private userService: IUserbaseService,\n  ) {}\n\n  /**\n   * Determines whether the route can be activated based on the user's admin privileges.\n   * \n   * If the user has `isAdmin === true`, access is granted.\n   * Otherwise, the user is redirected to the `/splash` route.\n   * \n   * @param route The current activated route.\n   * @param state The router state snapshot.\n   * @returns A boolean, UrlTree, or Observable/Promise thereof indicating access permission.\n   */\n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): Observable | Promise | boolean | UrlTree {\n    return this.userService.GetBasicUser().pipe(\n      map((user) => {\n        if (user.isAdmin === true) {\n          return true;\n        } else {\n          this.router.navigate(['/splash']);\n          return false;\n        }\n      }),\n      catchError((err) => {\n        this.auth.Logout();\n        return of(true); // Optionally: could redirect or return false\n      })\n    );\n  }\n}\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/BackgraphbuttonDirective.html":{"url":"directives/BackgraphbuttonDirective.html","title":"directive - BackgraphbuttonDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  BackgraphbuttonDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/directives/backgraphbutton.directive.ts\n        \n\n\n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appBackgraphbutton]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                xd\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementref: ElementRef, render: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/directives/backgraphbutton.directive.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        elementref\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        render\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        xd\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/directives/backgraphbutton.directive.ts:11\n                            \n                        \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/directives/backgraphbutton.directive.ts:19\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/directives/backgraphbutton.directive.ts:15\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, Input, OnChanges, Renderer2, SimpleChanges } from '@angular/core';\n\n@Directive({\n  selector: '[appBackgraphbutton]',\n  standalone: true\n})\n\nexport class BackgraphbuttonDirective implements OnChanges {\n\n  @Input() \n  xd!: string;\n\n  constructor(private elementref:ElementRef, private render:Renderer2) { }\n\n  ngOnInit(){\n\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n\n    //const negativeColor = 'var(--ion-color-negativenew)';\n    //const positiveColor = 'var(--ion-color-positivenew)';\n    \n    \n  }\n\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseAutenticationService.html":{"url":"injectables/BaseAutenticationService.html","title":"injectable - BaseAutenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseAutenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/base-autentication.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authenticated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteToken\n                            \n                            \n                                    Abstract\n                                Deleteuser\n                            \n                            \n                                getCurrency\n                            \n                            \n                                getId\n                            \n                            \n                                getToken\n                            \n                            \n                                    Abstract\n                                GetUser\n                            \n                            \n                                    Abstract\n                                Login\n                            \n                            \n                                Logout\n                            \n                            \n                                    Abstract\n                                Register\n                            \n                            \n                                removeId\n                            \n                            \n                                setCurrency\n                            \n                            \n                                setId\n                            \n                            \n                                setmenu\n                            \n                            \n                                setToken\n                            \n                            \n                                verificateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:19\n                            \n                        \n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteToken\n                        \n                    \n                \n            \n            \n                \ndeleteToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:78\n                        \n                    \n\n\n            \n                \n                        Removes the authentication token from localStorage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        Deleteuser\n                        \n                    \n                \n            \n            \n                \n                        \n                    Deleteuser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:55\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID, requires authorization token.\nMust be implemented by subclasses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAuthorization token.\n\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrency\n                        \n                    \n                \n            \n            \n                \ngetCurrency()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:127\n                        \n                    \n\n\n            \n                \n                        Retrieves the preferred currency from localStorage.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The saved currency or defaults to \"usd\" if not set.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getId\n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:101\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user ID from localStorage.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The stored user ID or empty string if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getToken\n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:143\n                        \n                    \n\n\n            \n                \n                        Retrieves the stored authentication token.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The token string or empty string if none stored.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        GetUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:46\n                        \n                    \n\n\n            \n                \n                        Retrieves the currently authenticated user.\nMust be implemented by subclasses.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the current User.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(authenticationlogin: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:39\n                        \n                    \n\n\n            \n                \n                        Logs in a user.\nMust be implemented by subclasses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authenticationlogin\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe login payload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the logged-in User.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Logout\n                        \n                    \n                \n            \n            \n                \nLogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:61\n                        \n                    \n\n\n            \n                \n                        Logs out the current user.\nClears authentication status, token and user ID from storage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        Register\n                        \n                    \n                \n            \n            \n                \n                        \n                    Register(authenticationregister: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Registers a new user.\nMust be implemented by subclasses.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authenticationregister\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe registration payload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the registered User.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeId\n                        \n                    \n                \n            \n            \n                \nremoveId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Removes the user ID from localStorage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCurrency\n                        \n                    \n                \n            \n            \n                \nsetCurrency(currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:118\n                        \n                    \n\n\n            \n                \n                        Saves the preferred currency in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrency code (e.g. \"usd\").\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The saved currency.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setId\n                        \n                    \n                \n            \n            \n                \nsetId(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:86\n                        \n                    \n\n\n            \n                \n                        Saves the current user's ID in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser identifier.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setmenu\n                        \n                    \n                \n            \n            \n                \nsetmenu(val: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Updates the authentication state observable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTrue if authenticated, false otherwise.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setToken\n                        \n                    \n                \n            \n            \n                \nsetToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Saves the authentication token in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT or similar token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verificateUser\n                        \n                    \n                \n            \n            \n                \nverificateUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:135\n                        \n                    \n\n\n            \n                \n                        Returns an observable to monitor authentication state changes.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting true/false authentication status.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/impl/authentication/base-autentication.service.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { IAuthenticationService } from '../../interfaces/authentication/authentication.interface';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { User } from 'src/app/core/models/User.model';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Abstract base class implementing common authentication logic.\n * \n * This class implements IAuthenticationService interface and provides\n * utility methods for token, user ID, currency management using localStorage,\n * as well as managing the authentication state via a BehaviorSubject.\n * \n * Concrete subclasses must implement the abstract methods for Register, Login,\n * GetUser, and Deleteuser to provide backend-specific behavior.\n */\nexport abstract class BaseAutenticationService implements IAuthenticationService {\n  constructor() { }\n  \n  /* Observable to track the current authentication status (true = authenticated) */\n  public authenticated:BehaviorSubject =new BehaviorSubject(false)\n\n  /**\n   * Registers a new user.\n   * Must be implemented by subclasses.\n   * @param authenticationregister - The registration payload.\n   * @returns Observable emitting the registered User.\n   */\n  abstract Register(authenticationregister: any): Observable\n\n  /**\n   * Logs in a user.\n   * Must be implemented by subclasses.\n   * @param authenticationlogin - The login payload.\n   * @returns Observable emitting the logged-in User.\n   */\n  abstract Login(authenticationlogin: any): Observable\n\n  /**\n   * Retrieves the currently authenticated user.\n   * Must be implemented by subclasses.\n   * @returns Observable emitting the current User.\n   */\n  abstract GetUser(): Observable \n\n  /**\n   * Deletes a user by ID, requires authorization token.\n   * Must be implemented by subclasses.\n   * @param token - Authorization token.\n   * @param iduser - ID of the user to delete.\n   * @returns Observable emitting the deletion result.\n   */\n  abstract Deleteuser(token: string,iduser:string): Observable \n  \n  /**\n   * Logs out the current user.\n   * Clears authentication status, token and user ID from storage.\n   */\n  Logout():void {\n    this.setmenu(false)\n    this.deleteToken()\n    this.removeId()\n  } \n\n  /**\n   * Saves the authentication token in localStorage.\n   * @param token - JWT or similar token.\n   */\n  setToken(token:string): void {\n    localStorage.setItem(\"token\",token);\n  }\n\n  /**\n   * Removes the authentication token from localStorage.\n   */\n  deleteToken(): void {\n    localStorage.removeItem(\"token\")\n  }\n\n  /**\n   * Saves the current user's ID in localStorage.\n   * @param id - User identifier.\n   */\n  setId(id:string): void {\n    localStorage.setItem(\"uid\",id);\n  }\n\n  /**\n   * Removes the user ID from localStorage.\n   */\n  removeId(): void {\n    localStorage.removeItem(\"uid\");\n  }\n\n  /**\n   * Retrieves the current user ID from localStorage.\n   * @returns The stored user ID or empty string if not found.\n   */\n  getId():string{\n    return localStorage.getItem(\"uid\")??\"\";\n  }\n\n  /**\n   * Updates the authentication state observable.\n   * @param val - True if authenticated, false otherwise.\n   */\n  setmenu(val:boolean){\n    this.authenticated.next(val)\n  }\n\n  /**\n   * Saves the preferred currency in localStorage.\n   * @param currency - Currency code (e.g. \"usd\").\n   * @returns The saved currency.\n   */\n  setCurrency(currency: string): string {\n    localStorage.setItem(\"currency\",currency)\n    return currency\n  }\n\n  /**\n   * Retrieves the preferred currency from localStorage.\n   * @returns The saved currency or defaults to \"usd\" if not set.\n   */\n  getCurrency(): string {\n    return localStorage.getItem(\"currency\")??\"usd\"\n  }\n\n  /**\n   * Returns an observable to monitor authentication state changes.\n   * @returns Observable emitting true/false authentication status.\n   */\n  verificateUser(): Observable {\n    return this.authenticated\n  }\n\n  /**\n   * Retrieves the stored authentication token.\n   * @returns The token string or empty string if none stored.\n   */\n  getToken(): string {\n    return localStorage.getItem(\"token\")??\"\";\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseMediaService.html":{"url":"injectables/BaseMediaService.html","title":"injectable - BaseMediaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseMediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/media/base-media.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract base service for media operations.\nProvides a contract for uploading media as a Blob.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    Abstract\n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            Abstract\n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(blob: Blob)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/media/base-media.service.ts:17\n                        \n                    \n\n\n            \n                \n                        Uploads a media file represented as a Blob.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                blob\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe media data to upload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits the upload result.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { Observable } from \"rxjs\";\n\n/**\n * Abstract base service for media operations.\n * Provides a contract for uploading media as a Blob.\n */\n@Injectable({\n    providedIn: 'root'\n  })\nexport abstract class BaseMediaService {\n  /**\n   * Uploads a media file represented as a Blob.\n   * @param blob - The media data to upload.\n   * @returns An Observable that emits the upload result.\n   */\n  public abstract upload(blob:Blob):Observable;\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasiCryptoFromApi.html":{"url":"interfaces/BasiCryptoFromApi.html","title":"interface - BasiCryptoFromApi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasiCryptoFromApi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing a basic crypto object with minimal information\nas returned from the CoinGecko API.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            symbol\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        symbol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AdvancedCrypto, BasicCrypto, CryptoGraphPrice } from \"../../../models/Crypto.model\";\nimport { ICryptoBaseMapping } from \"../../interfaces/crypto/CryptoBaseMapping.interface\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Interface representing the detailed cryptocurrency data structure\n * as received from the CoinGecko API.\n */\nexport interface CryptoFromApi {\n    id: string\n    symbol: string\n    name: string\n    image: string\n    current_price: number\n    market_cap: number\n    market_cap_rank: number\n    fully_diluted_valuation: number\n    total_volume: number\n    high_24h: number\n    low_24h: number\n    price_change_24h: number\n    price_change_percentage_24h: number\n    market_cap_change_24h: number\n    market_cap_change_percentage_24h: number\n    circulating_supply: number\n    total_supply: number\n    max_supply: number\n    ath: number\n    ath_change_percentage: number\n    ath_date: string\n    atl: number\n    atl_change_percentage: number\n    atl_date: string\n    roi: any\n    last_updated: string\n}\n\n/**\n * Interface representing a basic crypto object with minimal information\n * as returned from the CoinGecko API.\n */\nexport interface BasiCryptoFromApi{\n    id:string,\n    name:string,\n    symbol:string\n}\n\n/**\n * Interface representing historical price and volume data\n * as provided by the CoinGecko API.\n */\nexport interface PricesCryptoFromApi {\n    prices: number[][]\n    market_caps: number[][]\n    total_volumes: number[][]\n}\n\n/**\n * Mapping class that transforms raw API data from CoinGecko\n * into application-specific models.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoinGekoMapping implements ICryptoBaseMapping {\n    /**\n     * Maps paginated API data into an array of AdvancedCrypto models.\n     * \n     * @param data Raw API response containing crypto market data.\n     * @returns Array of AdvancedCrypto objects with selected fields.\n     */\n    getAllPaginated(data: any): AdvancedCrypto[] {\n        let list=data.map((c: any) => ({\n            id: c.id,\n            name:c.name,\n            image: c.image,\n            symbol:c.symbol,\n            currentPrice:c.current_price,\n            pricechangepercent24horus:c.price_change_percentage_24h\n        }));\n        return list\n    }\n\n    /**\n     * Maps API data into a list of BasicCrypto models.\n     * \n     * @param data Raw API response containing minimal crypto info.\n     * @returns Array of BasicCrypto objects.\n     */\n    getAllList(data:any):BasicCrypto[]{\n        let list=data.map((c: any) => ({\n            id:c.id,\n            name:c.name,\n            symbol:c.symbol\n        }))\n        return list\n    }\n\n    /**\n     * Maps historical price data from the API into CryptoGraphPrice models.\n     * \n     * @param data Raw API response containing price history arrays.\n     * @returns Array of CryptoGraphPrice objects with price and date.\n     */\n    getPriceList(data: any): CryptoGraphPrice[] {\n        let list=data.prices.map((c: any) => ({\n            price:c[1],\n            date:c[0]\n        }))\n        return list\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicCrypto.html":{"url":"interfaces/BasicCrypto.html","title":"interface - BasicCrypto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicCrypto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/Crypto.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Model\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            symbol\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        symbol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Model } from \"./base.model\";\n\nexport interface BasicCrypto extends Model{\n    name:string,\n    symbol:string,\n}\n\nexport interface AdvancedCrypto extends BasicCrypto{\n    image:string,\n    currentPrice:number,\n    pricechangepercent24horus?:number \n}\n\nexport interface CryptoGraphPrice{\n    price:number,\n    date:number\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicList.html":{"url":"interfaces/BasicList.html","title":"interface - BasicList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/CryptoList.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BasicCrypto } from \"./Crypto.model\"\n\nexport interface CryptoList{\n    id:string,\n    title:string,\n    description:string\n    cryptos:BasicCrypto[]\n}\n\nexport interface BasicList{\n    id:string,\n    title:string,\n    description:string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BasicUser.html":{"url":"interfaces/BasicUser.html","title":"interface - BasicUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BasicUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/User.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Model\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            gender\n                                        \n                                \n                                \n                                        \n                                            img\n                                        \n                                \n                                \n                                        \n                                            isAdmin\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        img\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        img:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isAdmin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isAdmin:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Model } from \"./base.model\";\n\nexport interface User extends Model{\n    username:string,\n    email:string,\n    gender:string\n    token:string,\n    isAdmin:string\n}\n\nexport interface BasicUser extends Model{\n    username:string,\n    gender:string\n    email:string,\n    img:string,\n    isAdmin:boolean\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BodyCreateList.html":{"url":"interfaces/BodyCreateList.html","title":"interface - BodyCreateList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BodyCreateList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            Title\n                                        \n                                \n                                \n                                        \n                                            users_permissions_user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        users_permissions_user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        users_permissions_user:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CoinGekoMapping.html":{"url":"injectables/CoinGekoMapping.html","title":"injectable - CoinGekoMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CoinGekoMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Mapping class that transforms raw API data from CoinGecko\ninto application-specific models.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAllList\n                            \n                            \n                                getAllPaginated\n                            \n                            \n                                getPriceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllList\n                        \n                    \n                \n            \n            \n                \ngetAllList(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts:90\n                        \n                    \n\n\n            \n                \n                        Maps API data into a list of BasicCrypto models.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Raw API response containing minimal crypto info.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     BasicCrypto[]\n\n                        \n                            \n                                Array of BasicCrypto objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPaginated\n                        \n                    \n                \n            \n            \n                \ngetAllPaginated(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts:72\n                        \n                    \n\n\n            \n                \n                        Maps paginated API data into an array of AdvancedCrypto models.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Raw API response containing crypto market data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     AdvancedCrypto[]\n\n                        \n                            \n                                Array of AdvancedCrypto objects with selected fields.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPriceList\n                        \n                    \n                \n            \n            \n                \ngetPriceList(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts:105\n                        \n                    \n\n\n            \n                \n                        Maps historical price data from the API into CryptoGraphPrice models.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Raw API response containing price history arrays.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CryptoGraphPrice[]\n\n                        \n                            \n                                Array of CryptoGraphPrice objects with price and date.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { AdvancedCrypto, BasicCrypto, CryptoGraphPrice } from \"../../../models/Crypto.model\";\nimport { ICryptoBaseMapping } from \"../../interfaces/crypto/CryptoBaseMapping.interface\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Interface representing the detailed cryptocurrency data structure\n * as received from the CoinGecko API.\n */\nexport interface CryptoFromApi {\n    id: string\n    symbol: string\n    name: string\n    image: string\n    current_price: number\n    market_cap: number\n    market_cap_rank: number\n    fully_diluted_valuation: number\n    total_volume: number\n    high_24h: number\n    low_24h: number\n    price_change_24h: number\n    price_change_percentage_24h: number\n    market_cap_change_24h: number\n    market_cap_change_percentage_24h: number\n    circulating_supply: number\n    total_supply: number\n    max_supply: number\n    ath: number\n    ath_change_percentage: number\n    ath_date: string\n    atl: number\n    atl_change_percentage: number\n    atl_date: string\n    roi: any\n    last_updated: string\n}\n\n/**\n * Interface representing a basic crypto object with minimal information\n * as returned from the CoinGecko API.\n */\nexport interface BasiCryptoFromApi{\n    id:string,\n    name:string,\n    symbol:string\n}\n\n/**\n * Interface representing historical price and volume data\n * as provided by the CoinGecko API.\n */\nexport interface PricesCryptoFromApi {\n    prices: number[][]\n    market_caps: number[][]\n    total_volumes: number[][]\n}\n\n/**\n * Mapping class that transforms raw API data from CoinGecko\n * into application-specific models.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoinGekoMapping implements ICryptoBaseMapping {\n    /**\n     * Maps paginated API data into an array of AdvancedCrypto models.\n     * \n     * @param data Raw API response containing crypto market data.\n     * @returns Array of AdvancedCrypto objects with selected fields.\n     */\n    getAllPaginated(data: any): AdvancedCrypto[] {\n        let list=data.map((c: any) => ({\n            id: c.id,\n            name:c.name,\n            image: c.image,\n            symbol:c.symbol,\n            currentPrice:c.current_price,\n            pricechangepercent24horus:c.price_change_percentage_24h\n        }));\n        return list\n    }\n\n    /**\n     * Maps API data into a list of BasicCrypto models.\n     * \n     * @param data Raw API response containing minimal crypto info.\n     * @returns Array of BasicCrypto objects.\n     */\n    getAllList(data:any):BasicCrypto[]{\n        let list=data.map((c: any) => ({\n            id:c.id,\n            name:c.name,\n            symbol:c.symbol\n        }))\n        return list\n    }\n\n    /**\n     * Maps historical price data from the API into CryptoGraphPrice models.\n     * \n     * @param data Raw API response containing price history arrays.\n     * @returns Array of CryptoGraphPrice objects with price and date.\n     */\n    getPriceList(data: any): CryptoGraphPrice[] {\n        let list=data.prices.map((c: any) => ({\n            price:c[1],\n            date:c[0]\n        }))\n        return list\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CoinGekoRepository.html":{"url":"injectables/CoinGekoRepository.html","title":"injectable - CoinGekoRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CoinGekoRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/crypto/CoinGeko.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Repository implementation for fetching cryptocurrency data from the CoinGecko API.\nExtends the base crypto repository to provide specific HTTP requests and data mapping\nfor advanced and basic crypto information, as well as price history data.\n\n            \n\n            \n                Extends\n            \n            \n                            CryptoBaseRepository\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                findbyId\n                            \n                            \n                                    \n                                getAllPaginated\n                            \n                            \n                                    \n                                getAllSimple\n                            \n                            \n                                    \n                                getPriceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpclient: HttpClient, apiurl: string, mapping: ICryptoBaseMapping, cryptotoken: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/repositories/impl/crypto/CoinGeko.repository.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of CoinGekoRepository.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpclient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular HttpClient used for HTTP requests.\n\n                                                        \n                                                \n                                                \n                                                        apiurl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Base URL of the CoinGecko API injected via token.\n\n                                                        \n                                                \n                                                \n                                                        mapping\n                                                  \n                                                        \n                                                                    ICryptoBaseMapping\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Mapping strategy for transforming API responses to model objects.\n\n                                                        \n                                                \n                                                \n                                                        cryptotoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                API key or token for authenticating requests.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        findbyId\n                        \n                    \n                \n            \n            \n                \n                        \n                    findbyId(id: string, currency: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         CryptoBaseRepository\n\n                        \n                    \n                    \n                        \n                                Defined in         CryptoBaseRepository:64\n\n                        \n                    \n\n\n            \n                \n                        Finds a cryptocurrency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the cryptocurrency.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The currency code for price conversion.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting a BasicCrypto object for the requested ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllPaginated\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllPaginated(page: number, pageSize: number, currency: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         CryptoBaseRepository\n\n                        \n                    \n                    \n                        \n                                Defined in         CryptoBaseRepository:49\n\n                        \n                    \n\n\n            \n                \n                        Fetches a paginated list of advanced cryptocurrency data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The page number to fetch.\n\n                                            \n                                        \n                                        \n                                                pageSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number of items per page.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The currency code (e.g., \"usd\", \"eur\") for price conversion.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting an array of AdvancedCrypto objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getAllSimple\n                        \n                    \n                \n            \n            \n                \n                        \n                    getAllSimple()\n                \n            \n\n\n                    \n                        \n                            Inherited from         CryptoBaseRepository\n\n                        \n                    \n                    \n                        \n                                Defined in         CryptoBaseRepository:77\n\n                        \n                    \n\n\n            \n                \n                        Fetches a simple list of all available cryptocurrencies.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting an array of BasicCrypto objects with minimal data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getPriceList\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPriceList(id: string, currency: string, days: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         CryptoBaseRepository\n\n                        \n                    \n                    \n                        \n                                Defined in         CryptoBaseRepository:93\n\n                        \n                    \n\n\n            \n                \n                        Fetches historical price data for a cryptocurrency over a specified time period.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the cryptocurrency.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The currency code for price conversion.\n\n                                            \n                                        \n                                        \n                                                days\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number of days for the price history (e.g., \"7\", \"30\").\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting an array of CryptoGraphPrice objects representing the price history.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { CryptoBaseRepository } from \"./CryptoBase.repository\";\nimport { AdvancedCrypto, BasicCrypto, CryptoGraphPrice } from \"../../../models/Crypto.model\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { map, Observable } from \"rxjs\";\nimport { CRYPTOTOKEN_TOKEN, CRYPTO_API_URL_TOKEN, CRYPTO_MAPPING_TOKEN } from \"../../repository.tokens\";\nimport { ICryptoBaseMapping } from \"../../interfaces/crypto/CryptoBaseMapping.interface\";\n\n/**\n * Repository implementation for fetching cryptocurrency data from the CoinGecko API.\n * \n * Extends the base crypto repository to provide specific HTTP requests and data mapping\n * for advanced and basic crypto information, as well as price history data.\n*/\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoinGekoRepository extends CryptoBaseRepository{\n    /**\n     * Creates an instance of CoinGekoRepository.\n     * \n     * @param httpclient Angular HttpClient used for HTTP requests.\n     * @param apiurl Base URL of the CoinGecko API injected via token.\n     * @param mapping Mapping strategy for transforming API responses to model objects.\n     * @param cryptotoken API key or token for authenticating requests.\n    */\n    constructor(   \n        httpclient:HttpClient,\n        @Inject(CRYPTO_API_URL_TOKEN) apiurl:string,\n        @Inject(CRYPTO_MAPPING_TOKEN) mapping:ICryptoBaseMapping,\n        @Inject(CRYPTOTOKEN_TOKEN) cryptotoken:string\n    ){\n        super(\n            httpclient,\n            apiurl,\n            mapping,\n            cryptotoken\n        );\n    }\n\n    /**\n     * Fetches a paginated list of advanced cryptocurrency data.\n     * \n     * @param page The page number to fetch.\n     * @param pageSize Number of items per page.\n     * @param currency The currency code (e.g., \"usd\", \"eur\") for price conversion.\n     * @returns Observable emitting an array of AdvancedCrypto objects.\n    */\n    override getAllPaginated(page: number, pageSize: number,currency:string): Observable {\n        return this.httpclient.get(this.apiurl+`/coins/markets?vs_currency=${currency}&per_page=${pageSize}&page=${page}`+`&x_cg_demo_api_key=${this.cryptotoken}`).pipe(\n            map(res=>{\n                return this.mapping.getAllPaginated(res) \n            })\n        )\n    }\n\n    /**\n     * Finds a cryptocurrency by its ID.\n     * \n     * @param id The unique identifier of the cryptocurrency.\n     * @param currency The currency code for price conversion.\n     * @returns Observable emitting a BasicCrypto object for the requested ID.\n    */\n    override findbyId(id: string,currency:string): Observable {\n        return this.httpclient.get(this.apiurl+`/coins/markets?vs_currency=${currency}&ids=${id}`+`&x_cg_demo_api_key=${this.cryptotoken}`).pipe(\n            map(res=>{\n                return this.mapping.getAllPaginated(res) \n            })\n        )\n    }\n\n    /**\n     * Fetches a simple list of all available cryptocurrencies.\n     * \n     * @returns Observable emitting an array of BasicCrypto objects with minimal data.\n    */\n    override getAllSimple(): Observable {\n        return this.httpclient.get(this.apiurl+\"/coins/list\"+`?x_cg_demo_api_key=${this.cryptotoken}`).pipe(\n            map(res=>{\n                return this.mapping.getAllList(res)\n            })\n        )\n    }\n\n    /**\n     * Fetches historical price data for a cryptocurrency over a specified time period.\n     * \n     * @param id The unique identifier of the cryptocurrency.\n     * @param currency The currency code for price conversion.\n     * @param days Number of days for the price history (e.g., \"7\", \"30\").\n     * @returns Observable emitting an array of CryptoGraphPrice objects representing the price history.\n    */\n    override getPriceList(id: string, currency: string, days: string): Observable {\n        return this.httpclient.get(this.apiurl+`coins/${id}/market_chart?vs_currency=${currency}&days=${days}`+`&x_cg_demo_api_key=${this.cryptotoken}`).pipe(\n            map(res=>{\n                return this.mapping.getPriceList(res)\n            })\n        )\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/ColorpercentDirective.html":{"url":"directives/ColorpercentDirective.html","title":"directive - ColorpercentDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  ColorpercentDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/directives/colorpercent.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Directive that dynamically sets the text color of an element based on a numeric percentage value.\nIf the value is negative, the text color is set to the Ionic CSS variable --ion-color-negativenew.\nIf the value is zero or positive, the color is set to --ion-color-positivenew.\nThis is useful for visually indicating positive or negative percentages (e.g. in financial or performance dashboards).\n\n            \n\n\n            \n                Implements\n            \n            \n                        OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [appColorpercent]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnChanges\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                appColorpercent\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(elementref: ElementRef, render: Renderer2)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/directives/colorpercent.directive.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of the directive.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        elementref\n                                                  \n                                                        \n                                                                    ElementRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Reference to the host DOM element.\n\n                                                        \n                                                \n                                                \n                                                        render\n                                                  \n                                                        \n                                                                    Renderer2\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Renderer2 instance used to safely manipulate element styles.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        appColorpercent\n                    \n                \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                        \n                            \n                                    Defined in src/app/core/directives/colorpercent.directive.ts:20\n                            \n                        \n                \n                    \n                        Numeric value used to determine the color of the text.\nIf negative, applies the negative color; otherwise, applies the positive color.\n\n                    \n                \n            \n        \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnChanges\n                        \n                    \n                \n            \n            \n                \nngOnChanges(changes: SimpleChanges)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/directives/colorpercent.directive.ts:35\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that is called when any data-bound property changes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                changes\n                                            \n                                                        SimpleChanges\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The changed properties of the directive.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, ElementRef, Input, OnChanges, Renderer2, SimpleChanges } from '@angular/core';\n\n/**\n * Directive that dynamically sets the text color of an element based on a numeric percentage value.\n * \n * If the value is negative, the text color is set to the Ionic CSS variable `--ion-color-negativenew`.\n * If the value is zero or positive, the color is set to `--ion-color-positivenew`.\n * \n * This is useful for visually indicating positive or negative percentages (e.g. in financial or performance dashboards).\n */\n@Directive({\n  selector: '[appColorpercent]',\n  standalone: true\n})\nexport class ColorpercentDirective implements OnChanges{\n  /**\n   * Numeric value used to determine the color of the text.\n   * If negative, applies the negative color; otherwise, applies the positive color.\n   */\n  @Input() appColorpercent:number=0;\n\n  /**\n   * Creates an instance of the directive.\n   * \n   * @param elementref Reference to the host DOM element.\n   * @param render Renderer2 instance used to safely manipulate element styles.\n   */\n  constructor(private elementref:ElementRef, private render:Renderer2) { }\n\n  /**\n   * Lifecycle hook that is called when any data-bound property changes.\n   * \n   * @param changes The changed properties of the directive.\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if(this.appColorpercent\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CreateListUpdate.html":{"url":"interfaces/CreateListUpdate.html","title":"interface - CreateListUpdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CreateListUpdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         bodyupdate\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         bodyupdate\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Crypto.html":{"url":"interfaces/Crypto.html","title":"interface - Crypto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Crypto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            cryptoId\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            Name\n                                        \n                                \n                                \n                                        \n                                            publishedAt\n                                        \n                                \n                                \n                                        \n                                            symbol\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptoId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cryptoId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publishedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        symbol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoBaseRepository.html":{"url":"injectables/CryptoBaseRepository.html","title":"injectable - CryptoBaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoBaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/crypto/CryptoBase.repository.ts\n        \n\n\n            \n                Description\n            \n            \n                Base repository class for cryptocurrency data fetching and mapping.\nThis abstract class provides the structure and dependencies needed to\ninteract with a crypto API. The actual data fetching methods must be\nimplemented by subclasses.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findbyId\n                            \n                            \n                                getAllPaginated\n                            \n                            \n                                getAllSimple\n                            \n                            \n                                getPriceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpclient: HttpClient, apiurl: string, mapping: ICryptoBaseMapping, cryptotoken: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/repositories/impl/crypto/CryptoBase.repository.ts:21\n                            \n                        \n\n                \n                    \n                            Creates an instance of CryptoBaseRepository.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpclient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular HttpClient for making HTTP requests.\n\n                                                        \n                                                \n                                                \n                                                        apiurl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The base API URL injected via token.\n\n                                                        \n                                                \n                                                \n                                                        mapping\n                                                  \n                                                        \n                                                                    ICryptoBaseMapping\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Mapping interface to convert raw API data to models.\n\n                                                        \n                                                \n                                                \n                                                        cryptotoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Token or API key used for authentication with the API.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findbyId\n                        \n                    \n                \n            \n            \n                \nfindbyId(id: string, currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/crypto/CryptoBase.repository.ts:71\n                        \n                    \n\n\n            \n                \n                        Finds a cryptocurrency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Cryptocurrency ID.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currency code for price conversion.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting the crypto model.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPaginated\n                        \n                    \n                \n            \n            \n                \ngetAllPaginated(page: number, pageSize: number, currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/crypto/CryptoBase.repository.ts:59\n                        \n                    \n\n\n            \n                \n                        Fetches paginated cryptocurrency data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Page number.\n\n                                            \n                                        \n                                        \n                                                pageSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number of items per page.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currency code for price conversion.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting paginated data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSimple\n                        \n                    \n                \n            \n            \n                \ngetAllSimple()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/crypto/CryptoBase.repository.ts:81\n                        \n                    \n\n\n            \n                \n                        Fetches a simple list of all cryptocurrencies.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting an array of crypto models.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPriceList\n                        \n                    \n                \n            \n            \n                \ngetPriceList(id: string, currency: string, days: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/crypto/CryptoBase.repository.ts:46\n                        \n                    \n\n\n            \n                \n                        Fetches historical price data for a cryptocurrency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Cryptocurrency ID.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currency code for price conversion.\n\n                                            \n                                        \n                                        \n                                                days\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number of days for the price history.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting price data.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { BasicCrypto } from \"../../../models/Crypto.model\";\nimport { ICryptoBase } from \"../../interfaces/crypto/CryptoBase.interface\";\nimport { Observable } from \"rxjs\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { CRYPTOTOKEN_TOKEN, CRYPTO_API_URL_TOKEN, CRYPTO_MAPPING_TOKEN } from \"../../repository.tokens\";\nimport { ICryptoBaseMapping } from \"../../interfaces/crypto/CryptoBaseMapping.interface\";\n\n/**\n * Base repository class for cryptocurrency data fetching and mapping.\n * \n * This abstract class provides the structure and dependencies needed to\n * interact with a crypto API. The actual data fetching methods must be\n * implemented by subclasses.\n * \n * @template T The type of the crypto model, extending BasicCrypto.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class CryptoBaseRepository implements ICryptoBase{\n    /**\n     * Creates an instance of CryptoBaseRepository.\n     * \n     * @param httpclient Angular HttpClient for making HTTP requests.\n     * @param apiurl The base API URL injected via token.\n     * @param mapping Mapping interface to convert raw API data to models.\n     * @param cryptotoken Token or API key used for authentication with the API.\n     */\n    constructor(\n        protected httpclient:HttpClient,\n        @Inject(CRYPTO_API_URL_TOKEN) protected apiurl:string,\n        @Inject(CRYPTO_MAPPING_TOKEN) protected mapping:ICryptoBaseMapping,\n        @Inject(CRYPTOTOKEN_TOKEN) protected cryptotoken:string\n    ){ }\n\n    /**\n     * Fetches historical price data for a cryptocurrency.\n     * \n     * @param id Cryptocurrency ID.\n     * @param currency Currency code for price conversion.\n     * @param days Number of days for the price history.\n     * @throws Error to indicate method is not implemented in the base class.\n     * @returns Observable emitting price data.\n     */\n    getPriceList(id: string, currency: string, days: string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Fetches paginated cryptocurrency data.\n     * \n     * @param page Page number.\n     * @param pageSize Number of items per page.\n     * @param currency Currency code for price conversion.\n     * @throws Error to indicate method is not implemented in the base class.\n     * @returns Observable emitting paginated data.\n     */\n    getAllPaginated(page: number, pageSize: number,currency:string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Finds a cryptocurrency by its ID.\n     * \n     * @param id Cryptocurrency ID.\n     * @param currency Currency code for price conversion.\n     * @throws Error to indicate method is not implemented in the base class.\n     * @returns Observable emitting the crypto model.\n     */\n    findbyId(id: string,currency:string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n   * Fetches a simple list of all cryptocurrencies.\n   * \n   * @throws Error to indicate method is not implemented in the base class.\n   * @returns Observable emitting an array of crypto models.\n   */\n    getAllSimple(): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoBaseService.html":{"url":"injectables/CryptoBaseService.html","title":"injectable - CryptoBaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoBaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/crypto/CryptoBase.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle cryptocurrency data operations using a repository.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findbyId\n                            \n                            \n                                getAllPaginated\n                            \n                            \n                                getAllSimple\n                            \n                            \n                                getPriceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ICryptoBase)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/crypto/CryptoBase.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                    ICryptoBase\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findbyId\n                        \n                    \n                \n            \n            \n                \nfindbyId(id: string, currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/crypto/CryptoBase.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Finds a cryptocurrency by its identifier and currency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cryptocurrency identifier.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code for the price.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the cryptocurrency data of type T.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPaginated\n                        \n                    \n                \n            \n            \n                \ngetAllPaginated(page: number, pageSize: number, currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/crypto/CryptoBase.service.ts:38\n                        \n                    \n\n\n            \n                \n                        Retrieves paginated cryptocurrency data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                pageSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of items per page.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code for price values.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the paginated data (format depends on implementation).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSimple\n                        \n                    \n                \n            \n            \n                \ngetAllSimple()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/crypto/CryptoBase.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Retrieves a simple list of all cryptocurrencies.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of cryptocurrencies of type T.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPriceList\n                        \n                    \n                \n            \n            \n                \ngetPriceList(id: string, currency: string, days: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/crypto/CryptoBase.service.ts:27\n                        \n                    \n\n\n            \n                \n                        Retrieves the price list of a cryptocurrency for a given period.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cryptocurrency identifier.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code (e.g., USD, EUR).\n\n\n                                            \n                                        \n                                        \n                                                days\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of days for price history.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of cryptocurrency price data.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { ICryptobaseService } from \"../../interfaces/crypto/Crypto-base-service.interface\";\nimport { BasicCrypto } from \"../../../models/Crypto.model\";\nimport { Observable } from \"rxjs\";\nimport { CRYPTO_REPOSITORY_TOKEN } from \"../../../repositories/repository.tokens\";\nimport { ICryptoBase } from \"../../../repositories/interfaces/crypto/CryptoBase.interface\";\n\n/**\n * Service to handle cryptocurrency data operations using a repository.\n * @template T - Type extending BasicCrypto model.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class CryptoBaseService implements ICryptobaseService {\n    constructor(\n        @Inject (CRYPTO_REPOSITORY_TOKEN) protected repository:ICryptoBase\n    ){ }\n\n    /**\n     * Retrieves the price list of a cryptocurrency for a given period.\n     * @param id - The cryptocurrency identifier.\n     * @param currency - The currency code (e.g., USD, EUR).\n     * @param days - Number of days for price history.\n     * @returns An Observable emitting an array of cryptocurrency price data.\n     */\n    getPriceList(id: string, currency: string, days: string): Observable {\n        return this.repository.getPriceList(id,currency,days)\n    }\n\n    /**\n     * Retrieves paginated cryptocurrency data.\n     * @param page - The page number to retrieve.\n     * @param pageSize - The number of items per page.\n     * @param currency - The currency code for price values.\n     * @returns An Observable emitting the paginated data (format depends on implementation).\n     */\n    getAllPaginated(page: number, pageSize: number,currency:string): Observable {\n        return this.repository.getAllPaginated(page,pageSize,currency)\n    }\n\n    /**\n     * Finds a cryptocurrency by its identifier and currency.\n     * @param id - The cryptocurrency identifier.\n     * @param currency - The currency code for the price.\n     * @returns An Observable emitting the cryptocurrency data of type T.\n     */\n    findbyId(id: string,currency:string): Observable {\n        return this.repository.findbyId(id,currency)\n    }\n\n    /**\n     * Retrieves a simple list of all cryptocurrencies.\n     * @returns An Observable emitting an array of cryptocurrencies of type T.\n     */\n    getAllSimple(): Observable {\n        return this.repository.getAllSimple()\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoCoinGeko.html":{"url":"interfaces/CryptoCoinGeko.html","title":"interface - CryptoCoinGeko","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoCoinGeko\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/crypto/CoinGeko-service.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ICryptobaseService\n            \n\n\n\n\n    \n\n\n    \n        import { BasicCrypto } from \"../../../models/Crypto.model\";\nimport { ICryptobaseService } from \"./Crypto-base-service.interface\";\n\nexport interface CryptoCoinGeko extends ICryptobaseService{\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoFromApi.html":{"url":"interfaces/CryptoFromApi.html","title":"interface - CryptoFromApi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoFromApi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the detailed cryptocurrency data structure\nas received from the CoinGecko API.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ath\n                                        \n                                \n                                \n                                        \n                                            ath_change_percentage\n                                        \n                                \n                                \n                                        \n                                            ath_date\n                                        \n                                \n                                \n                                        \n                                            atl\n                                        \n                                \n                                \n                                        \n                                            atl_change_percentage\n                                        \n                                \n                                \n                                        \n                                            atl_date\n                                        \n                                \n                                \n                                        \n                                            circulating_supply\n                                        \n                                \n                                \n                                        \n                                            current_price\n                                        \n                                \n                                \n                                        \n                                            fully_diluted_valuation\n                                        \n                                \n                                \n                                        \n                                            high_24h\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            image\n                                        \n                                \n                                \n                                        \n                                            last_updated\n                                        \n                                \n                                \n                                        \n                                            low_24h\n                                        \n                                \n                                \n                                        \n                                            market_cap\n                                        \n                                \n                                \n                                        \n                                            market_cap_change_24h\n                                        \n                                \n                                \n                                        \n                                            market_cap_change_percentage_24h\n                                        \n                                \n                                \n                                        \n                                            market_cap_rank\n                                        \n                                \n                                \n                                        \n                                            max_supply\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            price_change_24h\n                                        \n                                \n                                \n                                        \n                                            price_change_percentage_24h\n                                        \n                                \n                                \n                                        \n                                            roi\n                                        \n                                \n                                \n                                        \n                                            symbol\n                                        \n                                \n                                \n                                        \n                                            total_supply\n                                        \n                                \n                                \n                                        \n                                            total_volume\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ath:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ath_change_percentage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ath_change_percentage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ath_date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ath_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        atl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        atl:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        atl_change_percentage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        atl_change_percentage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        atl_date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        atl_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        circulating_supply\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        circulating_supply:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        current_price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        current_price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        fully_diluted_valuation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        fully_diluted_valuation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        high_24h\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        high_24h:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        last_updated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        last_updated:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        low_24h\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        low_24h:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        market_cap\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        market_cap:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        market_cap_change_24h\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        market_cap_change_24h:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        market_cap_change_percentage_24h\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        market_cap_change_percentage_24h:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        market_cap_rank\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        market_cap_rank:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        max_supply\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        max_supply:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price_change_24h\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price_change_24h:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price_change_percentage_24h\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price_change_percentage_24h:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        roi\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roi:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        symbol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total_supply\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total_supply:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total_volume\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total_volume:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AdvancedCrypto, BasicCrypto, CryptoGraphPrice } from \"../../../models/Crypto.model\";\nimport { ICryptoBaseMapping } from \"../../interfaces/crypto/CryptoBaseMapping.interface\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Interface representing the detailed cryptocurrency data structure\n * as received from the CoinGecko API.\n */\nexport interface CryptoFromApi {\n    id: string\n    symbol: string\n    name: string\n    image: string\n    current_price: number\n    market_cap: number\n    market_cap_rank: number\n    fully_diluted_valuation: number\n    total_volume: number\n    high_24h: number\n    low_24h: number\n    price_change_24h: number\n    price_change_percentage_24h: number\n    market_cap_change_24h: number\n    market_cap_change_percentage_24h: number\n    circulating_supply: number\n    total_supply: number\n    max_supply: number\n    ath: number\n    ath_change_percentage: number\n    ath_date: string\n    atl: number\n    atl_change_percentage: number\n    atl_date: string\n    roi: any\n    last_updated: string\n}\n\n/**\n * Interface representing a basic crypto object with minimal information\n * as returned from the CoinGecko API.\n */\nexport interface BasiCryptoFromApi{\n    id:string,\n    name:string,\n    symbol:string\n}\n\n/**\n * Interface representing historical price and volume data\n * as provided by the CoinGecko API.\n */\nexport interface PricesCryptoFromApi {\n    prices: number[][]\n    market_caps: number[][]\n    total_volumes: number[][]\n}\n\n/**\n * Mapping class that transforms raw API data from CoinGecko\n * into application-specific models.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoinGekoMapping implements ICryptoBaseMapping {\n    /**\n     * Maps paginated API data into an array of AdvancedCrypto models.\n     * \n     * @param data Raw API response containing crypto market data.\n     * @returns Array of AdvancedCrypto objects with selected fields.\n     */\n    getAllPaginated(data: any): AdvancedCrypto[] {\n        let list=data.map((c: any) => ({\n            id: c.id,\n            name:c.name,\n            image: c.image,\n            symbol:c.symbol,\n            currentPrice:c.current_price,\n            pricechangepercent24horus:c.price_change_percentage_24h\n        }));\n        return list\n    }\n\n    /**\n     * Maps API data into a list of BasicCrypto models.\n     * \n     * @param data Raw API response containing minimal crypto info.\n     * @returns Array of BasicCrypto objects.\n     */\n    getAllList(data:any):BasicCrypto[]{\n        let list=data.map((c: any) => ({\n            id:c.id,\n            name:c.name,\n            symbol:c.symbol\n        }))\n        return list\n    }\n\n    /**\n     * Maps historical price data from the API into CryptoGraphPrice models.\n     * \n     * @param data Raw API response containing price history arrays.\n     * @returns Array of CryptoGraphPrice objects with price and date.\n     */\n    getPriceList(data: any): CryptoGraphPrice[] {\n        let list=data.prices.map((c: any) => ({\n            price:c[1],\n            date:c[0]\n        }))\n        return list\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CryptoGeko.html":{"url":"injectables/CryptoGeko.html","title":"injectable - CryptoGeko","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CryptoGeko\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/crypto/CryptoGeko.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service implementing the CryptoCoinGeko interface,\nextending the generic CryptoBaseService with BasicCrypto type.\nIt uses an ICoinGeko repository injected via the CRYPTO_REPOSITORY_TOKEN.\n\n            \n\n            \n                Extends\n            \n            \n                            CryptoBaseService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                findbyId\n                            \n                            \n                                getAllPaginated\n                            \n                            \n                                getAllSimple\n                            \n                            \n                                getPriceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: ICoinGeko)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/crypto/CryptoGeko.service.ts:16\n                            \n                        \n\n                \n                    \n                            Creates an instance of CryptoGeko service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                        ICoinGeko\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe ICoinGeko repository injected for crypto data operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findbyId\n                        \n                    \n                \n            \n            \n                \nfindbyId(id: string, currency: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         CryptoBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         CryptoBaseService:48\n\n                        \n                    \n\n\n            \n                \n                        Finds a cryptocurrency by its identifier and currency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cryptocurrency identifier.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code for the price.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the cryptocurrency data of type T.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPaginated\n                        \n                    \n                \n            \n            \n                \ngetAllPaginated(page: number, pageSize: number, currency: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         CryptoBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         CryptoBaseService:38\n\n                        \n                    \n\n\n            \n                \n                        Retrieves paginated cryptocurrency data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                pageSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of items per page.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code for price values.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the paginated data (format depends on implementation).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSimple\n                        \n                    \n                \n            \n            \n                \ngetAllSimple()\n                \n            \n\n\n                    \n                        \n                            Inherited from         CryptoBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         CryptoBaseService:56\n\n                        \n                    \n\n\n            \n                \n                        Retrieves a simple list of all cryptocurrencies.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of cryptocurrencies of type T.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPriceList\n                        \n                    \n                \n            \n            \n                \ngetPriceList(id: string, currency: string, days: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         CryptoBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         CryptoBaseService:27\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the price list of a cryptocurrency for a given period.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cryptocurrency identifier.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code (e.g., USD, EUR).\n\n\n                                            \n                                        \n                                        \n                                                days\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of days for price history.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of cryptocurrency price data.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { CryptoBaseService } from \"./CryptoBase.service\";\nimport { BasicCrypto } from \"../../../models/Crypto.model\";\nimport { CryptoCoinGeko } from \"../../interfaces/crypto/CoinGeko-service.interface\";\nimport { CRYPTO_REPOSITORY_TOKEN } from \"../../../repositories/repository.tokens\";\nimport { ICoinGeko } from \"../../../repositories/interfaces/crypto/CoinGeko.interface\";\n\n/**\n * Service implementing the CryptoCoinGeko interface,\n * extending the generic CryptoBaseService with BasicCrypto type.\n * It uses an ICoinGeko repository injected via the CRYPTO_REPOSITORY_TOKEN.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class CryptoGeko extends CryptoBaseService implements CryptoCoinGeko {\n    /**\n     * Creates an instance of CryptoGeko service.\n     * @param repository - The ICoinGeko repository injected for crypto data operations.\n     */\n    constructor(\n        @Inject (CRYPTO_REPOSITORY_TOKEN) repository:ICoinGeko\n    ){\n        super(repository);\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoGraphPrice.html":{"url":"interfaces/CryptoGraphPrice.html","title":"interface - CryptoGraphPrice","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoGraphPrice\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/Crypto.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            date\n                                        \n                                \n                                \n                                        \n                                            price\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        date:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        price\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        price:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Model } from \"./base.model\";\n\nexport interface BasicCrypto extends Model{\n    name:string,\n    symbol:string,\n}\n\nexport interface AdvancedCrypto extends BasicCrypto{\n    image:string,\n    currentPrice:number,\n    pricechangepercent24horus?:number \n}\n\nexport interface CryptoGraphPrice{\n    price:number,\n    date:number\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CryptoList.html":{"url":"interfaces/CryptoList.html","title":"interface - CryptoList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CryptoList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/CryptoList.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cryptos\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cryptos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cryptos:     BasicCrypto[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     BasicCrypto[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { BasicCrypto } from \"./Crypto.model\"\n\nexport interface CryptoList{\n    id:string,\n    title:string,\n    description:string\n    cryptos:BasicCrypto[]\n}\n\nexport interface BasicList{\n    id:string,\n    title:string,\n    description:string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CryptocardComponent.html":{"url":"components/CryptocardComponent.html","title":"component - CryptocardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CryptocardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/cryptocard/cryptocard.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-cryptocard\n            \n\n\n\n            \n                styleUrls\n                ./cryptocard.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./cryptocard.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                percent\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                crypto\n                            \n                            \n                                currency\n                            \n                        \n                    \n                \n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/cryptocard/cryptocard.component.ts:16\n                            \n                        \n\n                \n                    \n                            Creates an instance of CryptocardComponent.\n\n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        crypto\n                    \n                \n                \n                    \n                        Type :         AdvancedCrypto\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/cryptocard/cryptocard.component.ts:14\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        currency\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/cryptocard/cryptocard.component.ts:15\n                            \n                        \n            \n        \n\n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        percent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 10\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/cryptocard/cryptocard.component.ts:16\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Input } from '@angular/core';\nimport { AdvancedCrypto } from 'src/app/core/models/Crypto.model';\n\n@Component({\n  selector: 'app-cryptocard',\n  templateUrl: './cryptocard.component.html',\n  styleUrls: ['./cryptocard.component.scss'],\n})\n/**\n * Component that displays a visual card for a cryptocurrency, showing information\n * based on the `AdvancedCrypto` model and the selected display `currency`.\n */\nexport class CryptocardComponent {\n  @Input() crypto!:AdvancedCrypto;\n  @Input() currency!:string\n  percent=10\n\n  /**\n   * Creates an instance of CryptocardComponent.\n   */\n  constructor() { }\n}\n    \n\n    \n        \n  \n    \n      \n        \n          {{ crypto.name }}\n        \n        ({{ crypto.symbol.toUpperCase() }})\n      \n\n      \n    \n  \n\n  \n    \n      \n        {{ crypto.currentPrice }}{{ currency | currencypipe }}\n      \n      \n      {{ (crypto.pricechangepercent24horus | percentformater) }}\n    \n    \n  \n\n\n    \n\n    \n                \n                    ./cryptocard.component.scss\n                \n                \n\n\n\n  ion-card {\n    transition: transform 0.5s ease; \n  }\n\n  ion-card:hover{\n    transform: scale(1.05);\n    transition: 0.5s;\n    cursor: pointer;\n\n  }.crypto-card {\n    margin: 16px;\n    border-radius: 12px;\n    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);\n  }\n  \n  .crypto-card-header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    padding: 16px;\n  }\n  \n  .crypto-header-content {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    width: 100%;\n  }\n  \n  .crypto-info {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    margin-right: 12px; /* Agrega margen entre el nombre y la imagen */\n  }\n  \n  .crypto-name {\n    font-size: 18px;\n    font-weight: bold;\n  }\n  \n  .crypto-symbol {\n    font-size: 14px;\n    color: gray;\n    margin-top: 4px;\n  }\n  \n  .crypto-image {\n    width: 40px;\n    height: 40px;\n    border-radius: 50%;\n    object-fit: cover;\n  }\n  \n  .crypto-card-content {\n    padding: 16px;\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n  }\n  \n  .crypto-stats {\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n  }\n  \n  .crypto-price {\n    font-size: 20px;\n    font-weight: bold;\n  }\n  \n  .price-change {\n    font-size: 14px;\n    margin-top: 4px;\n  }\n  \n  .positive {\n    color: green!important;\n  }\n  \n  .negative {\n    color: red;\n  }\n  \n  /* Estilos responsivos */\n  @media (max-width: 768px) {\n    .crypto-card-header {\n      flex-direction: column;\n      text-align: center;\n    }\n  \n    .crypto-header-content {\n      flex-direction: column;\n      align-items: center;\n    }\n  \n    .crypto-info {\n      margin-right: 0; /* Elimina el margen entre el nombre y la imagen */\n      text-align: center;\n    }\n  \n    .crypto-image {\n      width: 60px;  /* Aumenta el tamaño de la imagen */\n      height: 60px; /* Aumenta el tamaño de la imagen */\n      margin-top: 8px;  /* Añade un margen superior para separar la imagen del texto */\n    }\n  \n    .crypto-card-content {\n      flex-direction: column;\n      text-align: center;\n    }\n  }\n  \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                              {{ crypto.name }}                ({{ crypto.symbol.toUpperCase() }})                                      {{ crypto.currentPrice }}{{ currency | currencypipe }}                  {{ (crypto.pricechangepercent24horus | percentformater) }}          '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'CryptocardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CryptosimplecardComponent.html":{"url":"components/CryptosimplecardComponent.html","title":"component - CryptosimplecardComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CryptosimplecardComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/cryptosimplecard/cryptosimplecard.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-cryptosimplecard\n            \n\n\n\n            \n                styleUrls\n                ./cryptosimplecard.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./cryptosimplecard.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCrypto\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                crypto\n                            \n                            \n                                delete\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                emmiter\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:13\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        crypto\n                    \n                \n                \n                    \n                        Type :         BasicCrypto\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:16\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        delete\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Default value : false\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:17\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        emmiter\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:18\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteCrypto\n                        \n                    \n                \n            \n            \n                \ndeleteCrypto(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/cryptosimplecard/cryptosimplecard.component.ts:24\n                        \n                    \n\n\n            \n                \n                        Handles the delete button click event, stops event propagation and emits the crypto id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The DOM event triggered by clicking delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { BasicCrypto } from 'src/app/core/models/Crypto.model';\n\n@Component({\n  selector: 'app-cryptosimplecard',\n  templateUrl: './cryptosimplecard.component.html',\n  styleUrls: ['./cryptosimplecard.component.scss'],\n})\n/**\n * A simple card component to display basic cryptocurrency info.\n * Provides an optional delete button and emits an event with the crypto id when delete is triggered.\n */\nexport class CryptosimplecardComponent {\n  constructor() { }\n\n  @Input() crypto!:BasicCrypto\n  @Input() delete:boolean=false\n  @Output() emmiter:EventEmitter=new EventEmitter()\n\n  /**\n   * Handles the delete button click event, stops event propagation and emits the crypto id.\n   * @param event The DOM event triggered by clicking delete.\n   */\n  deleteCrypto(event: Event) {\n    event.stopPropagation()    \n    this.emmiter.emit(this.crypto.id)\n  }\n}\n    \n\n    \n        \n  \n    \n      \n        {{ crypto.name }}\n        {{ crypto.symbol }}\n      \n      \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./cryptosimplecard.component.scss\n                \n                /* Tarjeta de criptomoneda */\n.crypto-card {\n  box-sizing: border-box;\n  height: auto;\n  margin: 10px;\n  border-radius: 12px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n  transition: transform 0.3s ease, box-shadow 0.3s ease;\n}\n\n/* Efecto hover */\n.crypto-card:hover {\n  transform: translateY(-6px);\n  cursor: pointer;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\n}\n\n/* Contenedor de la cabecera */\n.card-header-container {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 15px;\n  border-radius: 12px 12px 0 0;\n}\n\n/* Información de la criptomoneda */\n.crypto-info {\n  display: flex;\n  flex-direction: column;\n}\n\n/* Nombre de la criptomoneda */\n.crypto-name {\n  font-size: 1.4rem;\n  font-weight: bold;\n}\n\n/* Símbolo de la criptomoneda */\n.crypto-symbol {\n  font-size: 1rem;\n  margin-top: 4px;\n}\n\n/* Botón de eliminar */\n.delete-btn {\n  padding: 0;\n  margin: 0;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.delete-btn ion-icon {\n  font-size: 24px;\n  color: #d9534f; /* Color rojo para el icono */\n}\n\n/* Estilos responsive */\n@media (max-width: 600px) {\n  .card-header-container {\n    flex-direction: column;\n    align-items: flex-start;\n  }\n\n  /* Ajuste para el botón de eliminar en pantallas pequeñas */\n  .delete-btn {\n    margin-top: 10px;\n    align-self: flex-end;\n  }\n\n  /* Ajuste de tamaño para el nombre */\n  .crypto-name {\n    font-size: 1.1rem;\n  }\n\n  /* Ajuste de tamaño para el símbolo */\n  .crypto-symbol {\n    font-size: 0.9rem;\n  }\n}\n\n/* Para pantallas muy pequeñas */\n@media (max-width: 400px) {\n  .crypto-name {\n    font-size: 1rem;\n  }\n\n  .crypto-symbol {\n    font-size: 0.8rem;\n  }\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{ crypto.name }}        {{ crypto.symbol }}                                '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'CryptosimplecardComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CryptoviewPage.html":{"url":"components/CryptoviewPage.html","title":"component - CryptoviewPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CryptoviewPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/General/cryptoview/cryptoview.page.ts\n\n\n\n    \n        Description\n    \n    \n        CryptoviewPage component.\nDisplays detailed cryptocurrency information and a price history chart.\nSupports changing currency display and time range for the price data.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                            CurrencyPipe\n                                BackgraphbuttonDirective\n                \n            \n\n\n            \n                selector\n                app-cryptoview\n            \n\n\n\n            \n                styleUrls\n                ./cryptoview.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./cryptoview.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                chart\n                            \n                            \n                                crypto\n                            \n                            \n                                currency\n                            \n                            \n                                days\n                            \n                            \n                                id\n                            \n                            \n                                percent\n                            \n                            \n                                    Private\n                                suscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changecurrency\n                            \n                            \n                                createchart\n                            \n                            \n                                createWaveChart\n                            \n                            \n                                formatTooltipLabel\n                            \n                            \n                                getdatacrypto\n                            \n                            \n                                ionViewWillEnter\n                            \n                            \n                                ionViewWillLeave\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                updatechart\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(currencypipe: CurrencyPipe, authservice: IAuthenticationService, activateroute: ActivatedRoute, cryptoservice: ICryptobaseService, translate: TranslateService, translation: TranslationService, alertcontroller: AlertController)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:36\n                            \n                        \n\n                \n                    \n                            Creates an instance of CryptoviewPage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        currencypipe\n                                                  \n                                                        \n                                                                    CurrencyPipe\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Pipe to format currency symbols.\n\n                                                        \n                                                \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service.\n\n                                                        \n                                                \n                                                \n                                                        activateroute\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Provides access to route parameters.\n\n                                                        \n                                                \n                                                \n                                                        cryptoservice\n                                                  \n                                                        \n                                                                    ICryptobaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Service to fetch crypto data.\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translation service for i18n.\n\n                                                        \n                                                \n                                                \n                                                        translation\n                                                  \n                                                        \n                                                                        TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Custom translation helper service.\n\n                                                        \n                                                \n                                                \n                                                        alertcontroller\n                                                  \n                                                        \n                                                                    AlertController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Ionic AlertController for dialogs.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changecurrency\n                        \n                    \n                \n            \n            \n                \n                        \n                    changecurrency()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:325\n                        \n                    \n\n\n            \n                \n                        Opens an alert to allow the user to change the displayed currency.\nUpdates the crypto data and chart accordingly.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createchart\n                        \n                    \n                \n            \n            \n                \ncreatechart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:123\n                        \n                    \n\n\n            \n                \n                        Creates the initial Chart.js line chart with price data for 1 day.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createWaveChart\n                        \n                    \n                \n            \n            \n                \ncreateWaveChart(list: number[], list2: string[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:168\n                        \n                    \n\n\n            \n                \n                        Creates a Chart.js line chart displaying the price data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                list\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of prices.\n\n                                            \n                                        \n                                        \n                                                list2\n                                            \n                                                        string[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Array of formatted date strings.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        formatTooltipLabel\n                        \n                    \n                \n            \n            \n                \nformatTooltipLabel(tooltipItem: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:315\n                        \n                    \n\n\n            \n                \n                        Formats the tooltip label in the chart.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                tooltipItem\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Tooltip item from Chart.js.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                Formatted string with price and currency symbol.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getdatacrypto\n                        \n                    \n                \n            \n            \n                \ngetdatacrypto()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:112\n                        \n                    \n\n\n            \n                \n                        Fetches cryptocurrency details by id and currency.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ionViewWillEnter\n                        \n                    \n                \n            \n            \n                \nionViewWillEnter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:96\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: called when the page is about to enter and become active.\nSets menu state, reads route parameters, initializes chart and data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ionViewWillLeave\n                        \n                    \n                \n            \n            \n                \nionViewWillLeave()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:156\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: called when the page is about to leave.\nCleans up the chart and removes the canvas element.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:304\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook: called when the component is destroyed.\nUnsubscribes all subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatechart\n                        \n                    \n                \n            \n            \n                \nupdatechart(number: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:62\n                        \n                    \n\n\n            \n                \n                        Updates the price chart based on the selected number of days.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                number\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number of days to display.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        chart\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :         AdvancedCrypto\n\n                    \n                \n                \n                    \n                        Default value : {id:'',name:'',symbol:'',image:'',currentPrice:0}\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"eur\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        days\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        percent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        suscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/cryptoview/cryptoview.page.ts:36\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Chart, registerables } from 'chart.js';\nimport { Subscription } from 'rxjs';\nimport { BackgraphbuttonDirective } from 'src/app/core/directives/backgraphbutton.directive';\nimport { AdvancedCrypto, CryptoGraphPrice } from 'src/app/core/models/Crypto.model';\nimport { CurrencyPipe } from 'src/app/core/pipes/currency.pipe';\nimport { AUTH_TOKEN, CRYPTO_SERVICE_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { TranslationService } from 'src/app/core/services/impl/translation.service';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\nimport { ICryptobaseService } from 'src/app/core/services/interfaces/crypto/Crypto-base-service.interface';\n\nChart.register(...registerables);\n\n/**\n * CryptoviewPage component.\n * \n * Displays detailed cryptocurrency information and a price history chart.\n * Supports changing currency display and time range for the price data.\n */\n@Component({\n  selector: 'app-cryptoview',\n  templateUrl: './cryptoview.page.html',\n  styleUrls: ['./cryptoview.page.scss'],\n  providers:[CurrencyPipe,BackgraphbuttonDirective],\n})\nexport class CryptoviewPage {\n  id:string=\"\"\n  currency:string=\"eur\"\n  crypto:AdvancedCrypto={id:'',name:'',symbol:'',image:'',currentPrice:0}\n  days:number=1\n  percent:number=0;\n  public chart: any;\n  private suscriptions: Subscription[] = [];\n\n  /**\n   * Creates an instance of CryptoviewPage.\n   * @param currencypipe Pipe to format currency symbols.\n   * @param authservice Authentication service.\n   * @param activateroute Provides access to route parameters.\n   * @param cryptoservice Service to fetch crypto data.\n   * @param translate Translation service for i18n.\n   * @param translation Custom translation helper service.\n   * @param alertcontroller Ionic AlertController for dialogs.\n   */\n  constructor(\n    private currencypipe:CurrencyPipe,\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    private activateroute:ActivatedRoute,\n    @Inject(CRYPTO_SERVICE_TOKEN) private cryptoservice:ICryptobaseService,\n    private translate: TranslateService,\n    private translation: TranslationService,\n    private alertcontroller:AlertController\n  ) { }\n\n  /**\n   * Updates the price chart based on the selected number of days.\n   * @param number Number of days to display.\n   */\n  updatechart(number:number) {\n    this.days=number\n    let list:number[]=[]\n    let list2: number[]=[]\n    this.suscriptions.push(this.cryptoservice.getPriceList(this.id,this.currency,number+\"\").subscribe({\n      next:(value)=>{\n          let valuexd=value as CryptoGraphPrice[]\n          list=valuexd.map(c=>c.price)\n          list2=valuexd.map(c=>c.date)\n          let date=list2.map(c=>{\n            let date= new Date(c)\n            const day = String(date.getDate()).padStart(2, '0');\n            const month = String(date.getMonth() + 1).padStart(2, '0');\n            const year = date.getFullYear();\n            const hours = String(date.getHours()).padStart(2, '0');\n            const minutes = String(date.getMinutes()).padStart(2, '0');\n            if(this.days{\n      this.id=params.get('id')??\"bitcoin\"\n      this.currency=params.get('currency')??\"eur\"\n    }))\n    if (this.chart) {\n      this.chart.destroy();\n    }\n    this.getdatacrypto()\n    this.createchart()\n  }\n\n  /**\n   * Fetches cryptocurrency details by id and currency.\n   */\n  getdatacrypto(){\n    this.suscriptions.push(this.cryptoservice.findbyId(this.id,this.currency).subscribe({\n      next:(value)=>{\n        this.crypto=value[0]\n      },\n    }))\n  }\n\n  /**\n   * Creates the initial Chart.js line chart with price data for 1 day.\n   */\n  createchart(){\n    let list:number[]=[]\n    let list2:number[]=[]\n    let date:string[]=[]\n    this.suscriptions.push(this.cryptoservice.getPriceList(this.id,this.currency,\"1\").subscribe({\n      next:(value)=>{\n          let valuexd=value as CryptoGraphPrice[]\n          list=valuexd.map(c=>c.price)\n          list2=valuexd.map(c=>c.date)\n          date=list2.map(c=>{\n            let date= new Date(c)\n            const day = String(date.getDate()).padStart(2, '0');\n            const month = String(date.getMonth() + 1).padStart(2, '0');\n            const year = date.getFullYear();\n            const hours = String(date.getHours()).padStart(2, '0');\n            const minutes = String(date.getMinutes()).padStart(2, '0');\n            \n            if(this.days document.getElementById('waveChart')).remove();\n  }\n\n  /**\n   * Creates a Chart.js line chart displaying the price data.\n   * @param list Array of prices.\n   * @param list2 Array of formatted date strings.\n   */\n  createWaveChart(list: number[], list2: string[]) {\n    let canvas = document.getElementById('waveChart') as HTMLCanvasElement;\n    if (!canvas) {\n      canvas = document.createElement('canvas');\n      canvas.id = 'waveChart'; \n      document.getElementById('chartcontainer')?.appendChild(canvas); \n    }\n    \n    const ctx = canvas.getContext('2d');\n    if (!ctx) {\n      console.error('Canvas context not found!');\n      return;\n    }\n    \n    this.chart = new Chart(ctx, {\n      type: 'line',\n      data: {\n        labels: list2,\n        datasets: [\n          {\n            label: '',\n            data: list,\n            borderColor: '#4caf50',\n            borderWidth: 3,\n            fill: true,\n            tension: 0.4,\n            backgroundColor: 'rgba(76, 175, 80, 0.2)',\n            pointRadius: 0,\n            pointHoverRadius: 6,\n            pointBackgroundColor: '#ffffff',\n            pointBorderColor: '#4caf50',\n          },\n        ],\n      },\n      options: {\n        responsive: true,\n        maintainAspectRatio: false,\n        plugins: {\n          legend: {\n            display: false,\n            position: 'top',\n            labels: {\n              font: {\n                size: 14,\n                family: 'Arial, sans-serif',\n                weight: 'bold',\n              },\n              color: '#333',\n            },\n          },\n          tooltip: {\n            enabled: true,\n            displayColors: false,\n            mode: 'nearest',\n            intersect: false,\n            callbacks: {\n              label: this.formatTooltipLabel.bind(this),\n              \n            },\n          },\n        },\n        interaction: {\n          mode: 'nearest',\n          intersect: false,\n          axis: 'x',\n        },\n        scales: {\n          x: {\n            title: {\n              display: false,\n              text: 'Fecha',\n              color: '#666',\n              font: {\n                size: 16,\n                family: 'Arial, sans-serif',\n              },\n            },\n            grid: {\n              display: false,\n            },\n            ticks: {\n              color: '#666',\n            },\n          },\n          y: {\n            title: {\n              display: false,\n              text: 'Precio ($)',\n              color: '#666',\n              font: {\n                size: 16,\n                family: 'Arial, sans-serif',\n              },\n            },\n            grid: {\n              color: 'rgba(200, 200, 200, 0.2)',\n            },\n            ticks: {\n              color: '#666',\n            },\n          },\n        },\n      },\n      plugins: [\n        {\n          id: 'verticalLine',\n          afterDraw: (chart) => {\n            const tooltip = chart.tooltip;\n            if (tooltip && tooltip.getActiveElements().length) {\n              const ctx = chart.ctx;\n              \n              const activeElement = tooltip.getActiveElements()[0];\n              const x = activeElement.element.x;\n              \n              const yTop = chart.scales['y'].top;\n              const yBottom = chart.scales['y'].bottom;\n              \n              ctx.save();\n              ctx.beginPath();\n              ctx.moveTo(x, yTop);\n              ctx.lineTo(x, yBottom);\n              ctx.lineWidth = 1;\n              ctx.strokeStyle = '#00eaff';\n              ctx.stroke();\n              ctx.restore();\n            }\n          },\n        }\n      ],\n    });\n  }\n\n  /**\n   * Lifecycle hook: called when the component is destroyed.\n   * Unsubscribes all subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(){\n    this.suscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n\n  /**\n   * Formats the tooltip label in the chart.\n   * @param tooltipItem Tooltip item from Chart.js.\n   * @returns Formatted string with price and currency symbol.\n   */\n  formatTooltipLabel(tooltipItem: any): string {\n    let number = tooltipItem.raw.toFixed(5);\n    let currencysymbol=this.currencypipe.transform(this.currency)\n    return `${number} ${currencysymbol}`;\n  }\n\n  /**\n   * Opens an alert to allow the user to change the displayed currency.\n   * Updates the crypto data and chart accordingly.\n   */\n  async changecurrency(){\n    const alert = await this.alertcontroller.create({\n      header: this.translate.instant('CRYPTOVIEW.SELECTCURRENCY'), \n      inputs: [\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('CURRENCY.DOLLAR')+\" ($)\",\n          value: 'usd', \n          checked: this.currency === 'usd', \n        },\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('CURRENCY.EURO')+\" (€)\",\n          value: 'eur', \n          checked: this.currency === 'eur',\n        },\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('CURRENCY.LIBRA')+\" (£)\",\n          value: 'gbp', \n          checked: this.currency === 'gbp',\n        }\n      ],\n      buttons: [\n        {\n          text: this.translate.instant('COMMON.CANCEL'), \n          role: 'cancel',\n        },\n        {\n          text: this.translate.instant('COMMON.SAVE'),\n          handler: (data) => {\n            if (data) {\n              if(data!=this.currency){\n                this.crypto={id:'',name:'',symbol:'',image:'',currentPrice:0}\n                this.currency=data\n                this.getdatacrypto()\n                this.updatechart(this.days)\n              }\n            }\n          },\n        },\n      ],\n    });\n    await alert.present();\n  }\n}\n    \n\n    \n        \n  \n    {{ 'COMMON.CRYPTO' | translate}}\n  \n\n\n\n  \n\n  \n    \n    {{crypto.name}}\n    ({{crypto.symbol.toUpperCase()}})\n    {{crypto.currentPrice }}{{currency | currencypipe}}\n    {{percent | percentformater}}\n  \n\n  \n  \n    \n      \n        {{'CRYPTOVIEW.1D'| translate}}\n      \n      \n        {{'CRYPTOVIEW.1W'| translate}}\n      \n      \n        {{'CRYPTOVIEW.1M'| translate}}\n      \n      \n        {{'CRYPTOVIEW.1Y'| translate}}\n      \n    \n    \n  \n\n  \n    \n      {{currency | currencypipe  }}\n    \n  \n\n  \n  \n  \n\n    \n\n    \n                \n                    ./cryptoview.page.scss\n                \n                ion-content {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-direction: column;\n}\n\n\n\n\n\n\n.crypto-symbol {\n  font-size: 1.2em;\n  color: #666;\n  margin: 5px 0;\n}\n\n.crypto-price {\n  font-size: 1.3em;\n  font-weight: bold;\n  color: #28a745;\n  margin: 10px 0;\n}\n\n\n.chart-container {\n  display: flex;\n  justify-content: center;\n}\n\n.canvas {\n  width: 100%!important;\n  max-width: 700px!important;\n  height: 450px!important;\n  border-radius: 8px!important;\n  display: block;\n  box-sizing: border-box;\n  margin: auto;\n}\n\n@media (max-width: 991px) {\n  .canvas {\n    max-width: 90vw!important;\n    margin: auto;\n    height: 400px!important;\n    border-radius: 8px!important;\n    display: block;\n    box-sizing: border-box;\n    margin: auto;\n  }\n  \n}\nion-buttons{\n  justify-content: right;\n}\nion-button.selected {\n  background-color: #4caf50;  /* Color de fondo para el botón seleccionado */\n  color: black;                /* Cambiar color de texto */\n  border-radius: 20px;\n}\n.sc-ion-buttons-md-s ion-button:not(.button-round) {\n  --border-radius: 20px;\n}\n\n.crypto-info {\n  text-align: center;\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);\n  margin: 20px 0;\n}\n\n.crypto-image {\n  display: block;\n  margin: auto;\n  max-width: 150px;\n  margin-bottom: 10px;\n  border-radius: 50%;\n  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);\n}\n\n.crypto-name {\n  font-size: 24px;\n  color: rgb(217, 206, 206);\n  font-weight: bold;\n  margin: 10px 0;\n}\n\n.crypto-symbol {\n  font-size: 18px;\n  color: rgb(217, 206, 206);\n  margin: 5px 0;\n}\n\n.crypto-price {\n  font-size: 20px;\n  color: #2e7d32;\n  font-weight: bold;\n  margin: 10px 0;\n}\n\n.crypto-percent {\n  font-size: 18px;\n  color: #e53935;\n  font-weight: bold;\n  margin-top: 5px;\n}\n\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ \\'COMMON.CRYPTO\\' | translate}}              {{crypto.name}}    ({{crypto.symbol.toUpperCase()}})    {{crypto.currentPrice }}{{currency | currencypipe}}    {{percent | percentformater}}                        {{\\'CRYPTOVIEW.1D\\'| translate}}                    {{\\'CRYPTOVIEW.1W\\'| translate}}                    {{\\'CRYPTOVIEW.1M\\'| translate}}                    {{\\'CRYPTOVIEW.1Y\\'| translate}}                            {{currency | currencypipe  }}            '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'CryptoviewPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoviewPageModule.html":{"url":"modules/CryptoviewPageModule.html","title":"module - CryptoviewPageModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoviewPageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CryptoviewPageModule\n\n\n\ncluster_CryptoviewPageModule_declarations\n\n\n\ncluster_CryptoviewPageModule_imports\n\n\n\n\nCryptoviewPage\n\nCryptoviewPage\n\n\n\nCryptoviewPageModule\n\nCryptoviewPageModule\n\nCryptoviewPageModule -->\n\nCryptoviewPage->CryptoviewPageModule\n\n\n\n\n\nBackgraphbuttonDirective\n\nBackgraphbuttonDirective\n\nCryptoviewPageModule -->\n\nBackgraphbuttonDirective->CryptoviewPageModule\n\n\n\n\n\nColorpercentDirective\n\nColorpercentDirective\n\nCryptoviewPageModule -->\n\nColorpercentDirective->CryptoviewPageModule\n\n\n\n\n\nCryptoviewPageRoutingModule\n\nCryptoviewPageRoutingModule\n\nCryptoviewPageModule -->\n\nCryptoviewPageRoutingModule->CryptoviewPageModule\n\n\n\n\n\nCurrencyPipe\n\nCurrencyPipe\n\nCryptoviewPageModule -->\n\nCurrencyPipe->CryptoviewPageModule\n\n\n\n\n\nPercentformaterPipe\n\nPercentformaterPipe\n\nCryptoviewPageModule -->\n\nPercentformaterPipe->CryptoviewPageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/cryptoview/cryptoview.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            CryptoviewPage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            BackgraphbuttonDirective\n                        \n                        \n                            ColorpercentDirective\n                        \n                        \n                            CryptoviewPageRoutingModule\n                        \n                        \n                            CurrencyPipe\n                        \n                        \n                            PercentformaterPipe\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule, PercentPipe } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { CryptoviewPageRoutingModule } from './cryptoview-routing.module';\n\nimport { CryptoviewPage } from './cryptoview.page';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { CurrencyPipe } from 'src/app/core/pipes/currency.pipe';\nimport { ButtonModule } from 'primeng/button';\nimport { ColorpercentDirective } from 'src/app/core/directives/colorpercent.directive';\nimport { PercentformaterPipe } from 'src/app/core/pipes/percentformater.pipe';\nimport { BackgraphbuttonDirective } from 'src/app/core/directives/backgraphbutton.directive';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    CryptoviewPageRoutingModule,\n    TranslateModule.forChild(),\n    CurrencyPipe,\n    PercentPipe,\n    PercentformaterPipe,\n    ColorpercentDirective,\n    BackgraphbuttonDirective\n],\n  declarations: [CryptoviewPage],\n})\nexport class CryptoviewPageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CryptoviewPageRoutingModule.html":{"url":"modules/CryptoviewPageRoutingModule.html","title":"module - CryptoviewPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    CryptoviewPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/cryptoview/cryptoview-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { CryptoviewPage } from './cryptoview.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: CryptoviewPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class CryptoviewPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/CurrencyPipe.html":{"url":"pipes/CurrencyPipe.html","title":"pipe - CurrencyPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  CurrencyPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/pipes/currency.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Pipe that transforms a currency code string into its corresponding currency symbol.\nSupported codes:\n\n\"gbp\" → \"£\"\n\"eur\" → \"€\"\nAny other value defaults to \"$\"\n\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        currencypipe\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/pipes/currency.pipe.ts:23\n                        \n                    \n\n\n            \n                \n                        Transforms a currency code string into the corresponding symbol.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Currency code string (e.g., \"gbp\", \"eur\").\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The currency symbol as a string.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Pipe that transforms a currency code string into its corresponding currency symbol.\n * \n * Supported codes:\n * - \"gbp\" → \"£\"\n * - \"eur\" → \"€\"\n * - Any other value defaults to \"$\"\n */\n@Pipe({\n  name: 'currencypipe',\n  standalone: true\n})\nexport class CurrencyPipe implements PipeTransform {\n\n  /**\n   * Transforms a currency code string into the corresponding symbol.\n   * \n   * @param value Currency code string (e.g., \"gbp\", \"eur\").\n   * @returns The currency symbol as a string.\n   */\n  transform(value: string): string {\n    if (value === \"gbp\") {\n      return \"£\";\n    } else if (value === \"eur\") {\n      return \"€\";\n    } else {\n      return \"$\";\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/CustomGenderComponent.html":{"url":"components/CustomGenderComponent.html","title":"component - CustomGenderComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  CustomGenderComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/custom-gender/custom-gender.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component that allows selecting a custom gender with support for\ninternationalization using ngx-translate.\nImplements ControlValueAccessor to integrate with Angular reactive\nand template-driven forms.\nListens to language change events to update options dynamically.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n                ControlValueAccessor\n                OnDestroy\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n            \n                providers\n                \n                                {\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CustomGenderComponent), multi: true\n}\n                \n            \n\n\n            \n                selector\n                app-custom-gender\n            \n\n\n\n            \n                styleUrls\n                ./custom-gender.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./custom-gender.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                isDisabled\n                            \n                            \n                                    Private\n                                languageChangeSubscription\n                            \n                            \n                                    Private\n                                onChange\n                            \n                            \n                                    Private\n                                onTouched\n                            \n                            \n                                options\n                            \n                            \n                                selectedoption\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onOptionChange\n                            \n                            \n                                registerOnChange\n                            \n                            \n                                registerOnTouched\n                            \n                            \n                                    Optional\n                                setDisabledState\n                            \n                            \n                                    Private\n                                updateOptions\n                            \n                            \n                                writeValue\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/custom-gender/custom-gender.component.ts:29\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/custom-gender/custom-gender.component.ts:111\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that cleans up subscriptions when the component is destroyed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/custom-gender/custom-gender.component.ts:44\n                        \n                    \n\n\n            \n                \n                        Initializes subscription to detect language changes and update options.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onOptionChange\n                        \n                    \n                \n            \n            \n                \nonOptionChange(value: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/custom-gender/custom-gender.component.ts:103\n                        \n                    \n\n\n            \n                \n                        Handles the change of the selected option by the user.\nNotifies the form control about the change.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Selected option\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnChange\n                        \n                    \n                \n            \n            \n                \nregisterOnChange(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/custom-gender/custom-gender.component.ts:78\n                        \n                    \n\n\n            \n                \n                        Registers the callback function to notify value changes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback that receives the new value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerOnTouched\n                        \n                    \n                \n            \n            \n                \nregisterOnTouched(fn: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/custom-gender/custom-gender.component.ts:86\n                        \n                    \n\n\n            \n                \n                        Registers the callback function to notify that the field was touched.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                fn\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Callback with no parameters\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        setDisabledState\n                        \n                    \n                \n            \n            \n                \nsetDisabledState(isDisabled: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/custom-gender/custom-gender.component.ts:94\n                        \n                    \n\n\n            \n                \n                        Changes the enabled/disabled state of the component.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                isDisabled\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Whether the component should be disabled\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        updateOptions\n                        \n                    \n                \n            \n            \n                \n                        \n                    updateOptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/custom-gender/custom-gender.component.ts:57\n                        \n                    \n\n\n            \n                \n                        Updates the options with the current translations.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        writeValue\n                        \n                    \n                \n            \n            \n                \nwriteValue(obj: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/custom-gender/custom-gender.component.ts:69\n                        \n                    \n\n\n            \n                \n                        Writes a new value to the component from the form control.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Gender value ('male', 'female', 'other')\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        isDisabled\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/custom-gender/custom-gender.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        languageChangeSubscription\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription | undefined\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/custom-gender/custom-gender.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onChange\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/custom-gender/custom-gender.component.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        onTouched\n                        \n                    \n                \n            \n                \n                    \n                        Type :         function\n\n                    \n                \n                \n                    \n                        Default value : () => {...}\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/custom-gender/custom-gender.component.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n    {value:\"male\", name: this.translate.instant(\"CRUDUSER.REGISTER.MALE\")},\n    {value:'female', name: this.translate.instant(\"CRUDUSER.REGISTER.FEMALE\")},\n    {value:'other',name: this.translate.instant(\"CRUDUSER.REGISTER.OTHER\")}\n  ]\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/custom-gender/custom-gender.component.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedoption\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/custom-gender/custom-gender.component.ts:52\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, forwardRef, OnDestroy, OnInit } from '@angular/core';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\n\n/**\n * Component that allows selecting a custom gender with support for\n * internationalization using ngx-translate.\n * \n * Implements ControlValueAccessor to integrate with Angular reactive\n * and template-driven forms.\n * \n * Listens to language change events to update options dynamically.\n */\n@Component({\n  selector: 'app-custom-gender',\n  templateUrl: './custom-gender.component.html',\n  styleUrls: ['./custom-gender.component.scss'],\n  providers:[{\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CustomGenderComponent),\n    multi: true\n  }]\n})\nexport class CustomGenderComponent  implements OnInit,ControlValueAccessor,OnDestroy {\n  private onChange: (value: any) => void = () => {};\n  private onTouched: () => void = () => {};\n  isDisabled = false;\n  private languageChangeSubscription: Subscription | undefined;\n\n  constructor(\n    private translate:TranslateService\n  ) { }\n  \n  options = [\n    {value:\"male\", name: this.translate.instant(\"CRUDUSER.REGISTER.MALE\")},\n    {value:'female', name: this.translate.instant(\"CRUDUSER.REGISTER.FEMALE\")},\n    {value:'other',name: this.translate.instant(\"CRUDUSER.REGISTER.OTHER\")}\n  ]\n\n  /**\n   * Initializes subscription to detect language changes and update options.\n   */\n  ngOnInit(): void {\n    this.languageChangeSubscription = this.translate.onLangChange.subscribe(() => {\n      this.updateOptions();\n      let find=this.options.find(c=>c.value==this.selectedoption.value)\n      this.selectedoption=find\n    });\n  }\n\n  selectedoption:any=''\n\n  /**\n   * Updates the options with the current translations.\n   */\n  private updateOptions(): void {\n    this.options = [\n      { value: 'male', name: this.translate.instant('CRUDUSER.REGISTER.MALE') },\n      { value: 'female', name: this.translate.instant('CRUDUSER.REGISTER.FEMALE') },\n      { value: 'other', name: this.translate.instant('CRUDUSER.REGISTER.OTHER') }\n    ];\n  }\n\n  /**\n   * Writes a new value to the component from the form control.\n   * @param obj Gender value ('male', 'female', 'other')\n   */\n  writeValue(obj: string): void {\n    let find=this.options.find(c=>c.value==obj)\n    this.selectedoption=find\n  }\n\n  /**\n   * Registers the callback function to notify value changes.\n   * @param fn Callback that receives the new value\n   */\n  registerOnChange(fn: any): void {\n    this.onChange=fn\n  }\n\n  /**\n   * Registers the callback function to notify that the field was touched.\n   * @param fn Callback with no parameters\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched=fn\n  }\n\n  /**\n   * Changes the enabled/disabled state of the component.\n   * @param isDisabled Whether the component should be disabled\n   */\n  setDisabledState?(isDisabled: boolean): void {\n    this.isDisabled=isDisabled\n  }\n\n  /**\n   * Handles the change of the selected option by the user.\n   * Notifies the form control about the change.\n   * @param value Selected option\n   */\n  onOptionChange(value: any): void {\n    this.selectedoption = value;\n    this.onChange(value);  \n  }\n\n  /**\n   * Lifecycle hook that cleans up subscriptions when the component is destroyed.\n   */\n  ngOnDestroy(): void {\n    if (this.languageChangeSubscription) {\n      this.languageChangeSubscription.unsubscribe();  \n    }\n  }\n}\n    \n\n    \n         \n    \n\n    \n                \n                    ./custom-gender.component.scss\n                \n                \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ' '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'CustomGenderComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Data.html":{"url":"interfaces/Data.html","title":"interface - Data","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Data\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            attributes\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attributes:         Attributes\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Attributes\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Data2.html":{"url":"interfaces/Data2.html","title":"interface - Data2","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Data2\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            attributes\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        attributes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        attributes:         Attributes2\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Attributes2\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Favoritelist.html":{"url":"interfaces/Favoritelist.html","title":"interface - Favoritelist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Favoritelist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            cryptos\n                                        \n                                \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            publishedAt\n                                        \n                                \n                                \n                                        \n                                            Title\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        cryptos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cryptos:         Crypto[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Crypto[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        publishedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        publishedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/FirebaseAuthMappingService.html":{"url":"classes/FirebaseAuthMappingService.html","title":"class - FirebaseAuthMappingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  FirebaseAuthMappingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service that maps Firebase authentication payloads and responses to the app's User model.\nImplements IAuthenticationMapping interface to convert between backend responses and frontend models.\n\n            \n\n\n            \n                Implements\n            \n            \n                            IAuthenticationMapping\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GetUserResponse\n                            \n                            \n                                Login\n                            \n                            \n                                LoginResponse\n                            \n                            \n                                Register\n                            \n                            \n                                RegisterResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GetUserResponse\n                        \n                    \n                \n            \n            \n                \nGetUserResponse(response: LoginResponse, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Maps a Firebase user retrieval response to a User model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            LoginResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firebase user response.\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAuthentication token (not currently used).\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string; email: string; token: string; username: string; gender: string; isAdmin: string; }\n\n                        \n                            \n                                User model populated with Firebase response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Login\n                        \n                    \n                \n            \n            \n                \nLogin(payload: LoginPayLoad)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts:56\n                        \n                    \n\n\n            \n                \n                        Maps a login payload to a User model.\nCurrently not implemented.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LoginPayLoad\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nLogin data from frontend.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginResponse\n                        \n                    \n                \n            \n            \n                \nLoginResponse(response: LoginResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts:75\n                        \n                    \n\n\n            \n                \n                        Maps a Firebase LoginResponse to a User model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            LoginResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firebase login response object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User\n\n                        \n                            \n                                User model populated with Firebase response data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Register\n                        \n                    \n                \n            \n            \n                \nRegister(payload: RegisterPayLoad)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Maps a registration payload to a User model.\nCurrently not implemented.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            RegisterPayLoad\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRegistration data from frontend.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RegisterResponse\n                        \n                    \n                \n            \n            \n                \nRegisterResponse(response: LoginResponse, name: string, gender: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts:93\n                        \n                    \n\n\n            \n                \n                        Maps a Firebase registration response to a User model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            LoginResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Firebase registration response.\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's username.\n\n\n                                            \n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser's gender.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     { id: string; email: string; token: string; username: string; gender: string; isAdmin: boolean; }\n\n                        \n                            \n                                User model populated with Firebase response data and provided user info.\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { LoginPayLoad, RegisterPayLoad } from \"src/app/core/models/auth.model\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { User } from \"src/app/core/models/User.model\";\n\n/**\n * Interface representing the response returned from Firebase authentication login.\n */\nexport interface LoginResponse {\n    uid: string\n    email: string\n    emailVerified: boolean\n    isAnonymous: boolean\n    providerData: providedata[]\n    stsTokenManager: StsTokenManager\n    createdAt: string\n    lastLoginAt: string\n    apiKey: string\n    appName: string,\n    accessToken:string,\n    isAdmin:string\n}\n\n/**\n * Interface representing the provider data associated with the user.\n */\nexport interface providedata {\n    providerId: string\n    uid: string\n    displayName: any\n    email: string\n    phoneNumber: any\n    photoURL: any\n}\n\n/**\n * Interface representing the Firebase security token manager info.\n */\nexport interface StsTokenManager {\n    refreshToken: string\n    accessToken: string\n    expirationTime: number\n}\n\n/**\n * Service that maps Firebase authentication payloads and responses to the app's User model.\n * \n * Implements IAuthenticationMapping interface to convert between backend responses and frontend models.\n */\nexport class FirebaseAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps a login payload to a User model.\n     * Currently not implemented.\n     * @param payload - Login data from frontend.\n     * @throws Error\n     */\n    Login(payload: LoginPayLoad):User {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps a registration payload to a User model.\n     * Currently not implemented.\n     * @param payload - Registration data from frontend.\n     * @throws Error\n     */\n    Register(payload: RegisterPayLoad) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps a Firebase LoginResponse to a User model.\n     * @param response - The Firebase login response object.\n     * @returns User model populated with Firebase response data.\n     */\n    LoginResponse(response: LoginResponse):User {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:\"xd\",\n            gender:\"male\",\n            isAdmin:response.isAdmin\n        }\n    }\n\n    /**\n     * Maps a Firebase registration response to a User model.\n     * @param response - The Firebase registration response.\n     * @param name - User's username.\n     * @param gender - User's gender.\n     * @returns User model populated with Firebase response data and provided user info.\n     */\n    RegisterResponse(response: LoginResponse,name:string,gender:string) {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:name,\n            gender:gender,\n            isAdmin:false\n        }\n    }\n\n    /**\n     * Maps a Firebase user retrieval response to a User model.\n     * @param response - The Firebase user response.\n     * @param token - Authentication token (not currently used).\n     * @returns User model populated with Firebase response data.\n     */\n    GetUserResponse(response: LoginResponse, token: string) {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:\"xd\",\n            gender:\"male\",\n            isAdmin:response.isAdmin\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseAuthenticationService.html":{"url":"injectables/FirebaseAuthenticationService.html","title":"injectable - FirebaseAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/firebase-authentication.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service to handle user authentication using Firebase.\nExtends BaseAuthenticationService and implements IFirebaseAuthentication interface.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseAutenticationService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authenticated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                Deleteuser\n                            \n                            \n                                    \n                                GetUser\n                            \n                            \n                                    \n                                Login\n                            \n                            \n                                    \n                                Logout\n                            \n                            \n                                    \n                                Register\n                            \n                            \n                                deleteToken\n                            \n                            \n                                getCurrency\n                            \n                            \n                                getId\n                            \n                            \n                                getToken\n                            \n                            \n                                removeId\n                            \n                            \n                                setCurrency\n                            \n                            \n                                setId\n                            \n                            \n                                setmenu\n                            \n                            \n                                setToken\n                            \n                            \n                                verificateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpclient: HttpClient, userapiurltoken: string, loginapitoken: string, registertoken: string, authenticationurltoken: string, mapping: IAuthenticationMapping, firebaseservice: IFirebaseMainService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/authentication/firebase-authentication.service.ts:20\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpclient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userapiurltoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginapitoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registertoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationurltoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mapping\n                                                  \n                                                        \n                                                                        IAuthenticationMapping\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        firebaseservice\n                                                  \n                                                        \n                                                                        IFirebaseMainService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Deleteuser\n                        \n                    \n                \n            \n            \n                \n                        \n                    Deleteuser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:117\n\n                        \n                    \n\n\n            \n                \n                        Deletes the currently authenticated user from Firebase Authentication.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNot used in this implementation.\n\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNot used in this implementation.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable completing on successful deletion or error.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        GetUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUser()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:97\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the currently authenticated user as an Observable.\nEmits User model if user is logged in, otherwise emits an error.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable representing the current user.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(authenticationlogin: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:73\n\n                        \n                    \n\n\n            \n                \n                        Logs in a user with email and password through Firebase Authentication.\nMaps Firebase response to app's User model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authenticationlogin\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nContains email and password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with logged-in user's info.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Logout\n                        \n                    \n                \n            \n            \n                \n                        \n                    Logout()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:134\n\n                        \n                    \n\n\n            \n                \n                        Logs out the current user by signing out from Firebase Authentication\nand updating the authentication status observable.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Register\n                        \n                    \n                \n            \n            \n                \n                        \n                    Register(authenticationregister: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:41\n\n                        \n                    \n\n\n            \n                \n                        Registers a new user in Firebase Authentication and Firestore.\nCreates the user using email and password,\nthen stores additional user info in Firestore 'persons' collection.\nMaps the Firebase response to app's User model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authenticationregister\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nContains email, password, username, gender.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable with the registered user's info.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteToken\n                        \n                    \n                \n            \n            \n                \ndeleteToken()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:78\n\n                        \n                    \n\n\n            \n                \n                        Removes the authentication token from localStorage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrency\n                        \n                    \n                \n            \n            \n                \ngetCurrency()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:127\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the preferred currency from localStorage.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The saved currency or defaults to \"usd\" if not set.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getId\n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:101\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user ID from localStorage.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The stored user ID or empty string if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getToken\n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:143\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the stored authentication token.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The token string or empty string if none stored.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeId\n                        \n                    \n                \n            \n            \n                \nremoveId()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:93\n\n                        \n                    \n\n\n            \n                \n                        Removes the user ID from localStorage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCurrency\n                        \n                    \n                \n            \n            \n                \nsetCurrency(currency: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:118\n\n                        \n                    \n\n\n            \n                \n                        Saves the preferred currency in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrency code (e.g. \"usd\").\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The saved currency.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setId\n                        \n                    \n                \n            \n            \n                \nsetId(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:86\n\n                        \n                    \n\n\n            \n                \n                        Saves the current user's ID in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser identifier.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setmenu\n                        \n                    \n                \n            \n            \n                \nsetmenu(val: boolean)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:109\n\n                        \n                    \n\n\n            \n                \n                        Updates the authentication state observable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTrue if authenticated, false otherwise.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setToken\n                        \n                    \n                \n            \n            \n                \nsetToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:71\n\n                        \n                    \n\n\n            \n                \n                        Saves the authentication token in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT or similar token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verificateUser\n                        \n                    \n                \n            \n            \n                \nverificateUser()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:135\n\n                        \n                    \n\n\n            \n                \n                        Returns an observable to monitor authentication state changes.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting true/false authentication status.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                        \n                            \n                                Inherited from         BaseAutenticationService\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseAutenticationService:23\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { IFirebaseAuthentication } from \"../../interfaces/authentication/firebase-authentication.interface\";\nimport { BaseAutenticationService } from \"./base-autentication.service\";\nimport { Observable } from \"rxjs\";\nimport { AUTENTICATION_URL_TOKEN, AUTH_MAPPING_TOKEN, FIREBASE_MAIN_SERVICE, LOGIN_API_URL_TOKEN, REGISTER_API_URL_TOKEN, USER_API_URL_TOKEN } from \"src/app/core/repositories/repository.tokens\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { getAuth, createUserWithEmailAndPassword, signInWithEmailAndPassword, onAuthStateChanged, deleteUser } from \"firebase/auth\";\nimport { doc, Firestore, setDoc } from \"firebase/firestore\";\nimport { User } from \"src/app/core/models/User.model\";\nimport { IFirebaseMainService } from \"../../interfaces/firebasemain.service.interface\";\n\n/**\n * Service to handle user authentication using Firebase.\n * Extends BaseAuthenticationService and implements IFirebaseAuthentication interface.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class FirebaseAuthenticationService extends BaseAutenticationService implements IFirebaseAuthentication {\n    constructor(\n        private httpclient:HttpClient,\n        @Inject(USER_API_URL_TOKEN) private userapiurltoken:string,\n        @Inject(LOGIN_API_URL_TOKEN) private loginapitoken:string,\n        @Inject(REGISTER_API_URL_TOKEN) private registertoken:string,\n        @Inject(AUTENTICATION_URL_TOKEN) private authenticationurltoken:string,\n        @Inject(AUTH_MAPPING_TOKEN) private mapping:IAuthenticationMapping,\n        @Inject(FIREBASE_MAIN_SERVICE) private firebaseservice:IFirebaseMainService\n    ){\n        super();\n    }\n\n    /**\n     * Registers a new user in Firebase Authentication and Firestore.\n     * Creates the user using email and password,\n     * then stores additional user info in Firestore 'persons' collection.\n     * Maps the Firebase response to app's User model.\n     * @param authenticationregister - Contains email, password, username, gender.\n     * @returns Observable with the registered user's info.\n     */\n    override Register(authenticationregister: any): Observable {\n        const auth = getAuth();\n        return new Observable ((observer)=>{\n            createUserWithEmailAndPassword(auth, authenticationregister.email, authenticationregister.password)\n            .then(async (userCredential) => {\n                const user = userCredential.user;\n\n                let firestore:Firestore=this.firebaseservice.getfirestore()\n                await setDoc(doc(firestore,\"persons\",userCredential.user.uid),{\n                    name:authenticationregister.username,\n                    email:authenticationregister.email,\n                    gender:authenticationregister.gender,\n                    image:\"\",\n                    isAdmin:false\n                })\n\n                observer.next(this.mapping.RegisterResponse(userCredential,authenticationregister.username,authenticationregister.gender))\n            })\n            .catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                observer.error(errorMessage)\n            });\n        })        \n    }\n\n    /**\n     * Logs in a user with email and password through Firebase Authentication.\n     * Maps Firebase response to app's User model.\n     * @param authenticationlogin - Contains email and password.\n     * @returns Observable with logged-in user's info.\n     */\n    override Login(authenticationlogin: any): Observable {\n        let response\n        const auth = getAuth();\n        return new Observable ((observador)=>{\n            signInWithEmailAndPassword(auth, authenticationlogin.email, authenticationlogin.password)\n            .then((userCredential) => {\n                const user = userCredential.user;\n                observador.next(this.mapping.LoginResponse(userCredential))\n                observador.complete()\n            })\n            .catch((error) => {\n                const errorCode = error.code;\n                const errorMessage = error.message;\n                observador.error(errorMessage)\n            });\n        }) \n        \n    }\n\n    /**\n     * Retrieves the currently authenticated user as an Observable.\n     * Emits User model if user is logged in, otherwise emits an error.\n     * @returns Observable representing the current user.\n     */\n    override GetUser(): Observable {\n        const auth = getAuth();\n        return new Observable ((observer)=>{\n            onAuthStateChanged(auth, (user) => {\n                if (user) {\n                    observer.next(this.mapping.GetUserResponse(user,\"\"))\n                    observer.complete()\n                } else {\n                    observer.error(new Error(\"there is no user loged\"))\n                }\n            });\n        })\n    }\n\n    /**\n     * Deletes the currently authenticated user from Firebase Authentication.\n     * @param token - Not used in this implementation.\n     * @param iduser - Not used in this implementation.\n     * @returns Observable completing on successful deletion or error.\n     */\n    override Deleteuser(token: string, iduser: string): Observable {\n        const auth = getAuth();\n        const user = auth.currentUser;\n        return new Observable ((observer)=>{\n            deleteUser(user!!).then(() => {\n                observer.next()\n                observer.complete()\n            }).catch((error) => {\n                observer.error(error)\n            });\n        })        \n    }\n\n    /**\n     * Logs out the current user by signing out from Firebase Authentication\n     * and updating the authentication status observable.\n     */\n    override Logout(): void {\n        const auth = getAuth();\n        this.setmenu(false)\n        auth.signOut()\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseMainService.html":{"url":"injectables/FirebaseMainService.html","title":"injectable - FirebaseMainService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseMainService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/firebasemain.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for initializing and providing access\nto the main Firebase app, Firestore database, and Firebase Functions.\nImplements the IFirebaseMainService interface.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                app\n                            \n                            \n                                    Private\n                                db\n                            \n                            \n                                    Private\n                                functions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getfirebaseApp\n                            \n                            \n                                getfirestore\n                            \n                            \n                                getFunctions\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(firebaseConfig: any)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/firebasemain.service.ts:19\n                            \n                        \n\n                \n                    \n                            Initializes Firebase app, Firestore, and Firebase Functions\nusing the provided Firebase configuration.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        firebaseConfig\n                                                  \n                                                        \n                                                                        any\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nConfiguration object for Firebase initialization.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getfirebaseApp\n                        \n                    \n                \n            \n            \n                \ngetfirebaseApp()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/firebasemain.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Returns the initialized Firebase app instance.\n\n\n                        \n                            Returns :     FirebaseApp\n\n                        \n                            \n                                FirebaseApp instance\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getfirestore\n                        \n                    \n                \n            \n            \n                \ngetfirestore()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/firebasemain.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Returns the initialized Firestore database instance.\n\n\n                        \n                            Returns :     Firestore\n\n                        \n                            \n                                Firestore instance\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFunctions\n                        \n                    \n                \n            \n            \n                \ngetFunctions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/firebasemain.service.ts:60\n                        \n                    \n\n\n            \n                \n                        Returns the initialized Firebase Functions instance.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Firebase Functions instance\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FirebaseApp\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/impl/firebasemain.service.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        db\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Firestore\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/impl/firebasemain.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        functions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/impl/firebasemain.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport { FIREBASE_CONFIG_TOKEN } from '../../repositories/repository.tokens';\nimport { FirebaseApp, initializeApp } from 'firebase/app';\nimport { Firestore, getFirestore } from 'firebase/firestore';\nimport { IFirebaseMainService } from '../interfaces/firebasemain.service.interface';\nimport { getFunctions } from 'firebase/functions';\n\n/**\n * Service responsible for initializing and providing access\n * to the main Firebase app, Firestore database, and Firebase Functions.\n * Implements the IFirebaseMainService interface.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseMainService implements IFirebaseMainService {\n  private app: FirebaseApp;\n  private db: Firestore;\n  private functions: any;\n\n  /**\n   * Initializes Firebase app, Firestore, and Firebase Functions\n   * using the provided Firebase configuration.\n   * \n   * @param firebaseConfig - Configuration object for Firebase initialization.\n   */\n  constructor(\n    @Inject(FIREBASE_CONFIG_TOKEN) private firebaseConfig: any\n  ) {\n    this.app = initializeApp(firebaseConfig);\n\n    this.db = getFirestore(this.app);\n\n    this.functions = getFunctions(this.app);\n  }\n\n  /**\n   * Returns the initialized Firebase app instance.\n   * \n   * @returns FirebaseApp instance\n   */\n  getfirebaseApp(): FirebaseApp {\n    return this.app;\n  }\n\n  /**\n   * Returns the initialized Firestore database instance.\n   * \n   * @returns Firestore instance\n   */\n  getfirestore(): Firestore {\n    return this.db;\n  }\n\n  /**\n   * Returns the initialized Firebase Functions instance.\n   * \n   * @returns Firebase Functions instance\n   */\n  getFunctions(): any {\n    return this.functions;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseMediaService.html":{"url":"injectables/FirebaseMediaService.html","title":"injectable - FirebaseMediaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseMediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/media/firebase-media.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for uploading media files to Firebase Storage.\nExtends the BaseMediaService abstract class.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseMediaService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadUrl: string, auth: IAuthenticationService, httpclient: HttpClient, firebasemainservice: IFirebaseMainService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/media/firebase-media.service.ts:24\n                            \n                        \n\n                \n                    \n                            Creates an instance of FirebaseMediaService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        uploadUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe URL endpoint token for upload API (injected).\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAuthentication service instance (injected).\n\n\n                                                        \n                                                \n                                                \n                                                        httpclient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular HttpClient for HTTP requests.\n\n\n                                                        \n                                                \n                                                \n                                                        firebasemainservice\n                                                  \n                                                        \n                                                                        IFirebaseMainService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nService to access Firebase app and Firestore (injected).\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(blob: Blob)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseMediaService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseMediaService:50\n\n                        \n                    \n\n\n            \n                \n                        Uploads a media Blob to Firebase Storage under 'uploads/' with a unique filename.\nUpon successful upload, updates the Firestore 'persons' collection document for the current user\nwith the new image download URL.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                blob\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe media file Blob to upload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an empty object currently. (Note: upload result is handled asynchronously inside onAuthStateChanged)\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport { BaseMediaService } from './base-media.service';\nimport { Observable, of } from 'rxjs';\nimport { AUTH_TOKEN, FIREBASE_MAIN_SERVICE, UPLOAD_API_URL_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { IAuthenticationService } from '../../interfaces/authentication/authentication.interface';\nimport { HttpClient } from '@angular/common/http';\nimport { IFirebaseMainService } from '../../interfaces/firebasemain.service.interface';\nimport { getAuth, onAuthStateChanged } from 'firebase/auth';\nimport { \n  getStorage, \n  ref, \n  uploadBytes,\n  getDownloadURL,\n} from \"firebase/storage\";\nimport { doc, updateDoc } from 'firebase/firestore';\n\n/**\n * Service for uploading media files to Firebase Storage.\n * Extends the BaseMediaService abstract class.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class FirebaseMediaService extends BaseMediaService {\n  /**\n   * Creates an instance of FirebaseMediaService.\n   * @param uploadUrl - The URL endpoint token for upload API (injected).\n   * @param auth - Authentication service instance (injected).\n   * @param httpclient - Angular HttpClient for HTTP requests.\n   * @param firebasemainservice - Service to access Firebase app and Firestore (injected).\n   */\n  constructor(\n    @Inject(UPLOAD_API_URL_TOKEN) private uploadUrl:string,\n    @Inject(AUTH_TOKEN) private auth:IAuthenticationService,\n    private httpclient:HttpClient,\n    @Inject (FIREBASE_MAIN_SERVICE) private firebasemainservice:IFirebaseMainService\n  ) \n  {\n    super()\n  }\n\n  /**\n   * Uploads a media Blob to Firebase Storage under 'uploads/' with a unique filename.\n   * Upon successful upload, updates the Firestore 'persons' collection document for the current user\n   * with the new image download URL.\n   * \n   * @param blob - The media file Blob to upload.\n   * @returns An Observable emitting an empty object currently. (Note: upload result is handled asynchronously inside onAuthStateChanged)\n   */\n  public override upload(blob: Blob): Observable {\n    let app=this.firebasemainservice.getfirebaseApp()\n    let storage=getStorage(app);\n    const auth = getAuth();\n    onAuthStateChanged(auth, async (user) => {\n      if(user){\n        const fileName = `${Date.now()}_${Math.random().toString(36).substring(2)}`;\n        const storageRef: any = ref(storage, `uploads/${fileName}`);\n        const metadata = {\n          contentType: blob.type,\n          customMetadata: {\n            'uploaded-by': user.uid || 'anonymous'\n          }\n        };\n        const uploadTask = await uploadBytes(storageRef, blob, metadata);\n        const downloadURL = await getDownloadURL(uploadTask.ref);\n        let firestore=this.firebasemainservice.getfirestore()\n        await updateDoc(doc(firestore,\"persons\",user.uid),{\n          image:downloadURL\n        })\n        let uploadedblob:any[]=[]\n        uploadedblob.push(downloadURL)\n      }else{\n        throw new Error('Method not implemented.');\n      }\n    })\n    return of({})\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FirebaseUserMapping.html":{"url":"injectables/FirebaseUserMapping.html","title":"injectable - FirebaseUserMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FirebaseUserMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Mapping service responsible for converting raw Firebase user data\ninto application models and vice versa.\nImplements IUserBaseMapping interface for user-related data transformation.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addcryptoresponse\n                            \n                            \n                                addcryptotodatabase\n                            \n                            \n                                addcryptotolist\n                            \n                            \n                                addlistUser\n                            \n                            \n                                addlistUserResponse\n                            \n                            \n                                deletecryptofromlist\n                            \n                            \n                                findcryptobyidresponse\n                            \n                            \n                                GetBasicUser\n                            \n                            \n                                GetListFromUser\n                            \n                            \n                                updatelistbody\n                            \n                            \n                                updateuserdata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptoresponse\n                        \n                    \n                \n            \n            \n                \naddcryptoresponse(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:87\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \naddcryptotodatabase(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:83\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotolist\n                        \n                    \n                \n            \n            \n                \naddcryptotolist(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:91\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistUser\n                        \n                    \n                \n            \n            \n                \naddlistUser(data: any, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistUserResponse\n                        \n                    \n                \n            \n            \n                \naddlistUserResponse(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:63\n                        \n                    \n\n\n            \n                \n                        Maps the response data when adding a new list for a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Raw response data from adding a list.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BasicList\n\n                        \n                            \n                                BasicList model constructed from the response.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletecryptofromlist\n                        \n                    \n                \n            \n            \n                \ndeletecryptofromlist(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:75\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findcryptobyidresponse\n                        \n                    \n                \n            \n            \n                \nfindcryptobyidresponse(data: any, idcrypto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:79\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBasicUser\n                        \n                    \n                \n            \n            \n                \nGetBasicUser(data: LoginResponse, name?: string, gender?: string, image?: string, isAdmin?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:109\n                        \n                    \n\n\n            \n                \n                        Constructs a BasicUser model from login response and optional user details.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            LoginResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    LoginResponse object containing Firebase authentication data.\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional username.\n\n                                            \n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional user gender.\n\n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional user image URL.\n\n                                            \n                                        \n                                        \n                                                isAdmin\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional flag indicating if the user has admin privileges.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BasicUser\n\n                        \n                            \n                                BasicUser model constructed from the provided data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetListFromUser\n                        \n                    \n                \n            \n            \n                \nGetListFromUser(data: rawbasiclist[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:35\n                        \n                    \n\n\n            \n                \n                        Maps an array of raw user lists from Firebase into CryptoList models.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            rawbasiclist[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Raw user list data array.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CryptoList[]\n\n                        \n                            \n                                Array of CryptoList objects mapped from the raw data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelistbody\n                        \n                    \n                \n            \n            \n                \nupdatelistbody(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:71\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateuserdata\n                        \n                    \n                \n            \n            \n                \nupdateuserdata(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts:95\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { CryptoList, BasicList } from \"src/app/core/models/CryptoList.model\";\nimport { LoginResponse } from \"src/app/core/services/impl/authentication/firebase-auth-mapping.service\";\n\nexport interface rawbasiclist {\n    id:string,\n    description: string,\n    title: string,\n    cryptos?:cryptosxd[]\n}\nexport interface cryptosxd {\n    id:string,\n    symbol: string\n    name: string\n}\n\n/**\n * Mapping service responsible for converting raw Firebase user data\n * into application models and vice versa.\n * \n * Implements IUserBaseMapping interface for user-related data transformation.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class FirebaseUserMapping implements IUserBaseMapping{\n    /**\n     * Maps an array of raw user lists from Firebase into CryptoList models.\n     * \n     * @param data Raw user list data array.\n     * @returns Array of CryptoList objects mapped from the raw data.\n     */\n    GetListFromUser(data: rawbasiclist[]): CryptoList[] {\n        let listafinal:CryptoList[]=data.map(c=>{\n            return {\n                id:c.id,\n                title:c.title,\n                description:c.description,\n                cryptos:c.cryptos?.map(x=>{\n                    return {\n                        id:x.id,\n                        symbol:x.symbol,\n                        name:x.name\n                    }\n                })??[]\n            }\n        })\n        return listafinal\n    }\n\n    addlistUser(data: any, iduser: string) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps the response data when adding a new list for a user.\n     * \n     * @param data Raw response data from adding a list.\n     * @returns BasicList model constructed from the response.\n     */\n    addlistUserResponse(data: any): BasicList {\n        return {\n            id:data.id,\n            title:data.title,\n            description:data.description\n        }\n    }\n\n    updatelistbody(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    deletecryptofromlist(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    findcryptobyidresponse(data: any, idcrypto: string) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptotodatabase(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptoresponse(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptotolist(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    updateuserdata(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Constructs a BasicUser model from login response and optional user details.\n     * \n     * @param data LoginResponse object containing Firebase authentication data.\n     * @param name Optional username.\n     * @param gender Optional user gender.\n     * @param image Optional user image URL.\n     * @param isAdmin Optional flag indicating if the user has admin privileges.\n     * @returns BasicUser model constructed from the provided data.\n     */\n    GetBasicUser(data: LoginResponse,name?:string,gender?:string,image?:string,isAdmin?:boolean):BasicUser {\n        return {\n            username:name!,\n            email:data.email,\n            id:data.uid,\n            gender:gender!,\n            img:image??\"\",\n            isAdmin:isAdmin??false\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Formats.html":{"url":"interfaces/Formats.html","title":"interface - Formats","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Formats\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            large\n                                        \n                                \n                                \n                                        \n                                            medium\n                                        \n                                \n                                \n                                        \n                                            small\n                                        \n                                \n                                \n                                        \n                                            thumbnail\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        large\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        large:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        medium\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        medium:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        small\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        small:         Small\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Small\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        thumbnail\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        thumbnail:         Thumbnail\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Thumbnail\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/FormularyComponent.html":{"url":"components/FormularyComponent.html","title":"component - FormularyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  FormularyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/formulary/formulary.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-formulary\n            \n\n\n\n            \n                styleUrls\n                ./formulary.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./formulary.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                Formulary\n                            \n                            \n                                passwordIcon\n                            \n                            \n                                passwordType\n                            \n                            \n                                    \n                                    Public\n                                typebackend\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                hideShowPassword\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                submitForm\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                type\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                emitter\n                            \n                        \n                    \n                \n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    email\n                                \n                                \n                                    password\n                                \n                                \n                                    username\n                                \n                                \n                                    gender\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(fbbuilder: FormBuilder, typebackend: string)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/formulary/formulary.component.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        fbbuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        typebackend\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        type\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"login\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/formulary/formulary.component.ts:25\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        user\n                    \n                \n                \n                    \n                        Type :         BasicUser\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/formulary/formulary.component.ts:26\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        emitter\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/formulary/formulary.component.ts:24\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        hideShowPassword\n                        \n                    \n                \n            \n            \n                \nhideShowPassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/formulary/formulary.component.ts:74\n                        \n                    \n\n\n            \n                \n                        Toggles password visibility between 'password' and 'text' input types.\nAlso toggles the password icon.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/formulary/formulary.component.ts:36\n                        \n                    \n\n\n            \n                \n                        Initializes the form controls and validators based on the type input.\nAlso pre-fills values for update mode and disables email input if using Firebase backend.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        submitForm\n                        \n                    \n                \n            \n            \n                \nsubmitForm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/formulary/formulary.component.ts:115\n                        \n                    \n\n\n            \n                \n                        Submits the form and emits an object with the user data depending on the form type.\n\nFor \"register\": emits { username, email, password, gender }\nFor \"login\": emits { email, password }\nFor \"update\": emits { email, username, gender }\n\nAlso resets form states to pristine and untouched after update.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        Formulary\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/formulary/formulary.component.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordIcon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eye-off'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/formulary/formulary.component.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password'\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/formulary/formulary.component.ts:67\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        typebackend\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(BACKEND_TOKEN)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/shared/formulary/formulary.component.ts:29\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        email\n                    \n                \n\n                \n                    \n                        getemail()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/formulary/formulary.component.ts:82\n                                \n                            \n                    \n                        \n                                Getter for the email form control.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        password\n                    \n                \n\n                \n                    \n                        getpassword()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/formulary/formulary.component.ts:89\n                                \n                            \n                    \n                        \n                                Getter for the password form control.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        username\n                    \n                \n\n                \n                    \n                        getusername()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/formulary/formulary.component.ts:96\n                                \n                            \n                    \n                        \n                                Getter for the username form control.\n\n\n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        gender\n                    \n                \n\n                \n                    \n                        getgender()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/formulary/formulary.component.ts:103\n                                \n                            \n                    \n                        \n                                Getter for the gender form control.\n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, EventEmitter, Inject, Input, OnInit, Output } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { BasicUser } from 'src/app/core/models/User.model';\nimport { BACKEND_TOKEN } from 'src/app/core/repositories/repository.tokens';\n\n@Component({\n  selector: 'app-formulary',\n  templateUrl: './formulary.component.html',\n  styleUrls: ['./formulary.component.scss'],\n})\n/**\n * Form component that handles user authentication and profile management.\n * Supports three modes controlled by the `type` input:\n * - \"login\": Form for user login with email and password fields.\n * - \"register\": Form for new user registration with username, email, password, and gender.\n * - \"update\": Form to update user information with username, email, and gender.\n * \n * Emits the form data through the `emitter` output when submitted.\n * \n * Disables email field when using Firebase backend during update mode.\n */\nexport class FormularyComponent  implements OnInit {\n  Formulary!: FormGroup;\n  @Output() emitter:EventEmitter =new EventEmitter()\n  @Input() type:string=\"login\"\n  @Input() user?:BasicUser\n  constructor(\n    private fbbuilder: FormBuilder,\n    @Inject(BACKEND_TOKEN) public typebackend:string\n  ) { }\n\n  /**\n   * Initializes the form controls and validators based on the `type` input.\n   * Also pre-fills values for update mode and disables email input if using Firebase backend.\n   */\n  ngOnInit() {\n    const emailPattern = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n    if(this.type==\"register\"){\n      this.Formulary = this.fbbuilder.group({\n        username:['',[Validators.required]],\n        email: ['', [Validators.required,Validators.pattern(emailPattern)]],\n        password: ['', [Validators.required,Validators.minLength(6)]],\n        gender:['',[Validators.required]]\n      });\n    }else if(this.type==\"login\"){\n      this.Formulary = this.fbbuilder.group({\n        email: ['', [Validators.required,Validators.pattern(emailPattern)]],\n        password: ['', [Validators.required,Validators.minLength(6)]],\n      });\n    }else if(this.type==\"update\"){\n      this.Formulary = this.fbbuilder.group({\n        username:['',[Validators.required]],\n        email: ['', [Validators.required,Validators.pattern(emailPattern)]],\n        gender:['',[Validators.required]]\n      });\n      this.Formulary.get('username')?.setValue(this.user?.username)\n      this.Formulary.get('email')?.setValue(this.user?.email)\n      this.Formulary.get('gender')?.setValue(this.user?.gender);\n\n      if(this.typebackend==\"firebase\"){\n        this.Formulary.get('email')?.disable()\n      }\n    }\n  }\n\n  passwordType: string = 'password';\n  passwordIcon: string = 'eye-off';\n\n  /**\n   * Toggles password visibility between 'password' and 'text' input types.\n   * Also toggles the password icon.\n   */\n  hideShowPassword() {\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n    this.passwordIcon = this.passwordIcon === 'eye-off' ? 'eye' : 'eye-off';\n  }\n\n  /**\n   * Getter for the email form control.\n   */\n  get email(){\n    return this.Formulary.controls['email'];\n  }\n\n  /**\n   * Getter for the password form control.\n   */\n  get password(){\n    return this.Formulary.controls['password'];\n  }\n\n  /**\n   * Getter for the username form control.\n   */\n  get username(){\n    return this.Formulary.controls['username'];\n  }\n\n  /**\n   * Getter for the gender form control.\n   */\n  get gender(){\n    return this.Formulary.controls['gender'];\n  }\n\n  /**\n   * Submits the form and emits an object with the user data depending on the form type.\n   * - For \"register\": emits { username, email, password, gender }\n   * - For \"login\": emits { email, password }\n   * - For \"update\": emits { email, username, gender }\n   * \n   * Also resets form states to pristine and untouched after update.\n   */\n  submitForm(){\n    if(this.type==\"register\"){\n      let username:string=this.Formulary.get(\"username\")?.value\n      let email:string=this.Formulary.get(\"email\")?.value\n      let password:string=this.Formulary.get(\"password\")?.value\n      let gender:any=this.Formulary.get(\"gender\")?.value\n      let userregister={username:username,email:email,password:password,gender:gender.value}\n      this.emitter.emit(userregister)\n    }else if(this.type==\"login\"){\n      let email:string=this.Formulary.get(\"email\")?.value\n      let password:string=this.Formulary.get(\"password\")?.value\n      let userlogin={email:email,password:password}\n      this.emitter.emit(userlogin)\n    }else if(this.type==\"update\"){\n      let username:string=this.Formulary.get(\"username\")?.value\n      let email:string=this.Formulary.get(\"email\")?.value\n      let gender:any=this.Formulary.get(\"gender\")?.value\n      let userupdate={email:email,username:username,gender:gender.value}\n      this.Formulary.markAsPristine();\n      this.Formulary.markAsUntouched();\n      this.emitter.emit(userupdate)\n    }\n  }\n}\n    \n\n    \n        \n  \n  \n  \n  \n    \n  \n  \n    {{'CRUDUSER.ERRORS.USERNAMEREQUIRED' | translate}}\n  \n  \n  \n  \n    \n  \n  \n  \n    {{'CRUDUSER.ERRORS.EMAILREQUIRED' | translate}}\n    {{'CRUDUSER.ERRORS.VALIDEDMAIL' | translate}}\n  \n\n  \n  \n    \n    \n      \n    \n  \n  \n    {{'CRUDUSER.ERRORS.PASSWORDREQUIRED' | translate}}\n    {{'CRUDUSER.ERRORS.PASSWORDMINLENGHT' | translate}}\n  \n\n  \n  \n    \n  \n  \n    {{'CRUDUSER.ERRORS.GENDERSELECTED' | translate}}\n  \n\n  \n    \n      \n        {{'CRUDUSER.REGISTER.REGISTER' | translate}}\n      \n      \n        {{'CRUDUSER.LOGIN.LOGIN' | translate}}\n      \n      \n        {{'CRUDUSER.UPDATE.UPDATEDATA' | translate}}\n      \n\n      {{'COMMON.OR' | translate}}\n      \n      \n      \n        {{'CRUDUSER.LOGIN.LOGIN' | translate}}\n      \n      \n        {{'CRUDUSER.REGISTER.REGISTER' | translate}}\n      \n      \n    \n  \n\n\n\n    \n\n    \n                \n                    ./formulary.component.scss\n                \n                .class-center {\n    display: flex;\n    justify-content: center; /* Centra horizontalmente */\n    align-items: center; /* Centra verticalmente */\n    height: 100vh; /* Asegura que el contenedor ocupe toda la altura de la pantalla */\n  }\n  \n  form {\n    width: 50%; /* Ancho del formulario (50% del ancho de la pantalla) */\n    min-width: 350px; /* Ancho mínimo del formulario para pantallas pequeñas */\n    margin: 0 auto; /* Esto asegura que se centre si el formulario no tiene `position: absolute` */\n    margin-top: 20px;\n  }\n  \n  ion-item {\n    margin-top: 10px !important; /* Espaciado superior en los items */\n  }\n  \n  ion-button {\n    margin-top: 10px !important; /* Espaciado superior en el botón */\n    margin-bottom: 10px !important; /* Espaciado inferior en el botón */\n  }\n  \n  ion-title {\n    text-align: center;\n  }\n  \n  #or{\n    display: block;\n  }\n  \n  ion-icon{\n    font-size: 24px\n  }\n  \n  .image{\n    border-radius: 20px !important;\n    overflow: hidden;\n    max-width: 300px;\n  }\n\n  p{\n    margin-left: 15px;\n  }\n  #valueaccessor{\n    margin-left: 15px;\n    margin-bottom: 5px;\n  }\n  \n  ion-content {\n    padding-top: 20px; /* Evita que el contenido quede pegado al header */\n    overflow-y: auto; /* Permite que el contenido sea desplazable si es necesario */\n  }\n  \n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '                    {{\\'CRUDUSER.ERRORS.USERNAMEREQUIRED\\' | translate}}                      {{\\'CRUDUSER.ERRORS.EMAILREQUIRED\\' | translate}}    {{\\'CRUDUSER.ERRORS.VALIDEDMAIL\\' | translate}}                                {{\\'CRUDUSER.ERRORS.PASSWORDREQUIRED\\' | translate}}    {{\\'CRUDUSER.ERRORS.PASSWORDMINLENGHT\\' | translate}}                  {{\\'CRUDUSER.ERRORS.GENDERSELECTED\\' | translate}}                      {{\\'CRUDUSER.REGISTER.REGISTER\\' | translate}}                    {{\\'CRUDUSER.LOGIN.LOGIN\\' | translate}}                    {{\\'CRUDUSER.UPDATE.UPDATEDATA\\' | translate}}            {{\\'COMMON.OR\\' | translate}}                          {{\\'CRUDUSER.LOGIN.LOGIN\\' | translate}}                    {{\\'CRUDUSER.REGISTER.REGISTER\\' | translate}}                  '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'FormularyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GetAllList.html":{"url":"interfaces/GetAllList.html","title":"interface - GetAllList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GetAllList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            blocked\n                                        \n                                \n                                \n                                        \n                                            confirmed\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            favoritelists\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        blocked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        confirmed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        confirmed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        favoritelists\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        favoritelists:         Favoritelist[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Favoritelist[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/HomePage.html":{"url":"components/HomePage.html","title":"component - HomePage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  HomePage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/General/home/home.page.ts\n\n\n\n    \n        Description\n    \n    \n        HomePage component.\nDisplays a paginated list of cryptocurrencies in the selected currency.\nSupports infinite scrolling to load more data.\nAllows user to change currency via an alert dialog.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-home\n            \n\n\n\n            \n                styleUrls\n                home.page.scss\n            \n\n\n\n            \n                templateUrl\n                home.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                crypto\n                            \n                            \n                                currency\n                            \n                            \n                                page\n                            \n                            \n                                perpage\n                            \n                            \n                                    Private\n                                suscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                changecurrency\n                            \n                            \n                                ionViewWillEnter\n                            \n                            \n                                loadData\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                onIonInfinite\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authservice: IAuthenticationService, translate: TranslateService, translation: TranslationService, userservice: IUserbaseService, cryptoservice: ICryptobaseService, alertcontroller: AlertController)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/General/home/home.page.ts:31\n                            \n                        \n\n                \n                    \n                            Creates an instance of HomePage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service for user and session data\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ngx-translate service for internationalization\n\n                                                        \n                                                \n                                                \n                                                        translation\n                                                  \n                                                        \n                                                                        TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Custom translation helper service\n\n                                                        \n                                                \n                                                \n                                                        userservice\n                                                  \n                                                        \n                                                                    IUserbaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service for fetching user data\n\n                                                        \n                                                \n                                                \n                                                        cryptoservice\n                                                  \n                                                        \n                                                                    ICryptobaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Crypto service to fetch cryptocurrency data\n\n                                                        \n                                                \n                                                \n                                                        alertcontroller\n                                                  \n                                                        \n                                                                    AlertController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Ionic AlertController to show dialogs\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        changecurrency\n                        \n                    \n                \n            \n            \n                \n                        \n                    changecurrency()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/home/home.page.ts:115\n                        \n                    \n\n\n            \n                \n                        Opens a dialog for the user to change the currency.\nIf a different currency is selected, resets pagination and reloads data.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ionViewWillEnter\n                        \n                    \n                \n            \n            \n                \nionViewWillEnter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/home/home.page.ts:65\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook runs every time the view is about to enter.\nRefreshes user data and reloads crypto list if currency changed.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadData\n                        \n                    \n                \n            \n            \n                \nloadData(notify: HTMLIonInfiniteScrollElement | null)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/home/home.page.ts:82\n                        \n                    \n\n\n            \n                \n                        Loads paginated cryptocurrency data for the current page and currency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                notify\n                                            \n                                                        HTMLIonInfiniteScrollElement | null\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    null\n                                            \n\n                                            \n                                                    Optional infinite scroll element to complete after load\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/home/home.page.ts:105\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook runs when component is destroyed.\nUnsubscribes all subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/home/home.page.ts:55\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook runs once after component initialization.\nInitializes currency and loads first page of crypto data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onIonInfinite\n                        \n                    \n                \n            \n            \n                \nonIonInfinite($event: IonInfiniteScrollCustomEvent)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/home/home.page.ts:97\n                        \n                    \n\n\n            \n                \n                        Event handler for Ionic infinite scroll.\nLoads more data when user scrolls down.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                $event\n                                            \n                                                        IonInfiniteScrollCustomEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        crypto\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AdvancedCrypto[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/home/home.page.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"usd\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/home/home.page.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        page\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 1\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/home/home.page.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        perpage\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 250\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/home/home.page.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        suscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/home/home.page.ts:31\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { AlertController } from '@ionic/angular';\nimport { IonInfiniteScrollCustomEvent } from '@ionic/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\nimport { AdvancedCrypto, BasicCrypto } from 'src/app/core/models/Crypto.model';\nimport { User } from 'src/app/core/models/User.model';\nimport { AUTH_TOKEN, CRYPTO_SERVICE_TOKEN, USER_SERVICE_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { TranslationService } from 'src/app/core/services/impl/translation.service';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\nimport { ICryptobaseService } from 'src/app/core/services/interfaces/crypto/Crypto-base-service.interface';\nimport { IUserbaseService } from 'src/app/core/services/interfaces/user/User-base-service.interface';\n\n/**\n * HomePage component.\n * \n * Displays a paginated list of cryptocurrencies in the selected currency.\n * Supports infinite scrolling to load more data.\n * Allows user to change currency via an alert dialog.\n */\n@Component({\n  selector: 'app-home',\n  templateUrl: 'home.page.html',\n  styleUrls: ['home.page.scss'],\n})\nexport class HomePage {\n  public crypto:AdvancedCrypto[]=[]\n  page:number=1;\n  perpage:number=250;\n  currency:string=\"usd\"\n  private suscriptions:Subscription[]=[]\n\n  /**\n   * Creates an instance of HomePage.\n   * @param authservice Authentication service for user and session data\n   * @param translate ngx-translate service for internationalization\n   * @param translation Custom translation helper service\n   * @param userservice User service for fetching user data\n   * @param cryptoservice Crypto service to fetch cryptocurrency data\n   * @param alertcontroller Ionic AlertController to show dialogs\n   */\n  constructor(\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    private translate: TranslateService,\n    private translation: TranslationService,\n    @Inject(USER_SERVICE_TOKEN) private userservice:IUserbaseService,\n    @Inject(CRYPTO_SERVICE_TOKEN) private cryptoservice:ICryptobaseService,\n    private alertcontroller:AlertController\n  ) { }\n\n  /**\n   * Lifecycle hook runs once after component initialization.\n   * Initializes currency and loads first page of crypto data.\n   */\n  ngOnInit(){\n    this.currency=this.authservice.getCurrency()\n    this.authservice.setmenu(true)\n    this.loadData()\n  }\n\n  /**\n   * Lifecycle hook runs every time the view is about to enter.\n   * Refreshes user data and reloads crypto list if currency changed.\n   */\n  ionViewWillEnter(){\n    this.suscriptions.push(this.userservice.GetBasicUser().subscribe())\n    this.authservice.setmenu(true)\n    \n    if(this.authservice.getCurrency()!=this.currency){\n      this.currency=this.authservice.getCurrency()\n      this.page=1\n      this.crypto=[]\n      this.loadData()\n    }\n    \n  }\n\n  /**\n   * Loads paginated cryptocurrency data for the current page and currency.\n   * @param notify Optional infinite scroll element to complete after load\n   */\n  loadData(notify: HTMLIonInfiniteScrollElement | null = null){\n    this.suscriptions.push(this.cryptoservice.getAllPaginated(this.page,this.perpage,this.currency).subscribe({\n      next:(value)=>{\n          this.crypto.push(...value)\n          this.page+=1;\n          notify?.complete()\n      },\n    }))\n  }\n\n  /**\n   * Event handler for Ionic infinite scroll.\n   * Loads more data when user scrolls down.\n   * @param event IonInfiniteScrollCustomEvent fired by infinite scroll\n   */\n  onIonInfinite($event: IonInfiniteScrollCustomEvent) {\n    this.loadData($event.target)\n  }\n\n  /**\n   * Lifecycle hook runs when component is destroyed.\n   * Unsubscribes all subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(){\n    this.suscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n\n  /**\n   * Opens a dialog for the user to change the currency.\n   * If a different currency is selected, resets pagination and reloads data.\n   */\n  async changecurrency(){\n    const alert = await this.alertcontroller.create({\n      header: this.translate.instant('CRYPTOVIEW.SELECTCURRENCY'), \n      inputs: [\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('CURRENCY.DOLLAR')+\" ($)\",\n          value: 'usd', \n          checked: this.currency === 'usd', \n        },\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('CURRENCY.EURO')+\" (€)\",\n          value: 'eur', \n          checked: this.currency === 'eur',\n        },\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('CURRENCY.LIBRA')+\" (£)\",\n          value: 'gbp', \n          checked: this.currency === 'gbp',\n        }\n      ],\n      buttons: [\n        {\n          text: this.translate.instant('COMMON.CANCEL'), \n          role: 'cancel',\n        },\n        {\n          text: this.translate.instant('COMMON.SAVE'),\n          handler: (data) => {\n            if (data) {\n              if(data!=this.currency){\n                this.page=0;\n                this.crypto=[]\n                this.currency=data\n                this.loadData()\n              }\n            }\n          },\n        },\n      ],\n    });\n    await alert.present();\n  }\n}\n    \n\n    \n        \n\n\n  \n    \n      {{'HOME.HOME' | translate}}\n    \n  \n\n\n\n  \n    people\n  \n-->\n\n\n  \n  \n  \n     \n      \n    \n  \n\n  \n    \n      {{currency | currencypipe  }}\n    \n  \n\n  \n    \n  \n  \n\n    \n\n    \n                \n                    home.page.scss\n                \n                \n\n#container strong {\n  font-size: 20px;\n  line-height: 26px;\n}\n\n#container p {\n  font-size: 16px;\n  line-height: 22px;\n\n  color: #8c8c8c;\n\n  margin: 0;\n}\n\n#container a {\n  text-decoration: none;\n}\n\n\n\n\n.grid-container {\n  display: grid;\n  grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); /* Se ajusta automáticamente */\n  gap: 16px; /* Espacio entre los elementos */\n  padding: 16px; /* Espaciado alrededor de la cuadrícula */\n}\n\n.grid-item {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '            {{\\'HOME.HOME\\' | translate}}            people  -->                                   {{currency | currencypipe  }}                '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'HomePage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomePageModule.html":{"url":"modules/HomePageModule.html","title":"module - HomePageModule","body":"\n                   \n\n\n\n\n    Modules\n    HomePageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_imports\n\n\n\ncluster_HomePageModule_declarations\n\n\n\n\nHomePage\n\nHomePage\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\nCurrencyPipe\n\nCurrencyPipe\n\nHomePageModule -->\n\nCurrencyPipe->HomePageModule\n\n\n\n\n\nHomePageRoutingModule\n\nHomePageRoutingModule\n\nHomePageModule -->\n\nHomePageRoutingModule->HomePageModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nHomePageModule -->\n\nSharedModule->HomePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/home/home.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            HomePage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            CurrencyPipe\n                        \n                        \n                            HomePageRoutingModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { IonicModule } from '@ionic/angular';\nimport { FormsModule } from '@angular/forms';\nimport { HomePage } from './home.page';\nimport { CurrencyPipe } from 'src/app/core/pipes/currency.pipe';\n\nimport { HomePageRoutingModule } from './home-routing.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SharedModule } from 'src/app/shared/shared.module';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    HomePageRoutingModule,\n    TranslateModule.forChild(),\n    SharedModule,\n    CurrencyPipe\n  ],\n  declarations: [HomePage]\n})\nexport class HomePageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HomePageRoutingModule.html":{"url":"modules/HomePageRoutingModule.html","title":"module - HomePageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    HomePageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/home/home-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { HomePage } from './home.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: HomePage,\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class HomePageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthenticationMapping.html":{"url":"interfaces/IAuthenticationMapping.html","title":"interface - IAuthenticationMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthenticationMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/authentication/auth-mapping.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface defining the contract for authentication data mapping\nbetween the app's authentication payloads/responses and backend formats.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        GetUserResponse\n                                    \n                                \n                                \n                                    \n                                        Login\n                                    \n                                \n                                \n                                    \n                                        LoginResponse\n                                    \n                                \n                                \n                                    \n                                        Register\n                                    \n                                \n                                \n                                    \n                                        RegisterResponse\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GetUserResponse\n                        \n                    \n                \n            \n            \n                \nGetUserResponse(response: any, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/auth-mapping.interface.ts:51\n                        \n                    \n\n\n            \n                \n                        Maps the backend user response to the app's user model,\nincluding the authentication token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRaw user data from backend.\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAuthentication token string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Mapped user object for the app.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Login\n                        \n                    \n                \n            \n            \n                \nLogin(payload: LoginPayLoad)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/auth-mapping.interface.ts:14\n                        \n                    \n\n\n            \n                \n                        Maps the app's login payload to the backend login request format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LoginPayLoad\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nLogin data including email and password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Backend-specific login request object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginResponse\n                        \n                    \n                \n            \n            \n                \nLoginResponse(response: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/auth-mapping.interface.ts:30\n                        \n                    \n\n\n            \n                \n                        Maps the backend login response to the app's user model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRaw response from backend login API.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Mapped user object for the app.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Register\n                        \n                    \n                \n            \n            \n                \nRegister(payload: RegisterPayLoad)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/auth-mapping.interface.ts:22\n                        \n                    \n\n\n            \n                \n                        Maps the app's register payload to the backend registration request format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            RegisterPayLoad\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRegistration data including username, email, password, etc.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Backend-specific registration request object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RegisterResponse\n                        \n                    \n                \n            \n            \n                \nRegisterResponse(response: any, name?: string, gender?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/auth-mapping.interface.ts:41\n                        \n                    \n\n\n            \n                \n                        Maps the backend registration response to the app's user model.\nOptionally takes name and gender for additional processing.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRaw response from backend registration API.\n\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional user name.\n\n\n                                            \n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional user gender.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Mapped user object for the app.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { LoginPayLoad, RegisterPayLoad } from \"../../../models/auth.model\"\n\n/**\n * Interface defining the contract for authentication data mapping\n * between the app's authentication payloads/responses and backend formats.\n */\nexport interface IAuthenticationMapping{\n    /**\n     * Maps the app's login payload to the backend login request format.\n     * \n     * @param payload - Login data including email and password.\n     * @returns Backend-specific login request object.\n     */\n    Login(payload:LoginPayLoad):any\n\n    /**\n     * Maps the app's register payload to the backend registration request format.\n     * \n     * @param payload - Registration data including username, email, password, etc.\n     * @returns Backend-specific registration request object.\n     */\n    Register(payload:RegisterPayLoad):any\n\n    /**\n     * Maps the backend login response to the app's user model.\n     * \n     * @param response - Raw response from backend login API.\n     * @returns Mapped user object for the app.\n     */\n    LoginResponse(response:any):any\n\n    /**\n     * Maps the backend registration response to the app's user model.\n     * Optionally takes name and gender for additional processing.\n     * \n     * @param response - Raw response from backend registration API.\n     * @param name - Optional user name.\n     * @param gender - Optional user gender.\n     * @returns Mapped user object for the app.\n     */\n    RegisterResponse(response:any,name?:string,gender?:string):any\n\n    /**\n     * Maps the backend user response to the app's user model,\n     * including the authentication token.\n     * \n     * @param response - Raw user data from backend.\n     * @param token - Authentication token string.\n     * @returns Mapped user object for the app.\n     */\n    GetUserResponse(response:any,token:string):any\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IAuthenticationService.html":{"url":"interfaces/IAuthenticationService.html","title":"interface - IAuthenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IAuthenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/authentication/authentication.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface defining the contract for authentication service operations.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        deleteToken\n                                    \n                                \n                                \n                                    \n                                        Deleteuser\n                                    \n                                \n                                \n                                    \n                                        getCurrency\n                                    \n                                \n                                \n                                    \n                                        getId\n                                    \n                                \n                                \n                                    \n                                        getToken\n                                    \n                                \n                                \n                                    \n                                        GetUser\n                                    \n                                \n                                \n                                    \n                                        Login\n                                    \n                                \n                                \n                                    \n                                        Logout\n                                    \n                                \n                                \n                                    \n                                        Register\n                                    \n                                \n                                \n                                    \n                                        removeId\n                                    \n                                \n                                \n                                    \n                                        setCurrency\n                                    \n                                \n                                \n                                    \n                                        setId\n                                    \n                                \n                                \n                                    \n                                        setmenu\n                                    \n                                \n                                \n                                    \n                                        setToken\n                                    \n                                \n                                \n                                    \n                                        verificateUser\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deleteToken\n                        \n                    \n                \n            \n            \n                \ndeleteToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:69\n                        \n                    \n\n\n            \n                \n                        Deletes the stored authentication token.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Deleteuser\n                        \n                    \n                \n            \n            \n                \nDeleteuser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:36\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID with provided authentication token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAuthentication token.\n\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nID of the user to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting any server response.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrency\n                        \n                    \n                \n            \n            \n                \ngetCurrency()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:84\n                        \n                    \n\n\n            \n                \n                        Retrieves the preferred currency.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The currency code string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getId\n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:110\n                        \n                    \n\n\n            \n                \n                        Retrieves the stored user ID.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The user ID string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getToken\n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:91\n                        \n                    \n\n\n            \n                \n                        Retrieves the stored authentication token.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The token string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetUser\n                        \n                    \n                \n            \n            \n                \nGetUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:43\n                        \n                    \n\n\n            \n                \n                        Retrieves the current authenticated user.\n\n\n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the User.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Login\n                        \n                    \n                \n            \n            \n                \nLogin(authenticationlogin: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:14\n                        \n                    \n\n\n            \n                \n                        Performs user login with given credentials.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authenticationlogin\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nLogin data object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the authenticated User.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Logout\n                        \n                    \n                \n            \n            \n                \nLogout()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:19\n                        \n                    \n\n\n            \n                \n                        Logs out the current user.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Register\n                        \n                    \n                \n            \n            \n                \nRegister(authenticationregister: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:27\n                        \n                    \n\n\n            \n                \n                        Registers a new user with given registration data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authenticationregister\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nRegistration data object.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the registered User.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeId\n                        \n                    \n                \n            \n            \n                \nremoveId()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:103\n                        \n                    \n\n\n            \n                \n                        Removes the stored user ID.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCurrency\n                        \n                    \n                \n            \n            \n                \nsetCurrency(currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:77\n                        \n                    \n\n\n            \n                \n                        Sets the preferred currency.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrency code string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The set currency string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setId\n                        \n                    \n                \n            \n            \n                \nsetId(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:98\n                        \n                    \n\n\n            \n                \n                        Stores the user ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser ID string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setmenu\n                        \n                    \n                \n            \n            \n                \nsetmenu(val: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:57\n                        \n                    \n\n\n            \n                \n                        Sets the menu visibility or state.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nBoolean value to set menu state.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setToken\n                        \n                    \n                \n            \n            \n                \nsetToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:64\n                        \n                    \n\n\n            \n                \n                        Stores the authentication token.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAuthentication token string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verificateUser\n                        \n                    \n                \n            \n            \n                \nverificateUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/authentication/authentication.interface.ts:50\n                        \n                    \n\n\n            \n                \n                        Verifies if the user session is valid.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting a boolean indicating validity.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from \"rxjs\"\nimport { User } from \"src/app/core/models/User.model\"\n\n/**\n * Interface defining the contract for authentication service operations.\n */\nexport interface IAuthenticationService{\n    /**\n     * Performs user login with given credentials.\n     * \n     * @param authenticationlogin - Login data object.\n     * @returns Observable emitting the authenticated User.\n     */\n    Login(authenticationlogin:any):Observable\n\n    /**\n     * Logs out the current user.\n     */\n    Logout():void\n\n    /**\n     * Registers a new user with given registration data.\n     * \n     * @param authenticationregister - Registration data object.\n     * @returns Observable emitting the registered User.\n     */\n    Register(authenticationregister:any):Observable\n\n    /**\n     * Deletes a user by ID with provided authentication token.\n     * \n     * @param token - Authentication token.\n     * @param iduser - ID of the user to delete.\n     * @returns Observable emitting any server response.\n     */\n    Deleteuser(token: string,iduser:string): Observable \n\n    /**\n     * Retrieves the current authenticated user.\n     * \n     * @returns Observable emitting the User.\n     */\n    GetUser():Observable\n\n    /**\n     * Verifies if the user session is valid.\n     * \n     * @returns Observable emitting a boolean indicating validity.\n     */\n    verificateUser():Observable\n\n    /**\n     * Sets the menu visibility or state.\n     * \n     * @param val - Boolean value to set menu state.\n     */\n    setmenu(val:boolean):void\n\n    /**\n     * Stores the authentication token.\n     * \n     * @param token - Authentication token string.\n     */\n    setToken(token:string):void\n\n    /**\n     * Deletes the stored authentication token.\n     */\n    deleteToken():void\n\n    /**\n     * Sets the preferred currency.\n     * \n     * @param currency - Currency code string.\n     * @returns The set currency string.\n     */\n    setCurrency(currency:string):string\n\n    /**\n     * Retrieves the preferred currency.\n     * \n     * @returns The currency code string.\n     */\n    getCurrency():string\n\n    /**\n     * Retrieves the stored authentication token.\n     * \n     * @returns The token string.\n     */\n    getToken():string;\n\n    /**\n     * Stores the user ID.\n     * \n     * @param id - User ID string.\n     */\n    setId(id:string):void\n\n    /**\n     * Removes the stored user ID.\n     */\n    removeId():void\n\n    /**\n     * Retrieves the stored user ID.\n     * \n     * @returns The user ID string.\n     */\n    getId():string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICoinGeko.html":{"url":"interfaces/ICoinGeko.html","title":"interface - ICoinGeko","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICoinGeko\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/interfaces/crypto/CoinGeko.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            ICryptoBase\n            \n\n\n\n\n    \n\n\n    \n        import { BasicCrypto } from \"../../../models/Crypto.model\";\nimport { ICryptoBase } from \"./CryptoBase.interface\";\n\nexport interface ICoinGeko extends ICryptoBase{\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICryptoBase.html":{"url":"interfaces/ICryptoBase.html","title":"interface - ICryptoBase","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICryptoBase\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/interfaces/crypto/CryptoBase.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Generic interface for basic cryptocurrency operations.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findbyId\n                                    \n                                \n                                \n                                    \n                                        getAllPaginated\n                                    \n                                \n                                \n                                    \n                                        getAllSimple\n                                    \n                                \n                                \n                                    \n                                        getPriceList\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findbyId\n                        \n                    \n                \n            \n            \n                \nfindbyId(id: string, currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/crypto/CryptoBase.interface.ts:23\n                        \n                    \n\n\n            \n                \n                        Finds a cryptocurrency item by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the cryptocurrency.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The currency code for price conversion.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the cryptocurrency item.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPaginated\n                        \n                    \n                \n            \n            \n                \ngetAllPaginated(page: number, pageSize: number, currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/crypto/CryptoBase.interface.ts:15\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of cryptocurrency items.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The page number to retrieve (starting from 1).\n\n                                            \n                                        \n                                        \n                                                pageSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The number of items per page.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The currency code to use for price conversion (e.g., \"USD\").\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of cryptocurrency items.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSimple\n                        \n                    \n                \n            \n            \n                \ngetAllSimple()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/crypto/CryptoBase.interface.ts:29\n                        \n                    \n\n\n            \n                \n                        Retrieves all cryptocurrency items without pagination or filtering.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of all cryptocurrency items.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPriceList\n                        \n                    \n                \n            \n            \n                \ngetPriceList(id: string, currency: string, days: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/crypto/CryptoBase.interface.ts:38\n                        \n                    \n\n\n            \n                \n                        Retrieves the price history for a cryptocurrency over a specified number of days.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The unique identifier of the cryptocurrency.\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The currency code for price conversion.\n\n                                            \n                                        \n                                        \n                                                days\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The time span (in days) for the price history (e.g., \"30\").\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of price data points.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from \"rxjs\"\n\n/**\n * Generic interface for basic cryptocurrency operations.\n * @template T The type of cryptocurrency data handled by the implementation.\n */\nexport interface ICryptoBase{\n    /**\n     * Retrieves a paginated list of cryptocurrency items.\n     * @param page The page number to retrieve (starting from 1).\n     * @param pageSize The number of items per page.\n     * @param currency The currency code to use for price conversion (e.g., \"USD\").\n     * @returns An Observable emitting an array of cryptocurrency items.\n     */\n    getAllPaginated(page:number,pageSize:number,currency:string):Observable\n\n    /**\n     * Finds a cryptocurrency item by its ID.\n     * @param id The unique identifier of the cryptocurrency.\n     * @param currency The currency code for price conversion.\n     * @returns An Observable emitting the cryptocurrency item.\n     */\n    findbyId(id:string,currency:string):Observable\n\n    /**\n     * Retrieves all cryptocurrency items without pagination or filtering.\n     * @returns An Observable emitting an array of all cryptocurrency items.\n     */\n    getAllSimple():Observable\n    \n    /**\n     * Retrieves the price history for a cryptocurrency over a specified number of days.\n     * @param id The unique identifier of the cryptocurrency.\n     * @param currency The currency code for price conversion.\n     * @param days The time span (in days) for the price history (e.g., \"30\").\n     * @returns An Observable emitting an array of price data points.\n     */\n    getPriceList(id:string,currency:string,days:string):Observable\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICryptoBaseMapping.html":{"url":"interfaces/ICryptoBaseMapping.html","title":"interface - ICryptoBaseMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICryptoBaseMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/interfaces/crypto/CryptoBaseMapping.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for mapping raw crypto data from API responses\ninto application-specific data models.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getAllList\n                                    \n                                \n                                \n                                    \n                                        getAllPaginated\n                                    \n                                \n                                \n                                    \n                                        getPriceList\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAllList\n                        \n                    \n                \n            \n            \n                \ngetAllList(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/crypto/CryptoBaseMapping.interface.ts:25\n                        \n                    \n\n\n            \n                \n                        Maps raw crypto list data into an array of BasicCrypto models.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The raw API response containing crypto list information.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     BasicCrypto[]\n\n                        \n                            \n                                An array of BasicCrypto objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPaginated\n                        \n                    \n                \n            \n            \n                \ngetAllPaginated(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/crypto/CryptoBaseMapping.interface.ts:17\n                        \n                    \n\n\n            \n                \n                        Maps the raw data from a paginated crypto list API response\ninto the desired format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The raw API response data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The mapped data, typically transformed for paginated results.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPriceList\n                        \n                    \n                \n            \n            \n                \ngetPriceList(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/crypto/CryptoBaseMapping.interface.ts:33\n                        \n                    \n\n\n            \n                \n                        Maps raw price list data into an array of CryptoGraphPrice models.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The raw API response containing price history information.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CryptoGraphPrice[]\n\n                        \n                            \n                                An array of CryptoGraphPrice objects.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BasicCrypto, CryptoGraphPrice } from \"../../../models/Crypto.model\";\n\n/**\n * Interface for mapping raw crypto data from API responses\n * into application-specific data models.\n * \n * @template T The generic type representing the crypto data model.\n */\nexport interface ICryptoBaseMapping {\n    /**\n     * Maps the raw data from a paginated crypto list API response\n     * into the desired format.\n     * \n     * @param data The raw API response data.\n     * @returns The mapped data, typically transformed for paginated results.\n     */\n    getAllPaginated(data:any):any\n\n    /**\n     * Maps raw crypto list data into an array of BasicCrypto models.\n     * \n     * @param data The raw API response containing crypto list information.\n     * @returns An array of BasicCrypto objects.\n     */\n    getAllList(data:any):BasicCrypto[]\n\n    /**\n     * Maps raw price list data into an array of CryptoGraphPrice models.\n     * \n     * @param data The raw API response containing price history information.\n     * @returns An array of CryptoGraphPrice objects.\n     */\n    getPriceList(data:any):CryptoGraphPrice[]\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ICryptobaseService.html":{"url":"interfaces/ICryptobaseService.html","title":"interface - ICryptobaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ICryptobaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/crypto/Crypto-base-service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        findbyId\n                                    \n                                \n                                \n                                    \n                                        getAllPaginated\n                                    \n                                \n                                \n                                    \n                                        getAllSimple\n                                    \n                                \n                                \n                                    \n                                        getPriceList\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        findbyId\n                        \n                    \n                \n            \n            \n                \nfindbyId(id: string, currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/crypto/Crypto-base-service.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Finds an item by its unique identifier.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique identifier of the item.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code for price conversion.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting the found item of type T.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllPaginated\n                        \n                    \n                \n            \n            \n                \ngetAllPaginated(page: number, pageSize: number, currency: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/crypto/Crypto-base-service.interface.ts:12\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of items.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number to retrieve.\n\n\n                                            \n                                        \n                                        \n                                                pageSize\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of items per page.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code for price conversion.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting the paginated result (usually a list with metadata).\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getAllSimple\n                        \n                    \n                \n            \n            \n                \ngetAllSimple()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/crypto/Crypto-base-service.interface.ts:28\n                        \n                    \n\n\n            \n                \n                        Retrieves a simple list of all items without pagination or filters.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting an array of items of type T.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getPriceList\n                        \n                    \n                \n            \n            \n                \ngetPriceList(id: string, currency: string, days: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/crypto/Crypto-base-service.interface.ts:38\n                        \n                    \n\n\n            \n                \n                        Retrieves a price list for a given item over a period of days.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe unique identifier of the item.\n\n\n                                            \n                                        \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe currency code for price conversion.\n\n\n                                            \n                                        \n                                        \n                                                days\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe number of days to retrieve the price list for.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting the price data (usually an array or object with price history).\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from \"rxjs\";\n\nexport interface ICryptobaseService{\n    /**\n     * Retrieves a paginated list of items.\n     * \n     * @param page - The page number to retrieve.\n     * @param pageSize - The number of items per page.\n     * @param currency - The currency code for price conversion.\n     * @returns Observable emitting the paginated result (usually a list with metadata).\n     */\n    getAllPaginated(page:number,pageSize:number,currency:string):Observable\n\n    /**\n     * Finds an item by its unique identifier.\n     * \n     * @param id - The unique identifier of the item.\n     * @param currency - The currency code for price conversion.\n     * @returns Observable emitting the found item of type T.\n     */\n    findbyId(id:string,currency:string):Observable\n\n    /**\n     * Retrieves a simple list of all items without pagination or filters.\n     * \n     * @returns Observable emitting an array of items of type T.\n     */\n    getAllSimple():Observable\n\n    /**\n     * Retrieves a price list for a given item over a period of days.\n     * \n     * @param id - The unique identifier of the item.\n     * @param currency - The currency code for price conversion.\n     * @param days - The number of days to retrieve the price list for.\n     * @returns Observable emitting the price data (usually an array or object with price history).\n     */\n    getPriceList(id:string,currency:string,days:string):Observable\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFirebaseAuthentication.html":{"url":"interfaces/IFirebaseAuthentication.html","title":"interface - IFirebaseAuthentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFirebaseAuthentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/authentication/firebase-authentication.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IAuthenticationService\n            \n\n\n\n\n    \n\n\n    \n        import { IAuthenticationService } from \"./authentication.interface\";\n\nexport interface IFirebaseAuthentication extends IAuthenticationService{\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFirebaseMainService.html":{"url":"interfaces/IFirebaseMainService.html","title":"interface - IFirebaseMainService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFirebaseMainService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/firebasemain.service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        getfirebaseApp\n                                    \n                                \n                                \n                                    \n                                        getfirestore\n                                    \n                                \n                                \n                                    \n                                        getFunctions\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getfirebaseApp\n                        \n                    \n                \n            \n            \n                \ngetfirebaseApp()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/firebasemain.service.interface.ts:15\n                        \n                    \n\n\n            \n                \n                        Returns the initialized Firebase app instance.\n\n\n                        \n                            Returns :     FirebaseApp\n\n                        \n                            \n                                FirebaseApp instance\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getfirestore\n                        \n                    \n                \n            \n            \n                \ngetfirestore()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/firebasemain.service.interface.ts:9\n                        \n                    \n\n\n            \n                \n                        Returns the initialized Firestore instance.\n\n\n                        \n                            Returns :     Firestore\n\n                        \n                            \n                                Firestore instance\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getFunctions\n                        \n                    \n                \n            \n            \n                \ngetFunctions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/firebasemain.service.interface.ts:21\n                        \n                    \n\n\n            \n                \n                        Returns the initialized Firebase Functions instance.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Firebase Functions instance (type any)\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { FirebaseApp } from \"firebase/app\";\nimport { Firestore } from \"firebase/firestore\";\n\nexport interface IFirebaseMainService{\n    /**\n     * Returns the initialized Firestore instance.\n     * @returns Firestore instance\n     */\n    getfirestore():Firestore\n\n    /**\n     * Returns the initialized Firebase app instance.\n     * @returns FirebaseApp instance\n     */\n    getfirebaseApp():FirebaseApp\n\n    /**\n     * Returns the initialized Firebase Functions instance.\n     * @returns Firebase Functions instance (type any)\n     */\n    getFunctions():any\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IFirebaseService.html":{"url":"interfaces/IFirebaseService.html","title":"interface - IFirebaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IFirebaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/user/Firebase.service.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IUserbaseService\n            \n\n\n\n\n    \n\n\n    \n        import { User } from \"../../../models/User.model\"\nimport { IUserbaseService } from \"./User-base-service.interface\";\n\nexport interface IFirebaseService extends IUserbaseService{\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrapiAuthentication.html":{"url":"interfaces/IStrapiAuthentication.html","title":"interface - IStrapiAuthentication","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrapiAuthentication\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/authentication/strapi-authentication.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IAuthenticationService\n            \n\n\n\n\n    \n\n\n    \n        import { IAuthenticationService } from \"./authentication.interface\";\n\nexport interface IStrapiAuthentication extends IAuthenticationService{\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IStrapiService.html":{"url":"interfaces/IStrapiService.html","title":"interface - IStrapiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IStrapiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/user/Strapi.service.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IUserbaseService\n            \n\n\n\n\n    \n\n\n    \n        import { User } from \"../../../models/User.model\"\nimport { IUserbaseService } from \"./User-base-service.interface\";\n\nexport interface IStrapiService extends IUserbaseService{\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserBaseMapping.html":{"url":"interfaces/IUserBaseMapping.html","title":"interface - IUserBaseMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserBaseMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for mapping user-related data transformations\nbetween backend API responses and app domain models.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addcryptoresponse\n                                    \n                                \n                                \n                                    \n                                        addcryptotodatabase\n                                    \n                                \n                                \n                                    \n                                        addcryptotolist\n                                    \n                                \n                                \n                                    \n                                        addlistUser\n                                    \n                                \n                                \n                                    \n                                        addlistUserResponse\n                                    \n                                \n                                \n                                    \n                                        deletecryptofromlist\n                                    \n                                \n                                \n                                    \n                                        findcryptobyidresponse\n                                    \n                                \n                                \n                                    \n                                        GetBasicUser\n                                    \n                                \n                                \n                                    \n                                        GetListFromUser\n                                    \n                                \n                                \n                                    \n                                        updatelistbody\n                                    \n                                \n                                \n                                    \n                                        updateuserdata\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptoresponse\n                        \n                    \n                \n            \n            \n                \naddcryptoresponse(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:75\n                        \n                    \n\n\n            \n                \n                        Maps the API response after adding a crypto to a BasicCrypto model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    API response data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                BasicCrypto object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \naddcryptotodatabase(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:67\n                        \n                    \n\n\n            \n                \n                        Constructs the request body to add a crypto to the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Crypto data to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Request body for the API.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotolist\n                        \n                    \n                \n            \n            \n                \naddcryptotolist(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:83\n                        \n                    \n\n\n            \n                \n                        Constructs the request body to add a crypto to a favorite list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Crypto ID or relevant info.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Request body for the API.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistUser\n                        \n                    \n                \n            \n            \n                \naddlistUser(data: any, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:26\n                        \n                    \n\n\n            \n                \n                        Constructs the request body to add a list to a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    List data.\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID to associate the list with.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Request body for the API.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistUserResponse\n                        \n                    \n                \n            \n            \n                \naddlistUserResponse(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:34\n                        \n                    \n\n\n            \n                \n                        Maps the API response of adding a list to a BasicList object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    API response data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BasicList\n\n                        \n                            \n                                BasicList object.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletecryptofromlist\n                        \n                    \n                \n            \n            \n                \ndeletecryptofromlist(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:50\n                        \n                    \n\n\n            \n                \n                        Constructs the request body to remove a crypto from a list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Crypto ID or relevant info.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Request body for the API.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findcryptobyidresponse\n                        \n                    \n                \n            \n            \n                \nfindcryptobyidresponse(data: any, idcrypto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:59\n                        \n                    \n\n\n            \n                \n                        Processes the API response to find a crypto by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    API response data.\n\n                                            \n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Crypto ID to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Found crypto ID or indicator if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBasicUser\n                        \n                    \n                \n            \n            \n                \nGetBasicUser(data: any, name?: string, gender?: string, image?: string, isAdmin?: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:103\n                        \n                    \n\n\n            \n                \n                        Maps raw data to a basic user model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Raw user data.\n\n                                            \n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional username override.\n\n                                            \n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional gender override.\n\n                                            \n                                        \n                                        \n                                                image\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional image URL.\n\n                                            \n                                        \n                                        \n                                                isAdmin\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional admin flag.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Basic user model.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetListFromUser\n                        \n                    \n                \n            \n            \n                \nGetListFromUser(data: any, id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:17\n                        \n                    \n\n\n            \n                \n                        Maps raw data from the backend to an array of CryptoList objects.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Raw data to map.\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional user ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CryptoList[]\n\n                        \n                            \n                                Array of CryptoList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelistbody\n                        \n                    \n                \n            \n            \n                \nupdatelistbody(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:42\n                        \n                    \n\n\n            \n                \n                        Constructs the request body to update a list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    List data to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Request body for the API.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateuserdata\n                        \n                    \n                \n            \n            \n                \nupdateuserdata(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts:91\n                        \n                    \n\n\n            \n                \n                        Maps data to update user information request body.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User data to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Request body for the API.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\n\n/**\n * Interface for mapping user-related data transformations\n * between backend API responses and app domain models.\n *\n * @template T The type of User model.\n */\nexport interface IUserBaseMapping{\n    /**\n     * Maps raw data from the backend to an array of CryptoList objects.\n     * \n     * @param data Raw data to map.\n     * @param id Optional user ID.\n     * @returns Array of CryptoList.\n     */\n    GetListFromUser(data:any,id?:string):CryptoList[]\n\n    /**\n     * Constructs the request body to add a list to a user.\n     * \n     * @param data List data.\n     * @param iduser User ID to associate the list with.\n     * @returns Request body for the API.\n     */\n    addlistUser(data:any,iduser:string):any\n\n    /**\n     * Maps the API response of adding a list to a BasicList object.\n     * \n     * @param data API response data.\n     * @returns BasicList object.\n     */\n    addlistUserResponse(data:any):BasicList\n\n    /**\n     * Constructs the request body to update a list.\n     * \n     * @param data List data to update.\n     * @returns Request body for the API.\n     */\n    updatelistbody(data:any):any\n\n    /**\n     * Constructs the request body to remove a crypto from a list.\n     * \n     * @param data Crypto ID or relevant info.\n     * @returns Request body for the API.\n     */\n    deletecryptofromlist(data:any):any\n\n    /**\n     * Processes the API response to find a crypto by its ID.\n     * \n     * @param data API response data.\n     * @param idcrypto Crypto ID to find.\n     * @returns Found crypto ID or indicator if not found.\n     */\n    findcryptobyidresponse(data:any,idcrypto:string):any\n\n    /**\n     * Constructs the request body to add a crypto to the database.\n     * \n     * @param data Crypto data to add.\n     * @returns Request body for the API.\n     */\n    addcryptotodatabase(data:any):any\n\n    /**\n     * Maps the API response after adding a crypto to a BasicCrypto model.\n     * \n     * @param data API response data.\n     * @returns BasicCrypto object.\n     */\n    addcryptoresponse(data:any):any\n\n    /**\n     * Constructs the request body to add a crypto to a favorite list.\n     * \n     * @param data Crypto ID or relevant info.\n     * @returns Request body for the API.\n     */\n    addcryptotolist(data:any):any\n\n    /**\n     * Maps data to update user information request body.\n     * \n     * @param data User data to update.\n     * @returns Request body for the API.\n     */\n    updateuserdata(data:any):any\n\n    /**\n     * Maps raw data to a basic user model.\n     * \n     * @param data Raw user data.\n     * @param name Optional username override.\n     * @param gender Optional gender override.\n     * @param image Optional image URL.\n     * @param isAdmin Optional admin flag.\n     * @returns Basic user model.\n     */\n    GetBasicUser(data:any,name?:string,gender?:string,image?:string,isAdmin?:boolean):any\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserFirebaseRepository.html":{"url":"interfaces/IUserFirebaseRepository.html","title":"interface - IUserFirebaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserFirebaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/interfaces/user/Firebase.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IUserbaseRepositoy\n            \n\n\n\n\n    \n\n\n    \n        import { User } from \"src/app/core/models/User.model\";\nimport { IUserbaseRepositoy } from \"./User-base.interface\";\n\nexport interface IUserFirebaseRepository extends IUserbaseRepositoy{\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserStrapiRepositoy.html":{"url":"interfaces/IUserStrapiRepositoy.html","title":"interface - IUserStrapiRepositoy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserStrapiRepositoy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/interfaces/user/Strapi.interface.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            IUserbaseRepositoy\n            \n\n\n\n\n    \n\n\n    \n        import {IUserbaseRepositoy} from \"../user/User-base.interface\"\nimport { User } from \"../../../models/User.model\";\n\nexport interface IUserStrapiRepositoy extends IUserbaseRepositoy{\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserbaseRepositoy.html":{"url":"interfaces/IUserbaseRepositoy.html","title":"interface - IUserbaseRepositoy","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserbaseRepositoy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/interfaces/user/User-base.interface.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface defining the user-related repository methods\nfor managing user data, favorite lists, and cryptos.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addcryptotodatabase\n                                    \n                                \n                                \n                                    \n                                        addCryptoToList\n                                    \n                                \n                                \n                                    \n                                        addlistToUser\n                                    \n                                \n                                \n                                    \n                                        AdminDeleteUser\n                                    \n                                \n                                \n                                    \n                                        AdminGetUsersPagination\n                                    \n                                \n                                \n                                    \n                                        AdminUpdateUser\n                                    \n                                \n                                \n                                    \n                                        findcryptobyid\n                                    \n                                \n                                \n                                    \n                                        GetBasicUser\n                                    \n                                \n                                \n                                    \n                                        GetListFromUser\n                                    \n                                \n                                \n                                    \n                                        removeCryptoFromList\n                                    \n                                \n                                \n                                    \n                                        removelistFromUser\n                                    \n                                \n                                \n                                    \n                                        updatelistFromUser\n                                    \n                                \n                                \n                                    \n                                        updateuserdata\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \naddcryptotodatabase(token: string, crypto: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:86\n                        \n                    \n\n\n            \n                \n                        Adds a new crypto to the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Crypto data to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addCryptoToList\n                        \n                    \n                \n            \n            \n                \naddCryptoToList(token: string, idlist: string, idcrypto: string, crypto?: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:61\n                        \n                    \n\n\n            \n                \n                        Adds a crypto to a user's favorite list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                idlist\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the favorite list.\n\n                                            \n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the crypto to add.\n\n                                            \n                                        \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional crypto object to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistToUser\n                        \n                    \n                \n            \n            \n                \naddlistToUser(token: string, list: BasicList, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:35\n                        \n                    \n\n\n            \n                \n                        Adds a new favorite list to a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list to add.\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID to associate with the list.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminDeleteUser\n                        \n                    \n                \n            \n            \n                \nAdminDeleteUser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:112\n                        \n                    \n\n\n            \n                \n                        Deletes a user by ID (admin operation).\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminGetUsersPagination\n                        \n                    \n                \n            \n            \n                \nAdminGetUsersPagination(token: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:104\n                        \n                    \n\n\n            \n                \n                        Retrieves a paginated list of users for admin purposes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Page number.\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number of users per page.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with paginated users.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminUpdateUser\n                        \n                    \n                \n            \n            \n                \nAdminUpdateUser(token: string, iduser: string, username: string, gender: string, isAdmin: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:123\n                        \n                    \n\n\n            \n                \n                        Updates user data with admin privileges.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID to update.\n\n                                            \n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    New username.\n\n                                            \n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    New gender.\n\n                                            \n                                        \n                                        \n                                                isAdmin\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Boolean indicating if user is admin.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findcryptobyid\n                        \n                    \n                \n            \n            \n                \nfindcryptobyid(token: string, idcrypto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:78\n                        \n                    \n\n\n            \n                \n                        Finds a crypto by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the crypto.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the found crypto or error.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBasicUser\n                        \n                    \n                \n            \n            \n                \nGetBasicUser(token: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:18\n                        \n                    \n\n\n            \n                \n                        Retrieves basic user information by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with user data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetListFromUser\n                        \n                    \n                \n            \n            \n                \nGetListFromUser(token: string, id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:26\n                        \n                    \n\n\n            \n                \n                        Gets the favorite crypto lists of a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional user ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with list data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeCryptoFromList\n                        \n                    \n                \n            \n            \n                \nremoveCryptoFromList(token: string, listid: string, cryptoid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:70\n                        \n                    \n\n\n            \n                \n                        Removes a crypto from a user's favorite list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the favorite list.\n\n                                            \n                                        \n                                        \n                                                cryptoid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the crypto to remove.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removelistFromUser\n                        \n                    \n                \n            \n            \n                \nremovelistFromUser(token: string, listid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:43\n                        \n                    \n\n\n            \n                \n                        Removes a favorite list by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the list to remove.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelistFromUser\n                        \n                    \n                \n            \n            \n                \nupdatelistFromUser(token: string, list: BasicList)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:51\n                        \n                    \n\n\n            \n                \n                        Updates a user's favorite list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The list with updated data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateuserdata\n                        \n                    \n                \n            \n            \n                \nupdateuserdata(token: string, data: any, userid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/interfaces/user/User-base.interface.ts:95\n                        \n                    \n\n\n            \n                \n                        Updates user data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Data to update.\n\n                                            \n                                        \n                                        \n                                                userid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable with the operation result.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Observable } from \"rxjs\"\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\"\nimport { BasicList } from \"src/app/core/models/CryptoList.model\"\n\n/**\n * Interface defining the user-related repository methods\n * for managing user data, favorite lists, and cryptos.\n * \n * @template T The type of User model.\n */\nexport interface IUserbaseRepositoy{\n    /**\n     * Retrieves basic user information by ID.\n     * @param token Authorization token.\n     * @param id User ID.\n     * @returns Observable with user data.\n     */\n    GetBasicUser(token:string,id:string):Observable\n\n    /**\n     * Gets the favorite crypto lists of a user.\n     * @param token Authorization token.\n     * @param id Optional user ID.\n     * @returns Observable with list data.\n     */\n    GetListFromUser(token:string,id?:string):Observable\n\n    /**\n     * Adds a new favorite list to a user.\n     * @param token Authorization token.\n     * @param list The list to add.\n     * @param iduser User ID to associate with the list.\n     * @returns Observable with the operation result.\n     */\n    addlistToUser(token:string,list:BasicList,iduser:string):Observable\n\n    /**\n     * Removes a favorite list by its ID.\n     * @param token Authorization token.\n     * @param listid ID of the list to remove.\n     * @returns Observable with the operation result.\n     */\n    removelistFromUser(token:string,listid:string):Observable,\n\n    /**\n     * Updates a user's favorite list.\n     * @param token Authorization token.\n     * @param list The list with updated data.\n     * @returns Observable with the operation result.\n     */\n    updatelistFromUser(token:string,list:BasicList):Observable\n\n    /**\n     * Adds a crypto to a user's favorite list.\n     * @param token Authorization token.\n     * @param idlist ID of the favorite list.\n     * @param idcrypto ID of the crypto to add.\n     * @param crypto Optional crypto object to add.\n     * @returns Observable with the operation result.\n     */\n    addCryptoToList(token:string,idlist:string,idcrypto:string,crypto?: BasicCrypto):Observable,\n\n    /**\n     * Removes a crypto from a user's favorite list.\n     * @param token Authorization token.\n     * @param listid ID of the favorite list.\n     * @param cryptoid ID of the crypto to remove.\n     * @returns Observable with the operation result.\n     */\n    removeCryptoFromList(token:string,listid:string,cryptoid:string):Observable\n\n    /**\n     * Finds a crypto by its ID.\n     * @param token Authorization token.\n     * @param idcrypto ID of the crypto.\n     * @returns Observable with the found crypto or error.\n     */\n    findcryptobyid(token:string,idcrypto:string):Observable\n\n    /**\n     * Adds a new crypto to the database.\n     * @param token Authorization token.\n     * @param crypto Crypto data to add.\n     * @returns Observable with the operation result.\n     */\n    addcryptotodatabase(token:string,crypto:BasicCrypto):Observable,\n\n    /**\n     * Updates user data.\n     * @param token Authorization token.\n     * @param data Data to update.\n     * @param userid User ID.\n     * @returns Observable with the operation result.\n     */\n    updateuserdata(token:string,data:any,userid:string):Observable,\n\n    /**\n     * Retrieves a paginated list of users for admin purposes.\n     * @param token Authorization token.\n     * @param page Page number.\n     * @param limit Number of users per page.\n     * @returns Observable with paginated users.\n     */\n    AdminGetUsersPagination(token:string, page: number, limit: number): Observable\n\n    /**\n     * Deletes a user by ID (admin operation).\n     * @param token Authorization token.\n     * @param iduser User ID to delete.\n     * @returns Observable with the operation result.\n     */\n    AdminDeleteUser(token:string, iduser:string): Observable\n\n    /**\n     * Updates user data with admin privileges.\n     * @param token Authorization token.\n     * @param iduser User ID to update.\n     * @param username New username.\n     * @param gender New gender.\n     * @param isAdmin Boolean indicating if user is admin.\n     * @returns Observable with the operation result.\n     */\n    AdminUpdateUser(token: string, iduser: string, username: string, gender: string, isAdmin: boolean): Observable\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/IUserbaseService.html":{"url":"interfaces/IUserbaseService.html","title":"interface - IUserbaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  IUserbaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/interfaces/user/User-base-service.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        addcryptotodatabase\n                                    \n                                \n                                \n                                    \n                                        addCryptoToList\n                                    \n                                \n                                \n                                    \n                                        addlistToUser\n                                    \n                                \n                                \n                                    \n                                        AdminDeleteUser\n                                    \n                                \n                                \n                                    \n                                        AdminGetUsersPagination\n                                    \n                                \n                                \n                                    \n                                        AdminUpdateUser\n                                    \n                                \n                                \n                                    \n                                        findcryptobyid\n                                    \n                                \n                                \n                                    \n                                        GetBasicUser\n                                    \n                                \n                                \n                                    \n                                        GetBehaviourUser\n                                    \n                                \n                                \n                                    \n                                        GetListFromUser\n                                    \n                                \n                                \n                                    \n                                        getUsersCsv\n                                    \n                                \n                                \n                                    \n                                        removeCryptoFromList\n                                    \n                                \n                                \n                                    \n                                        removelistFromUser\n                                    \n                                \n                                \n                                    \n                                        updatelistFromUser\n                                    \n                                \n                                \n                                    \n                                        updateuserdata\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \naddcryptotodatabase(crypto: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:65\n                        \n                    \n\n\n            \n                \n                        Adds a new cryptocurrency to the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The BasicCrypto object to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting any response from the operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addCryptoToList\n                        \n                    \n                \n            \n            \n                \naddCryptoToList(idlist: string, idcrypto: string, crypto?: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:43\n                        \n                    \n\n\n            \n                \n                        Adds a cryptocurrency to a specified list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idlist\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the list to add the crypto to.\n\n                                            \n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the cryptocurrency to add.\n\n                                            \n                                        \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional BasicCrypto object with extra crypto details.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting any response from the operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistToUser\n                        \n                    \n                \n            \n            \n                \naddlistToUser(list: BasicList)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:20\n                        \n                    \n\n\n            \n                \n                        Adds a new list to the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The BasicList object to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the added BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminDeleteUser\n                        \n                    \n                \n            \n            \n                \nAdminDeleteUser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:101\n                        \n                    \n\n\n            \n                \n                        Deletes a user by admin.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user to delete.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting any response from the deletion.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminGetUsersPagination\n                        \n                    \n                \n            \n            \n                \nAdminGetUsersPagination(token: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:93\n                        \n                    \n\n\n            \n                \n                        Retrieves paginated users for admin purposes.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Page number to retrieve.\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Number of users per page.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting paginated users data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminUpdateUser\n                        \n                    \n                \n            \n            \n                \nAdminUpdateUser(token: string, iduser: string, username: string, gender: string, isAdmin: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:112\n                        \n                    \n\n\n            \n                \n                        Updates user details by admin.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Authorization token.\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the user to update.\n\n                                            \n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new username.\n\n                                            \n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new gender.\n\n                                            \n                                        \n                                        \n                                                isAdmin\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Boolean indicating if the user has admin rights.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting any response from the update.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findcryptobyid\n                        \n                    \n                \n            \n            \n                \nfindcryptobyid(idcrypto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:58\n                        \n                    \n\n\n            \n                \n                        Finds a cryptocurrency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the cryptocurrency to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting the found cryptocurrency data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBasicUser\n                        \n                    \n                \n            \n            \n                \nGetBasicUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:78\n                        \n                    \n\n\n            \n                \n                        Retrieves basic information about the current user.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting user basic information.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBehaviourUser\n                        \n                    \n                \n            \n            \n                \nGetBehaviourUser()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:84\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user as a BehaviorSubject observable.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting BasicUser data reactively.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetListFromUser\n                        \n                    \n                \n            \n            \n                \nGetListFromUser(id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:13\n                        \n                    \n\n\n            \n                \n                        Retrieves the list of crypto lists for a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional user ID to retrieve lists for. If omitted, current user is assumed.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting an array of CryptoList objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsersCsv\n                        \n                    \n                \n            \n            \n                \ngetUsersCsv()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:118\n                        \n                    \n\n\n            \n                \n                        Retrieves the users CSV file.\n\n\n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                Observable emitting the HTTP response containing the CSV Blob.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeCryptoFromList\n                        \n                    \n                \n            \n            \n                \nremoveCryptoFromList(listid: string, cryptoid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:51\n                        \n                    \n\n\n            \n                \n                        Removes a cryptocurrency from a specified list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the list.\n\n                                            \n                                        \n                                        \n                                                cryptoid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the cryptocurrency to remove.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting any response from the operation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removelistFromUser\n                        \n                    \n                \n            \n            \n                \nremovelistFromUser(listid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:27\n                        \n                    \n\n\n            \n                \n                        Removes a list from the user by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The ID of the list to remove.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the removed BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelistFromUser\n                        \n                    \n                \n            \n            \n                \nupdatelistFromUser(list: BasicList)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:34\n                        \n                    \n\n\n            \n                \n                        Updates an existing list for the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The BasicList object with updated data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable emitting the updated BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateuserdata\n                        \n                    \n                \n            \n            \n                \nupdateuserdata(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/interfaces/user/User-base-service.interface.ts:72\n                        \n                    \n\n\n            \n                \n                        Updates the user data with provided information.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The data object containing updates.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting the updated user data or response.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpResponse } from \"@angular/common/http\"\nimport { Observable } from \"rxjs\"\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\"\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\"\nimport { BasicUser } from \"src/app/core/models/User.model\"\n\nexport interface IUserbaseService{\n    /**\n     * Retrieves the list of crypto lists for a user.\n     * @param id Optional user ID to retrieve lists for. If omitted, current user is assumed.\n     * @returns Observable emitting an array of CryptoList objects.\n     */\n    GetListFromUser(id?:string):Observable\n\n    /**\n     * Adds a new list to the user.\n     * @param list The BasicList object to add.\n     * @returns Observable emitting the added BasicList.\n     */\n    addlistToUser(list:BasicList):Observable\n\n    /**\n     * Removes a list from the user by its ID.\n     * @param listid The ID of the list to remove.\n     * @returns Observable emitting the removed BasicList.\n     */\n    removelistFromUser(listid:string):Observable\n\n    /**\n     * Updates an existing list for the user.\n     * @param list The BasicList object with updated data.\n     * @returns Observable emitting the updated BasicList.\n     */\n    updatelistFromUser(list:BasicList):Observable\n\n    /**\n     * Adds a cryptocurrency to a specified list.\n     * @param idlist The ID of the list to add the crypto to.\n     * @param idcrypto The ID of the cryptocurrency to add.\n     * @param crypto Optional BasicCrypto object with extra crypto details.\n     * @returns Observable emitting any response from the operation.\n     */\n    addCryptoToList(idlist:string,idcrypto:string,crypto?: BasicCrypto):Observable,\n\n    /**\n     * Removes a cryptocurrency from a specified list.\n     * @param listid The ID of the list.\n     * @param cryptoid The ID of the cryptocurrency to remove.\n     * @returns Observable emitting any response from the operation.\n     */\n    removeCryptoFromList(listid:string,cryptoid:string):Observable\n\n    /**\n     * Finds a cryptocurrency by its ID.\n     * @param idcrypto The ID of the cryptocurrency to find.\n     * @returns Observable emitting the found cryptocurrency data.\n     */\n    findcryptobyid(idcrypto:string):Observable\n\n    /**\n     * Adds a new cryptocurrency to the database.\n     * @param crypto The BasicCrypto object to add.\n     * @returns Observable emitting any response from the operation.\n     */\n    addcryptotodatabase(crypto:BasicCrypto):Observable\n\n    /**\n     * Updates the user data with provided information.\n     * @param data The data object containing updates.\n     * @returns Observable emitting the updated user data or response.\n     */\n    updateuserdata(data:any):Observable\n\n    /**\n     * Retrieves basic information about the current user.\n     * @returns Observable emitting user basic information.\n     */\n    GetBasicUser():Observable\n\n    /**\n     * Retrieves the current user as a BehaviorSubject observable.\n     * @returns Observable emitting BasicUser data reactively.\n     */\n    GetBehaviourUser():Observable\n\n    /**\n     * Retrieves paginated users for admin purposes.\n     * @param token Authorization token.\n     * @param page Page number to retrieve.\n     * @param limit Number of users per page.\n     * @returns Observable emitting paginated users data.\n     */\n    AdminGetUsersPagination(token:string, page: number, limit: number): Observable\n\n    /**\n     * Deletes a user by admin.\n     * @param token Authorization token.\n     * @param iduser The ID of the user to delete.\n     * @returns Observable emitting any response from the deletion.\n     */\n    AdminDeleteUser(token:string, iduser:string): Observable\n\n    /**\n     * Updates user details by admin.\n     * @param token Authorization token.\n     * @param iduser The ID of the user to update.\n     * @param username The new username.\n     * @param gender The new gender.\n     * @param isAdmin Boolean indicating if the user has admin rights.\n     * @returns Observable emitting any response from the update.\n     */\n    AdminUpdateUser(token: string, iduser: string, username: string, gender: string, isAdmin: boolean): Observable\n\n    /**\n     * Retrieves the users CSV file.\n     * @returns Observable emitting the HTTP response containing the CSV Blob.\n     */\n    getUsersCsv(): Observable>\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Image.html":{"url":"interfaces/Image.html","title":"interface - Image","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Image\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            alternativeText\n                                        \n                                \n                                \n                                        \n                                            caption\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            ext\n                                        \n                                \n                                \n                                        \n                                            formats\n                                        \n                                \n                                \n                                        \n                                            hash\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            previewUrl\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            provider_metadata\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        alternativeText\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        alternativeText:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        caption\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        caption:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ext\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ext:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        formats\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        formats:         Formats\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Formats\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hash\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hash:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        previewUrl\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        previewUrl:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider_metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider_metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ListPage.html":{"url":"components/ListPage.html","title":"component - ListPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ListPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/General/list/list.page.ts\n\n\n\n    \n        Description\n    \n    \n        ListPage component.\nManages user's lists: displaying, creating, updating and deleting lists.\nUses modal dialogs for create/update forms and alerts for delete confirmation.\n\n    \n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-list\n            \n\n\n\n            \n                styleUrls\n                ./list.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./list.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                lists\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                            \n                                token\n                            \n                            \n                                    \n                                    Public\n                                userservice\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                alertdelete\n                            \n                            \n                                createlist\n                            \n                            \n                                deletelist\n                            \n                            \n                                getdata\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                    Async\n                                presentModal\n                            \n                            \n                                updatelist\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(modalController: ModalController, authservice: IAuthenticationService, userservice: IUserbaseService, alertController: AlertController, translate: TranslateService, shared: SharedService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/General/list/list.page.ts:24\n                            \n                        \n\n                \n                    \n                            Creates an instance of ListPage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        modalController\n                                                  \n                                                        \n                                                                    ModalController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Controller to open modals\n\n                                                        \n                                                \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service to get user token and session info\n\n                                                        \n                                                \n                                                \n                                                        userservice\n                                                  \n                                                        \n                                                                    IUserbaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service to fetch and modify user data\n\n                                                        \n                                                \n                                                \n                                                        alertController\n                                                  \n                                                        \n                                                                    AlertController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Controller to create confirmation alerts\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translation service for i18n strings\n\n                                                        \n                                                \n                                                \n                                                        shared\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Shared service for utilities (e.g. toasts)\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        alertdelete\n                        \n                    \n                \n            \n            \n                \n                        \n                    alertdelete(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/list/list.page.ts:150\n                        \n                    \n\n\n            \n                \n                        Shows a confirmation alert before deleting a list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Id of the list to confirm deletion\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createlist\n                        \n                    \n                \n            \n            \n                \ncreatelist()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/list/list.page.ts:64\n                        \n                    \n\n\n            \n                \n                        Opens modal to create a new list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletelist\n                        \n                    \n                \n            \n            \n                \ndeletelist(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/list/list.page.ts:121\n                        \n                    \n\n\n            \n                \n                        Deletes a list by id with API call and updates local array on success.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Id of the list to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getdata\n                        \n                    \n                \n            \n            \n                \ngetdata(event: literal type)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/list/list.page.ts:138\n                        \n                    \n\n\n            \n                \n                        Handles events from UI for list update or delete actions.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        literal type\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object containing the action type and list id\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/list/list.page.ts:176\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook called when component is destroyed.\nUnsubscribes from all subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/list/list.page.ts:51\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook called once, initializes token and loads user's lists.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        presentModal\n                        \n                    \n                \n            \n            \n                \n                        \n                    presentModal(type: string, list?: BasicList)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/list/list.page.ts:83\n                        \n                    \n\n\n            \n                \n                        Presents the ListformularyComponent modal for creating or updating a list.\nHandles the modal dismissal and triggers API calls accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                type\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \"Create\" or \"Update\"\n\n                                            \n                                        \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional list object for update mode\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelist\n                        \n                    \n                \n            \n            \n                \nupdatelist(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/list/list.page.ts:72\n                        \n                    \n\n\n            \n                \n                        Opens modal to update an existing list by id.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Id of the list to update\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        lists\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BasicList[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/list/list.page.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/list/list.page.ts:46\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        token\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/list/list.page.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Public\n                        userservice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     IUserbaseService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(USER_SERVICE_TOKEN)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/list/list.page.ts:37\n                        \n                    \n\n            \n                \n                    User service to fetch and modify user data\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject, OnInit } from '@angular/core';\nimport { AlertController, ModalController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\nimport { BasicList, CryptoList } from 'src/app/core/models/CryptoList.model';\nimport { User } from 'src/app/core/models/User.model';\nimport { AUTH_TOKEN, USER_SERVICE_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\nimport { IUserbaseService } from 'src/app/core/services/interfaces/user/User-base-service.interface';\nimport { ListformularyComponent } from 'src/app/shared/listformulary/listformulary.component';\nimport { SharedService } from 'src/app/shared/sharedservice/shared.service';\n\n/**\n * ListPage component.\n * \n * Manages user's lists: displaying, creating, updating and deleting lists.\n * Uses modal dialogs for create/update forms and alerts for delete confirmation.\n */\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.page.html',\n  styleUrls: ['./list.page.scss'],\n})\nexport class ListPage implements OnInit {\n  /**\n   * Creates an instance of ListPage.\n   * @param modalController Controller to open modals\n   * @param authservice Authentication service to get user token and session info\n   * @param userservice User service to fetch and modify user data\n   * @param alertController Controller to create confirmation alerts\n   * @param translate Translation service for i18n strings\n   * @param shared Shared service for utilities (e.g. toasts)\n   */\n  constructor(\n    private modalController: ModalController,\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    @Inject(USER_SERVICE_TOKEN) public userservice:IUserbaseService,\n    private alertController: AlertController,\n    private translate:TranslateService,\n    private shared:SharedService\n  ) { \n    this.authservice.setmenu(true)\n  }\n  token:string=\"\"\n  lists:BasicList[]=[]\n  private subscriptions:Subscription[]=[]\n\n  /**\n   * Lifecycle hook called once, initializes token and loads user's lists.\n   */\n  ngOnInit() {\n    this.token=this.authservice.getToken();\n\n    this.subscriptions.push(this.userservice.GetListFromUser().subscribe({\n      next:(value)=>{\n          this.lists=value\n      },\n    }))\n  }\n\n  /**\n   * Opens modal to create a new list.\n   */\n  createlist(){\n    this.presentModal(\"Create\")\n  }\n\n  /**\n   * Opens modal to update an existing list by id.\n   * @param id Id of the list to update\n   */\n  updatelist(id:string){\n    let lista=this.lists.find(c=>c.id==id+\"\")\n    this.presentModal(\"Update\",lista)\n  }\n\n  /**\n   * Presents the ListformularyComponent modal for creating or updating a list.\n   * Handles the modal dismissal and triggers API calls accordingly.\n   * @param type \"Create\" or \"Update\"\n   * @param list Optional list object for update mode\n   */\n  async presentModal(type:string,list?:BasicList) {\n    const modal = await this.modalController.create({\n      component: ListformularyComponent,\n      componentProps: { updateOrCreate: type,list:list}\n    });\n\n    await modal.present();\n\n    const { data  } = await modal.onWillDismiss();\n    if (data) {\n      if(type==\"Create\"){\n        this.subscriptions.push(this.userservice.addlistToUser(data).subscribe({\n          next:(value)=>{\n            this.shared.showToast(\"success\",this.translate.instant(\"LISTS.LISTCREATEDSUCCESSFUL\"))\n            this.lists.push(value as CryptoList)\n          },error:(err)=>{\n            this.shared.showToast(\"danger\",this.translate.instant(\"LISTS.LISTCREATIONFAILED\"))\n          },\n        }))\n      }else if(type==\"Update\"){\n        this.subscriptions.push(this.userservice.updatelistFromUser(data).subscribe({\n          next:(value)=>{\n              this.shared.showToast(\"success\",this.translate.instant(\"LISTS.LISTMODIFIEDSUCCESSFUL\"))\n              let valuexd=this.lists.findIndex(c=>c.id==value.id)\n              this.lists[valuexd]=value \n          },\n          error:(err)=>{\n              this.shared.showToast(\"danger\",this.translate.instant(\"LISTS.LISTMODIFICATIONFAILED\"))\n          },\n        }))\n      }\n    }\n  }\n\n  /**\n   * Deletes a list by id with API call and updates local array on success.\n   * @param id Id of the list to delete\n   */\n  deletelist(id:string){\n    this.subscriptions.push(this.userservice.removelistFromUser(id).subscribe({\n      next:(value)=>{\n          this.shared.showToast(\"success\",this.translate.instant(\"LISTS.LISTDELETEDSUCCESSFUL\"))\n          let index=this.lists.findIndex(c=>c.id==id+\"\")\n          this.lists.splice(index,1)\n      },\n      error:(err)=>{\n        this.shared.showToast(\"danger\",this.translate.instant(\"LISTS.LISTDELETIONFAILED\"))\n      },\n    }))\n  }\n\n  /**\n   * Handles events from UI for list update or delete actions.\n   * @param event Object containing the action type and list id\n   */\n  getdata(event: {type:string,id:string}) {\n    if(event.type==\"update\"){\n      this.updatelist(event.id)\n    }else if(event.type==\"delete\"){\n      this.alertdelete(event.id)\n    }\n  }\n\n  /**\n   * Shows a confirmation alert before deleting a list.\n   * @param id Id of the list to confirm deletion\n   */\n  async alertdelete(id:string) {\n    const alert = await this.alertController.create({\n      header: this.translate.instant(\"LISTS.DELETELIST\"),\n      message: this.translate.instant(\"LISTS.DELETELISTQUESTION\"),\n      buttons: [\n        {\n          text: this.translate.instant(\"COMMON.CANCEL\"),\n          role: 'cancel',\n          cssClass: 'secondary',\n          handler: () => { }\n        },\n        {\n          text: this.translate.instant(\"COMMON.DELETE\"),\n          handler: () => {\n            this.deletelist(id)\n          }\n        }\n      ]\n    });\n    await alert.present();\n  }\n\n  /**\n   * Lifecycle hook called when component is destroyed.\n   * Unsubscribes from all subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(){\n    this.subscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n}\n    \n\n    \n        \n  \n    {{ 'LISTS.LISTS' | translate}}\n  \n\n\n\n  \n    \n  \n\n  \n  \n    \n      \n      \n        \n        \n      \n    \n  \n\n\n    \n\n    \n                \n                    ./list.page.scss\n                \n                \n.large-button {\n  --width: 120px !important; /* Aumenta el ancho del botón */\n  --height: 120px !important; /* Aumenta la altura del botón */\n  --icon-size: 70px !important; /* Aumenta el tamaño del icono */\n  font-size: 24px !important; /* Aumenta el tamaño del texto si se agrega alguno */\n}\n\n.fixed-bottom-right {\n  position: fixed !important; /* Fijar el botón en la pantalla */\n  bottom: 30px !important; /* Distancia desde la parte inferior */\n  right: 50px !important; /* Distancia desde la parte derecha */\n  z-index: 1000 !important; /* Asegura que el botón esté por encima de otros elementos */\n}\n\n  \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ \\'LISTS.LISTS\\' | translate}}                                                          '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'ListPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ListPageModule.html":{"url":"modules/ListPageModule.html","title":"module - ListPageModule","body":"\n                   \n\n\n\n\n    Modules\n    ListPageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ListPageModule\n\n\n\ncluster_ListPageModule_imports\n\n\n\ncluster_ListPageModule_declarations\n\n\n\n\nListPage\n\nListPage\n\n\n\nListPageModule\n\nListPageModule\n\nListPageModule -->\n\nListPage->ListPageModule\n\n\n\n\n\nListPageRoutingModule\n\nListPageRoutingModule\n\nListPageModule -->\n\nListPageRoutingModule->ListPageModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nListPageModule -->\n\nSharedModule->ListPageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/list/list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ListPage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ListPageRoutingModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ListPageRoutingModule } from './list-routing.module';\n\nimport { ListPage } from './list.page';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SharedModule } from \"../../../shared/shared.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ListPageRoutingModule,\n    TranslateModule.forChild(),\n    SharedModule\n],\n  declarations: [ListPage]\n})\nexport class ListPageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ListPageRoutingModule.html":{"url":"modules/ListPageRoutingModule.html","title":"module - ListPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ListPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/list/list-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ListPage } from './list.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ListPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ListPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ListcontentPage.html":{"url":"components/ListcontentPage.html","title":"component - ListcontentPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ListcontentPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/General/listcontent/listcontent.page.ts\n\n\n\n    \n        Description\n    \n    \n        ListcontentPage component.\nDisplays the content of a specific crypto list by id.\nAllows adding cryptos via navigation and deleting cryptos from the list.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-listcontent\n            \n\n\n\n            \n                styleUrls\n                ./listcontent.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./listcontent.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currency\n                            \n                            \n                                id\n                            \n                            \n                                list\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addcrypto\n                            \n                            \n                                deletecrypto\n                            \n                            \n                                ionViewWillEnter\n                            \n                            \n                                ngOnDestroy\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authservice: IAuthenticationService, activateroute: ActivatedRoute, router: Router, shared: SharedService, translate: TranslateService, userservice: IUserbaseService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/General/listcontent/listcontent.page.ts:27\n                            \n                        \n\n                \n                    \n                            Creates an instance of ListcontentPage.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service to get session info and currency\n\n                                                        \n                                                \n                                                \n                                                        activateroute\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Route service to get route parameters\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router to navigate to other pages\n\n                                                        \n                                                \n                                                \n                                                        shared\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Shared service for utilities like toast messages\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                TranslateService for i18n\n\n                                                        \n                                                \n                                                \n                                                        userservice\n                                                  \n                                                        \n                                                                    IUserbaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service to fetch and modify user data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcrypto\n                        \n                    \n                \n            \n            \n                \naddcrypto()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/listcontent/listcontent.page.ts:67\n                        \n                    \n\n\n            \n                \n                        Navigates to the search page to add a crypto to the current list.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletecrypto\n                        \n                    \n                \n            \n            \n                \ndeletecrypto(event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/listcontent/listcontent.page.ts:76\n                        \n                    \n\n\n            \n                \n                        Deletes a crypto from the current list.\nFirst finds the crypto by id, then calls the removal API and updates UI.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Id of the crypto to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ionViewWillEnter\n                        \n                    \n                \n            \n            \n                \nionViewWillEnter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/listcontent/listcontent.page.ts:56\n                        \n                    \n\n\n            \n                \n                        Ionic lifecycle hook called when the view is about to enter.\nLoads the list content by id.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/listcontent/listcontent.page.ts:99\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook called on component destroy.\nUnsubscribes all subscriptions to avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/listcontent/listcontent.page.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/listcontent/listcontent.page.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :         CryptoList\n\n                    \n                \n                \n                    \n                        Default value : {id:-1+\"\",title:\"\",description:\"\",cryptos:[]}\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/listcontent/listcontent.page.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/listcontent/listcontent.page.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\nimport { CryptoList } from 'src/app/core/models/CryptoList.model';\nimport { User } from 'src/app/core/models/User.model';\nimport { AUTH_TOKEN, USER_SERVICE_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\nimport { IUserbaseService } from 'src/app/core/services/interfaces/user/User-base-service.interface';\nimport { SharedService } from 'src/app/shared/sharedservice/shared.service';\n\n/**\n * ListcontentPage component.\n * \n * Displays the content of a specific crypto list by id.\n * Allows adding cryptos via navigation and deleting cryptos from the list.\n */\n@Component({\n  selector: 'app-listcontent',\n  templateUrl: './listcontent.page.html',\n  styleUrls: ['./listcontent.page.scss'],\n})\nexport class ListcontentPage {\n  id:string=\"\"\n  currency:string=\"\"\n  list:CryptoList={id:-1+\"\",title:\"\",description:\"\",cryptos:[]}\n  private subscriptions:Subscription[]=[]\n\n  /**\n   * Creates an instance of ListcontentPage.\n   * @param authservice Authentication service to get session info and currency\n   * @param activateroute Route service to get route parameters\n   * @param router Router to navigate to other pages\n   * @param shared Shared service for utilities like toast messages\n   * @param translate TranslateService for i18n\n   * @param userservice User service to fetch and modify user data\n   */\n  constructor(\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    private activateroute:ActivatedRoute,\n    private router:Router,\n    private shared:SharedService,\n    private translate:TranslateService,\n    @Inject(USER_SERVICE_TOKEN) private userservice:IUserbaseService) { \n    this.authservice.setmenu(true)\n    this.activateroute.paramMap.subscribe(params=>{\n      this.id=params.get('id')??\"\"\n      this.currency=this.authservice.getCurrency()\n    })\n  }\n  \n  /**\n   * Ionic lifecycle hook called when the view is about to enter.\n   * Loads the list content by id.\n   */\n  ionViewWillEnter() {\n    this.subscriptions.push(this.userservice.GetListFromUser(this.id).subscribe({\n      next:(value)=>{\n          this.list=value.find(c=>c.id==this.id) || {id:-1+\"\",title:\"\",description:\"\",cryptos:[]}  \n      },\n    }))\n  }\n\n  /**\n   * Navigates to the search page to add a crypto to the current list.\n   */\n  addcrypto(){\n    this.router.navigate(['search',this.id])\n  }\n\n  /**\n   * Deletes a crypto from the current list.\n   * First finds the crypto by id, then calls the removal API and updates UI.\n   * @param event Id of the crypto to delete\n   */\n  deletecrypto(event:string){\n    let idcrypto:number=-1\n    this.subscriptions.push(this.userservice.findcryptobyid(event).subscribe({\n      next:(value)=>{\n          if(value!=\"-1\"){\n            this.subscriptions.push(this.userservice.removeCryptoFromList(this.id,value).subscribe({\n              next:(value)=>{\n                  this.shared.showToast(\"success\",this.translate.instant(\"CRYPTOLIST.CRYPTODELETESUCCESSFUL\"))\n                  let index=this.list.cryptos.findIndex(c=>c.id==event)\n                  this.list.cryptos.splice(index,1)\n              },error:(err)=>{\n                this.shared.showToast(\"danger\",this.translate.instant(\"CRYPTOLIST.CRYPTODELETEFAILED\"))\n              },\n            }))\n          }\n      },\n    })) \n  }\n\n  /**\n   * Lifecycle hook called on component destroy.\n   * Unsubscribes all subscriptions to avoid memory leaks.\n   */\n  ngOnDestroy(){\n    this.subscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n}\n    \n\n    \n        \n  \n    {{ 'MAINMENU.LIST' | translate }}\n  \n\n\n\n  \n  \n    \n      {{ list.title }}\n    \n    \n      \n        {{ list.description }}\n      \n    \n  \n\n  \n  \n    \n  \n\n  \n  \n\n\n    \n\n    \n                \n                    ./listcontent.page.scss\n                \n                \n.large-button {\n  --width: 120px !important; /* Aumenta el ancho del botón */\n  --height: 120px !important; /* Aumenta la altura del botón */\n  --icon-size: 70px !important; /* Aumenta el tamaño del icono */\n  font-size: 24px !important; /* Aumenta el tamaño del texto si se agrega alguno */\n}\n\n.fixed-bottom-right {\n  position: fixed !important; /* Fijar el botón en la pantalla */\n  bottom: 30px !important; /* Distancia desde la parte inferior */\n  right: 50px !important; /* Distancia desde la parte derecha */\n  z-index: 1000 !important; /* Asegura que el botón esté por encima de otros elementos */\n}\n\n\n/* Título dentro del card */\n.list-title {\n  font-size: 1.6rem; /* Ajuste del tamaño del texto */\n  font-weight: bold; /* Hacer el título más destacado */\n  text-align: center;\n}\n\n/* Descripción dentro del card */\n.list-description {\n  text-align: center;\n  font-size: 1rem;\n  line-height: 1.6; /* Espaciado para mejorar la legibilidad */\n  margin-top: 10px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ \\'MAINMENU.LIST\\' | translate }}                {{ list.title }}                      {{ list.description }}                          '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'ListcontentPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ListcontentPageModule.html":{"url":"modules/ListcontentPageModule.html","title":"module - ListcontentPageModule","body":"\n                   \n\n\n\n\n    Modules\n    ListcontentPageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ListcontentPageModule\n\n\n\ncluster_ListcontentPageModule_imports\n\n\n\ncluster_ListcontentPageModule_declarations\n\n\n\n\nListcontentPage\n\nListcontentPage\n\n\n\nListcontentPageModule\n\nListcontentPageModule\n\nListcontentPageModule -->\n\nListcontentPage->ListcontentPageModule\n\n\n\n\n\nListcontentPageRoutingModule\n\nListcontentPageRoutingModule\n\nListcontentPageModule -->\n\nListcontentPageRoutingModule->ListcontentPageModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nListcontentPageModule -->\n\nSharedModule->ListcontentPageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/listcontent/listcontent.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ListcontentPage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ListcontentPageRoutingModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ListcontentPageRoutingModule } from './listcontent-routing.module';\n\nimport { ListcontentPage } from './listcontent.page';\nimport { SharedModule } from \"../../../shared/shared.module\";\nimport { TranslateModule } from '@ngx-translate/core';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ListcontentPageRoutingModule,\n    SharedModule,\n    TranslateModule.forChild()\n],\n  declarations: [ListcontentPage]\n})\nexport class ListcontentPageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ListcontentPageRoutingModule.html":{"url":"modules/ListcontentPageRoutingModule.html","title":"module - ListcontentPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ListcontentPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/listcontent/listcontent-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ListcontentPage } from './listcontent.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ListcontentPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ListcontentPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ListcryptoComponent.html":{"url":"components/ListcryptoComponent.html","title":"component - ListcryptoComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ListcryptoComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/listcrypto/listcrypto.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-listcrypto\n            \n\n\n\n            \n                styleUrls\n                ./listcrypto.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./listcrypto.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deletethis\n                            \n                            \n                                modify\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                eventemiter\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/listcrypto/listcrypto.component.ts:19\n                            \n                        \n\n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        list\n                    \n                \n                \n                    \n                        Type :         BasicList\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/listcrypto/listcrypto.component.ts:21\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        eventemiter\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/listcrypto/listcrypto.component.ts:22\n                            \n                        \n            \n        \n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        deletethis\n                        \n                    \n                \n            \n            \n                \ndeletethis(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/listcrypto/listcrypto.component.ts:29\n                        \n                    \n\n\n            \n                \n                        Emits a delete event for this list item.\nStops the event propagation to prevent parent handlers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse or UI event triggering the delete action\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        modify\n                        \n                    \n                \n            \n            \n                \nmodify(event: Event)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/listcrypto/listcrypto.component.ts:39\n                        \n                    \n\n\n            \n                \n                        Emits an update event for this list item.\nStops the event propagation to prevent parent handlers.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        Event\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Mouse or UI event triggering the update action\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { BasicList } from 'src/app/core/models/CryptoList.model';\n\n@Component({\n  selector: 'app-listcrypto',\n  templateUrl: './listcrypto.component.html',\n  styleUrls: ['./listcrypto.component.scss'],\n})\n/**\n * Component to display a cryptocurrency list item.\n * \n * Receives a `BasicList` object as input and emits events for\n * delete and update actions.\n * \n * Emits an event with an object containing:\n * - `type`: action type ('delete' or 'update')\n * - `id`: identifier of the list item as a string\n */\nexport class ListcryptoComponent {\n  constructor() { }\n  @Input() list!:BasicList\n  @Output() eventemiter= new EventEmitter();\n\n  /**\n   * Emits a delete event for this list item.\n   * Stops the event propagation to prevent parent handlers.\n   * @param event Mouse or UI event triggering the delete action\n   */\n  deletethis(event: Event){\n    event.stopPropagation();\n    this.eventemiter.emit({type:\"delete\",id:this.list.id+\"\"})\n  }\n\n  /**\n   * Emits an update event for this list item.\n   * Stops the event propagation to prevent parent handlers.\n   * @param event Mouse or UI event triggering the update action\n   */\n  modify(event: Event){\n    event.stopPropagation();\n    this.eventemiter.emit({type:\"update\",id:this.list.id+\"\"})\n  }\n}\n    \n\n    \n        \n  \n    {{ list.title }}\n  \n\n  \n    {{ list.description }}\n  \n\n  \n    \n      {{ 'COMMON.MODIFY' | translate}}\n    \n    \n      {{ 'COMMON.DELETE' | translate}}\n    \n  \n\n\n    \n\n    \n                \n                    ./listcrypto.component.scss\n                \n                .list-card {\n   \n    \n    ion-card-title {\n      font-size: 1.5rem;\n      font-weight: bold;\n    }\n  \n    ion-card-content {\n      padding: 16px;\n      font-size: 1rem;\n    }\n  \n    ion-footer {\n      display: flex;\n      justify-content: space-between;\n      padding: 10px;\n  \n      ion-button {\n        width: 48%;\n        border-radius: 20px;\n        font-size: 0.9rem;\n      }\n  \n      ion-button:nth-child(1) {\n        background-color: #ffcc00; /* Color de 'Modificar' */\n      }\n  \n      ion-button:nth-child(2) {\n        background-color: #f53d3d; /* Color de 'Eliminar' */\n      }\n    }\n  }\n\n  \n  .list-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 8px 12px rgba(0, 0, 0, 0.2);\n    cursor: pointer;\n  }\n  \n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ list.title }}        {{ list.description }}              {{ \\'COMMON.MODIFY\\' | translate}}              {{ \\'COMMON.DELETE\\' | translate}}      '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'ListcryptoComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ListformularyComponent.html":{"url":"components/ListformularyComponent.html","title":"component - ListformularyComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ListformularyComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/listformulary/listformulary.component.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-listformulary\n            \n\n\n\n            \n                styleUrls\n                ./listformulary.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./listformulary.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                Formulary\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                confirm\n                            \n                            \n                                dismissModal\n                            \n                            \n                                inicializateformulary\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                list\n                            \n                            \n                                updateOrCreate\n                            \n                        \n                    \n                \n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    Title\n                                \n                                \n                                    Description\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(modalController: ModalController, fb: FormBuilder)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/listformulary/listformulary.component.ts:23\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        modalController\n                                                  \n                                                        \n                                                                    ModalController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        fb\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        list\n                    \n                \n                \n                    \n                        Type :         BasicList\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/listformulary/listformulary.component.ts:21\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        updateOrCreate\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"Create\"\n                    \n                \n                        \n                            \n                                    Defined in src/app/shared/listformulary/listformulary.component.ts:22\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        confirm\n                        \n                    \n                \n            \n            \n                \nconfirm()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/listformulary/listformulary.component.ts:72\n                        \n                    \n\n\n            \n                \n                        Confirms the form submission and dismisses the modal passing back\nthe form data as a BasicList object.\n\n\n                        \n                            Returns :         any\n\n                        \n                            \n                                Promise that resolves when the modal is dismissed\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dismissModal\n                        \n                    \n                \n            \n            \n                \ndismissModal()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/listformulary/listformulary.component.ts:41\n                        \n                    \n\n\n            \n                \n                        Dismisses the modal without returning any data.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inicializateformulary\n                        \n                    \n                \n            \n            \n                \ninicializateformulary()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/listformulary/listformulary.component.ts:50\n                        \n                    \n\n\n            \n                \n                        Initializes the reactive form controls based on mode.\nIn \"Create\" mode, form is empty.\nIn \"Update\" mode, form is pre-filled with existing list values.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/listformulary/listformulary.component.ts:33\n                        \n                    \n\n\n            \n                \n                        Initializes the form on component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        Formulary\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/listformulary/listformulary.component.ts:23\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        Title\n                    \n                \n\n                \n                    \n                        getTitle()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/listformulary/listformulary.component.ts:85\n                                \n                            \n                    \n                        \n                                Getter for the Title form control.\n\n\n                                \n                                    Returns :     AbstractControl | null\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        Description\n                    \n                \n\n                \n                    \n                        getDescription()\n                    \n                \n                            \n                                \n                                    Defined in src/app/shared/listformulary/listformulary.component.ts:92\n                                \n                            \n                    \n                        \n                                Getter for the Description form control.\n\n\n                                \n                                    Returns :     AbstractControl | null\n\n                                \n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, Input, OnInit } from '@angular/core';\nimport { AbstractControl, FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ModalController } from '@ionic/angular';\nimport { BasicList } from 'src/app/core/models/CryptoList.model';\n\n@Component({\n  selector: 'app-listformulary',\n  templateUrl: './listformulary.component.html',\n  styleUrls: ['./listformulary.component.scss'],\n})\n/**\n * Modal form component for creating or updating a cryptocurrency list.\n * \n * Supports two modes controlled by `updateOrCreate` input:\n * - \"Create\": initializes an empty form for a new list.\n * - \"Update\": pre-fills the form with the data of an existing list.\n * \n * On confirmation, dismisses the modal passing back the list data.\n */\nexport class ListformularyComponent  implements OnInit {\n  @Input() list?:BasicList\n  @Input() updateOrCreate?:string=\"Create\"\n  public Formulary!: FormGroup;\n\n  constructor(\n    private modalController: ModalController,\n    private fb:FormBuilder\n  ) { }\n\n  /**\n   * Initializes the form on component initialization.\n   */\n  ngOnInit() {\n    this.inicializateformulary()\n  }\n\n  /**\n   * Dismisses the modal without returning any data.\n   */\n\n  dismissModal() {\n    this.modalController.dismiss();\n  }\n\n  /**\n   * Initializes the reactive form controls based on mode.\n   * In \"Create\" mode, form is empty.\n   * In \"Update\" mode, form is pre-filled with existing list values.\n   */\n  inicializateformulary(){\n    if(this.updateOrCreate=='Create'){\n      this.Formulary=this.fb.group({\n        Title:[\"\",[Validators.required,Validators.minLength(3)]],\n        Description:[\"\",[Validators.required,Validators.minLength(6)]],\n      }\n    )}\n    else if(this.updateOrCreate=='Update'){\n      this.Formulary=this.fb.group({\n        Title:[\"\",[Validators.required,Validators.minLength(3)]],\n        Description:[\"\",[Validators.required,Validators.minLength(6)]],\n      })\n      this.Formulary.get('Title')?.setValue(this.list?.title)\n      this.Formulary.get('Description')?.setValue(this.list?.description)\n    }\n  }\n\n  /**\n   * Confirms the form submission and dismisses the modal passing back\n   * the form data as a BasicList object.\n   * @returns Promise that resolves when the modal is dismissed\n   */\n  confirm() {\n    let data:BasicList\n    data={\n      id:(this.list)?this.list.id:0+\"\",\n      title:this.Formulary.controls['Title'].value,\n      description:this.Formulary.controls['Description'].value\n    }\n    return this.modalController.dismiss(data, 'confirm');\n  }\n\n  /**\n   * Getter for the Title form control.\n   */\n  get Title():AbstractControl | null{\n    return this.Formulary!.get(\"Title\")\n  }\n\n  /**\n   * Getter for the Description form control.\n   */\n  get Description():AbstractControl | null{\n    return this.Formulary!.get(\"Description\")\n  }\n}\n    \n\n    \n        \n  \n    {{'LISTS.ADDLIST' | translate}}\n    {{'LISTS.UPDATELIST' | translate}}\n    \n      \n        \n      \n    \n  \n\n\n\n\n\n  \n    \n    \n    \n      {{'LISTS.TITLE' | translate}}\n      \n    \n    \n      {{'LISTS.TITLEREQUIRED' | translate}}\n      {{'LISTS.MINLENGTHTITLE' | translate}}\n    \n\n    \n      {{'LISTS.DESCRIPTION' | translate}}\n      \n    \n    \n      {{'LISTS.DESCRIPTIONREQUIRED' | translate}}\n      {{'LISTS.MINLENGTDESCRIPTION' | translate}}\n    \n\n    \n      \n        {{'COMMON.SAVE' | translate}}\n      \n      \n        {{'COMMON.SAVE' | translate}}\n      \n    \n  \n\n\n    \n\n    \n                \n                    ./listformulary.component.scss\n                \n                .center-content {\n  position: relative;\n  height: 100%; /* Asegura que el contenido ocupe toda la pantalla */\n}\n\n.center-form {\n  position: absolute;\n  top: 50%; /* Coloca el formulario en el centro vertical */\n  left: 50%; /* Coloca el formulario en el centro horizontal */\n  transform: translate(-50%, -50%); /* Ajusta para centrar correctamente */\n  width: 100%; /* Asegura que el formulario sea responsive */\n  padding: 2rem; /* Espaciado interno para un diseño limpio */\n  border-radius: 12px; /* Bordes redondeados para un diseño moderno */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); /* Sombra ligera para profundidad */\n}\n\nion-item {\n  margin-bottom: 1rem; /* Espaciado entre los campos */\n}\n\nion-footer {\n  margin-top: 1.5rem; /* Espaciado entre los campos y el botón */\n}\n\nion-button {\n  \n  font-size: 1rem;\n  border-radius: 6px; /* Bordes redondeados para consistencia */\n}\n\nion-textarea, ion-input {\n  --padding-start: 0.5rem;\n  --padding-end: 0.5rem;\n}\n\n@media (min-width: 768px) {\n  .center-form {\n    padding: 3rem; /* Mayor espacio en dispositivos más grandes */\n  }\n}\n\nion-toolbar{\n  text-align: left!important;\n}\nion-img{\n  width: 150px;\n  display: block;\n  margin: auto; \n  margin-bottom: 20px;\n}\np{\n  margin-left: 15px;\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{\\'LISTS.ADDLIST\\' | translate}}    {{\\'LISTS.UPDATELIST\\' | translate}}                                                  {{\\'LISTS.TITLE\\' | translate}}                    {{\\'LISTS.TITLEREQUIRED\\' | translate}}      {{\\'LISTS.MINLENGTHTITLE\\' | translate}}              {{\\'LISTS.DESCRIPTION\\' | translate}}                    {{\\'LISTS.DESCRIPTIONREQUIRED\\' | translate}}      {{\\'LISTS.MINLENGTDESCRIPTION\\' | translate}}                      {{\\'COMMON.SAVE\\' | translate}}                    {{\\'COMMON.SAVE\\' | translate}}            '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'ListformularyComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/LoginPage.html":{"url":"components/LoginPage.html","title":"component - LoginPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  LoginPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/Start/login/login.page.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-login\n            \n\n\n\n            \n                styleUrls\n                ./login.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./login.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeLanguage\n                            \n                            \n                                login\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Async\n                                present\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authservice: IAuthenticationService, translationService: TranslationService, translate: TranslateService, router: Router, alertcontroller: AlertController, shared: SharedService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/Start/login/login.page.ts:21\n                            \n                        \n\n                \n                    \n                            Constructor for injecting required services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The authentication service (injected with token).\n\n                                                        \n                                                \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                        TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Custom service to manage language selection.\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular ngx-translate service.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation.\n\n                                                        \n                                                \n                                                \n                                                        alertcontroller\n                                                  \n                                                        \n                                                                    AlertController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Ionic AlertController for dialogs.\n\n                                                        \n                                                \n                                                \n                                                        shared\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                SharedService to show toast messages.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeLanguage\n                        \n                    \n                \n            \n            \n                \nchangeLanguage(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/login/login.page.ts:47\n                        \n                    \n\n\n            \n                \n                        Changes the application language.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Language code (e.g., 'en', 'es').\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        login\n                        \n                    \n                \n            \n            \n                \nlogin(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/login/login.page.ts:56\n                        \n                    \n\n\n            \n                \n                        Logs in a user using form input and navigates to splash page on success.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object containing login form data (typically from (ngSubmit)).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/login/login.page.ts:112\n                        \n                    \n\n\n            \n                \n                        Angular lifecycle hook.\nUnsubscribes from all active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        present\n                        \n                    \n                \n            \n            \n                \n                        \n                    present()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/login/login.page.ts:70\n                        \n                    \n\n\n            \n                \n                        Presents a modal allowing the user to select their preferred language.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/Start/login/login.page.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { TranslationService } from '../../../core/services/impl/translation.service';\nimport { IAuthenticationService } from '../../../core/services/interfaces/authentication/authentication.interface';\nimport { AUTH_TOKEN } from '../../../core/repositories/repository.tokens';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Router } from '@angular/router';\nimport { SharedService } from 'src/app/shared/sharedservice/shared.service';\nimport { Subscription } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.page.html',\n  styleUrls: ['./login.page.scss'],\n})\n/**\n * LoginPage is responsible for handling user authentication and language selection.\n * It includes a login form and a language switcher modal (alert).\n */\nexport class LoginPage {\n  private subscriptions:Subscription[]=[]\n\n  /**\n   * Constructor for injecting required services.\n   *\n   * @param authservice The authentication service (injected with token).\n   * @param translationService Custom service to manage language selection.\n   * @param translate Angular ngx-translate service.\n   * @param router Angular Router for navigation.\n   * @param alertcontroller Ionic AlertController for dialogs.\n   * @param shared SharedService to show toast messages.\n   */\n  constructor(\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    private translationService: TranslationService,\n    private translate: TranslateService,\n    private router:Router,\n    private alertcontroller:AlertController,\n    private shared:SharedService\n  ) { }\n\n  /**\n   * Changes the application language.\n   *\n   * @param lang Language code (e.g., 'en', 'es').\n   */\n  changeLanguage(lang: string) {\n    this.translationService.setLanguage(lang);\n  }\n\n  /**\n   * Logs in a user using form input and navigates to splash page on success.\n   *\n   * @param event Object containing login form data (typically from (ngSubmit)).\n   */\n  login(event:any) {\n    this.subscriptions.push(this.authservice.Login(event).subscribe({\n      next:(value)=>{\n          this.shared.showToast(\"success\",this.translate.instant(\"CRUDUSER.LOGIN.LOGINSUCCESSFUL\"))\n          this.router.navigate(['/splash']);\n        },error:(err)=>{\n        this.shared.showToast(\"danger\",err+\"\")\n      }\n    }))\n  }\n\n  /**\n   * Presents a modal allowing the user to select their preferred language.\n   */\n  async present(){\n    const alert = await this.alertcontroller.create({\n      header: this.translate.instant('MAINMENU.SELECTLANGUAGE'), \n      inputs: [\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('COMMON.ENGLISH'),\n          value: 'en', \n          checked: this.translationService.getCurrentLanguage() === 'en', \n        },\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('COMMON.SPANISH'),\n          value: 'es', \n          checked: this.translationService.getCurrentLanguage() === 'es',\n        },\n      ],\n      buttons: [\n        {\n          text: this.translate.instant('COMMON.CANCEL'), \n          role: 'cancel',\n        },\n        {\n          text: this.translate.instant('COMMON.SAVE'),\n          handler: (data) => {\n            if (data) {\n              this.translationService.setLanguage(data)\n              this.translate.use(data)\n            }\n          },\n        },\n      ],\n    });\n    await alert.present();\n  }\n\n  /**\n   * Angular lifecycle hook.\n   * Unsubscribes from all active subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(){\n    this.subscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n}\n    \n\n    \n        \n  \n    {{'CRUDUSER.LOGIN.LOGIN' | translate}}\n  \n\n\n\n  \n\n  \n\n  \n    \n      \n    \n  \n\n\n\n    \n\n    \n                \n                    ./login.page.scss\n                \n                ion-content {\n  position: relative; /* Establece un contexto de posición para los elementos hijos */\n  height: 100vh;      /* Asegura que el ion-content ocupe toda la altura de la ventana */\n}\n\napp-formulary {\n  position: absolute;  /* Usamos absolute para posicionar el formulario */\n  top: 50%;             /* Lo mueve al 50% de la altura del contenedor */\n  left: 50%;            /* Lo mueve al 50% de la anchura del contenedor */\n  transform: translate(-50%, -50%); /* Ajusta la posición para centrarlo */\n  width: 100%;          /* Permite que el formulario use todo el ancho disponible */\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{\\'CRUDUSER.LOGIN.LOGIN\\' | translate}}                        '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'LoginPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoginPageModule.html":{"url":"modules/LoginPageModule.html","title":"module - LoginPageModule","body":"\n                   \n\n\n\n\n    Modules\n    LoginPageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_LoginPageModule\n\n\n\ncluster_LoginPageModule_declarations\n\n\n\ncluster_LoginPageModule_imports\n\n\n\n\nLoginPage\n\nLoginPage\n\n\n\nLoginPageModule\n\nLoginPageModule\n\nLoginPageModule -->\n\nLoginPage->LoginPageModule\n\n\n\n\n\nLoginPageRoutingModule\n\nLoginPageRoutingModule\n\nLoginPageModule -->\n\nLoginPageRoutingModule->LoginPageModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nLoginPageModule -->\n\nSharedModule->LoginPageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/Start/login/login.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            LoginPage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            LoginPageRoutingModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { LoginPageRoutingModule } from './login-routing.module';\n\nimport { LoginPage } from './login.page';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SharedModule } from \"../../../shared/shared.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    LoginPageRoutingModule,\n    ReactiveFormsModule,\n    TranslateModule.forChild(),\n    SharedModule\n],\n  declarations: [LoginPage]\n})\nexport class LoginPageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/LoginPageRoutingModule.html":{"url":"modules/LoginPageRoutingModule.html","title":"module - LoginPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    LoginPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/Start/login/login-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { LoginPage } from './login.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: LoginPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class LoginPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginPayLoad.html":{"url":"interfaces/LoginPayLoad.html","title":"interface - LoginPayLoad","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginPayLoad\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/auth.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginPayLoad{\n    email:string,\n    password:string\n}\n\nexport interface RegisterPayLoad{\n    email:string,\n    gender:string\n    username:string,\n    password:string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LoginResponse.html":{"url":"interfaces/LoginResponse.html","title":"interface - LoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the response returned from Firebase authentication login.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            apiKey\n                                        \n                                \n                                \n                                        \n                                            appName\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            emailVerified\n                                        \n                                \n                                \n                                        \n                                            isAdmin\n                                        \n                                \n                                \n                                        \n                                            isAnonymous\n                                        \n                                \n                                \n                                        \n                                            lastLoginAt\n                                        \n                                \n                                \n                                        \n                                            providerData\n                                        \n                                \n                                \n                                        \n                                            stsTokenManager\n                                        \n                                \n                                \n                                        \n                                            uid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        apiKey\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        apiKey:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        appName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        appName:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        emailVerified\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        emailVerified:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isAdmin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isAdmin:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isAnonymous\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isAnonymous:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        lastLoginAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        lastLoginAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providerData\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        providerData:         providedata[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         providedata[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        stsTokenManager\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        stsTokenManager:         StsTokenManager\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StsTokenManager\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LoginPayLoad, RegisterPayLoad } from \"src/app/core/models/auth.model\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { User } from \"src/app/core/models/User.model\";\n\n/**\n * Interface representing the response returned from Firebase authentication login.\n */\nexport interface LoginResponse {\n    uid: string\n    email: string\n    emailVerified: boolean\n    isAnonymous: boolean\n    providerData: providedata[]\n    stsTokenManager: StsTokenManager\n    createdAt: string\n    lastLoginAt: string\n    apiKey: string\n    appName: string,\n    accessToken:string,\n    isAdmin:string\n}\n\n/**\n * Interface representing the provider data associated with the user.\n */\nexport interface providedata {\n    providerId: string\n    uid: string\n    displayName: any\n    email: string\n    phoneNumber: any\n    photoURL: any\n}\n\n/**\n * Interface representing the Firebase security token manager info.\n */\nexport interface StsTokenManager {\n    refreshToken: string\n    accessToken: string\n    expirationTime: number\n}\n\n/**\n * Service that maps Firebase authentication payloads and responses to the app's User model.\n * \n * Implements IAuthenticationMapping interface to convert between backend responses and frontend models.\n */\nexport class FirebaseAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps a login payload to a User model.\n     * Currently not implemented.\n     * @param payload - Login data from frontend.\n     * @throws Error\n     */\n    Login(payload: LoginPayLoad):User {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps a registration payload to a User model.\n     * Currently not implemented.\n     * @param payload - Registration data from frontend.\n     * @throws Error\n     */\n    Register(payload: RegisterPayLoad) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps a Firebase LoginResponse to a User model.\n     * @param response - The Firebase login response object.\n     * @returns User model populated with Firebase response data.\n     */\n    LoginResponse(response: LoginResponse):User {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:\"xd\",\n            gender:\"male\",\n            isAdmin:response.isAdmin\n        }\n    }\n\n    /**\n     * Maps a Firebase registration response to a User model.\n     * @param response - The Firebase registration response.\n     * @param name - User's username.\n     * @param gender - User's gender.\n     * @returns User model populated with Firebase response data and provided user info.\n     */\n    RegisterResponse(response: LoginResponse,name:string,gender:string) {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:name,\n            gender:gender,\n            isAdmin:false\n        }\n    }\n\n    /**\n     * Maps a Firebase user retrieval response to a User model.\n     * @param response - The Firebase user response.\n     * @param token - Authentication token (not currently used).\n     * @returns User model populated with Firebase response data.\n     */\n    GetUserResponse(response: LoginResponse, token: string) {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:\"xd\",\n            gender:\"male\",\n            isAdmin:response.isAdmin\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Meta.html":{"url":"interfaces/Meta.html","title":"interface - Meta","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Meta\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Model.html":{"url":"interfaces/Model.html","title":"interface - Model","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Model\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/base.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface Model{\n    id:string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"pipes/PercentformaterPipe.html":{"url":"pipes/PercentformaterPipe.html","title":"pipe - PercentformaterPipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Pipes\n  PercentformaterPipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/pipes/percentformater.pipe.ts\n        \n\n\n            \n                Description\n            \n            \n                Pipe that formats a number as a percentage string with two decimal places.\nAdds a \"+\" sign for positive values and appends a \"%\" sign.\nNegative values are displayed with a \"-\" sign automatically by the number formatting.\n\n            \n\n\n        \n            Metadata\n            \n                \n                    \n                        Name\n                        percentformater\n                    \n                    \n                        Standalone\n                        true\n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        transform\n                        \n                    \n                \n            \n            \n                \ntransform(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/pipes/percentformater.pipe.ts:20\n                        \n                    \n\n\n            \n                \n                        Transforms a numeric value into a formatted percentage string.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The numeric value to format.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The formatted percentage string, e.g. \"+12.34%\" or \"-5.00%\".\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Pipe, PipeTransform } from '@angular/core';\n\n/**\n * Pipe that formats a number as a percentage string with two decimal places.\n * \n * Adds a \"+\" sign for positive values and appends a \"%\" sign.\n * Negative values are displayed with a \"-\" sign automatically by the number formatting.\n */\n@Pipe({\n  name: 'percentformater',\n  standalone: true\n})\nexport class PercentformaterPipe implements PipeTransform {\n  /**\n   * Transforms a numeric value into a formatted percentage string.\n   * \n   * @param value The numeric value to format.\n   * @returns The formatted percentage string, e.g. \"+12.34%\" or \"-5.00%\".\n   */\n  transform(value: number): string {\n    const percent = value.toFixed(2);\n    let result = \"\";\n\n    if (value > 0) {\n      result += \"+\" + percent + \"%\";\n    } else {\n      result += percent + \"%\";\n    }\n    return result;\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PricesCryptoFromApi.html":{"url":"interfaces/PricesCryptoFromApi.html","title":"interface - PricesCryptoFromApi","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PricesCryptoFromApi\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing historical price and volume data\nas provided by the CoinGecko API.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            market_caps\n                                        \n                                \n                                \n                                        \n                                            prices\n                                        \n                                \n                                \n                                        \n                                            total_volumes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        market_caps\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        market_caps:     number[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[][]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        prices\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        prices:     number[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[][]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        total_volumes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        total_volumes:     number[][]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     number[][]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AdvancedCrypto, BasicCrypto, CryptoGraphPrice } from \"../../../models/Crypto.model\";\nimport { ICryptoBaseMapping } from \"../../interfaces/crypto/CryptoBaseMapping.interface\";\nimport { Injectable } from \"@angular/core\";\n\n/**\n * Interface representing the detailed cryptocurrency data structure\n * as received from the CoinGecko API.\n */\nexport interface CryptoFromApi {\n    id: string\n    symbol: string\n    name: string\n    image: string\n    current_price: number\n    market_cap: number\n    market_cap_rank: number\n    fully_diluted_valuation: number\n    total_volume: number\n    high_24h: number\n    low_24h: number\n    price_change_24h: number\n    price_change_percentage_24h: number\n    market_cap_change_24h: number\n    market_cap_change_percentage_24h: number\n    circulating_supply: number\n    total_supply: number\n    max_supply: number\n    ath: number\n    ath_change_percentage: number\n    ath_date: string\n    atl: number\n    atl_change_percentage: number\n    atl_date: string\n    roi: any\n    last_updated: string\n}\n\n/**\n * Interface representing a basic crypto object with minimal information\n * as returned from the CoinGecko API.\n */\nexport interface BasiCryptoFromApi{\n    id:string,\n    name:string,\n    symbol:string\n}\n\n/**\n * Interface representing historical price and volume data\n * as provided by the CoinGecko API.\n */\nexport interface PricesCryptoFromApi {\n    prices: number[][]\n    market_caps: number[][]\n    total_volumes: number[][]\n}\n\n/**\n * Mapping class that transforms raw API data from CoinGecko\n * into application-specific models.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class CoinGekoMapping implements ICryptoBaseMapping {\n    /**\n     * Maps paginated API data into an array of AdvancedCrypto models.\n     * \n     * @param data Raw API response containing crypto market data.\n     * @returns Array of AdvancedCrypto objects with selected fields.\n     */\n    getAllPaginated(data: any): AdvancedCrypto[] {\n        let list=data.map((c: any) => ({\n            id: c.id,\n            name:c.name,\n            image: c.image,\n            symbol:c.symbol,\n            currentPrice:c.current_price,\n            pricechangepercent24horus:c.price_change_percentage_24h\n        }));\n        return list\n    }\n\n    /**\n     * Maps API data into a list of BasicCrypto models.\n     * \n     * @param data Raw API response containing minimal crypto info.\n     * @returns Array of BasicCrypto objects.\n     */\n    getAllList(data:any):BasicCrypto[]{\n        let list=data.map((c: any) => ({\n            id:c.id,\n            name:c.name,\n            symbol:c.symbol\n        }))\n        return list\n    }\n\n    /**\n     * Maps historical price data from the API into CryptoGraphPrice models.\n     * \n     * @param data Raw API response containing price history arrays.\n     * @returns Array of CryptoGraphPrice objects with price and date.\n     */\n    getPriceList(data: any): CryptoGraphPrice[] {\n        let list=data.prices.map((c: any) => ({\n            price:c[1],\n            date:c[0]\n        }))\n        return list\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/ProfilePage.html":{"url":"components/ProfilePage.html","title":"component - ProfilePage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  ProfilePage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/General/profile/profile.page.ts\n\n\n\n    \n        Description\n    \n    \n        Component to view and edit the current user's profile,\nincluding updating password, profile image, and selected currency.\nAlso provides the ability to delete the user account.\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-profile\n            \n\n\n\n            \n                styleUrls\n                ./profile.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./profile.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                formularypassword\n                            \n                            \n                                passwordIcon\n                            \n                            \n                                passwordType\n                            \n                            \n                                selectedCurrency\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteaccount\n                            \n                            \n                                hideShowPassword\n                            \n                            \n                                ionViewWillEnter\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                onChange\n                            \n                            \n                                    Async\n                                onFileChange\n                            \n                            \n                                update\n                            \n                            \n                                updatepassword\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    password\n                                \n                            \n                        \n                    \n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authservice: IAuthenticationService, userservice: IUserbaseService, fbbuilder: FormBuilder, translate: TranslateService, router: Router, alertcontroller: AlertController, mediaService: BaseMediaService, shared: SharedService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/General/profile/profile.page.ts:28\n                            \n                        \n\n                \n                    \n                            Component constructor.\nInjects necessary services such as authentication, user service, form builder, translation, routing, alert controller, media service, and shared services.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Authentication service (injected with token).\n\n                                                        \n                                                \n                                                \n                                                        userservice\n                                                  \n                                                        \n                                                                    IUserbaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User service for user operations (injected with token).\n\n                                                        \n                                                \n                                                \n                                                        fbbuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Form builder for reactive forms.\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translation service for internationalization.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Router service for navigation.\n\n                                                        \n                                                \n                                                \n                                                        alertcontroller\n                                                  \n                                                        \n                                                                    AlertController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Ionic alert controller.\n\n                                                        \n                                                \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        BaseMediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Media handling service (image upload).\n\n                                                        \n                                                \n                                                \n                                                        shared\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Shared service for displaying toasts/messages.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        deleteaccount\n                        \n                    \n                \n            \n            \n                \n                        \n                    deleteaccount()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/profile/profile.page.ts:116\n                        \n                    \n\n\n            \n                \n                        Displays a confirmation dialog for account deletion.\nIf confirmed, calls the service to delete the account, shows a toast, logs out, and navigates to the splash page.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideShowPassword\n                        \n                    \n                \n            \n            \n                \nhideShowPassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/profile/profile.page.ts:86\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the password field, changing the input type and associated icon.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ionViewWillEnter\n                        \n                    \n                \n            \n            \n                \nionViewWillEnter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/profile/profile.page.ts:95\n                        \n                    \n\n\n            \n                \n                        Ionic lifecycle hook triggered each time the view is about to enter.\nSubscribes to user data updates and refreshes the profile information.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/profile/profile.page.ts:188\n                        \n                    \n\n\n            \n                \n                        Angular lifecycle hook called when the component is destroyed.\nUnsubscribes from all active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        onChange\n                        \n                    \n                \n            \n            \n                \nonChange($event: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/profile/profile.page.ts:108\n                        \n                    \n\n\n            \n                \n                        Changes the selected currency for the application and updates the authentication service.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                $event\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        onFileChange\n                        \n                    \n                \n            \n            \n                \n                        \n                    onFileChange(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/profile/profile.page.ts:150\n                        \n                    \n\n\n            \n                \n                        Handles the profile image file change event.\nValidates the selected file, reads it as base64 for preview,\nuploads the image to the server, and updates the user profile.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    File input change event.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/profile/profile.page.ts:174\n                        \n                    \n\n\n            \n                \n                        Updates the user data with the provided event data.\nDisplays success or error toast messages accordingly.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object with user data fields to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatepassword\n                        \n                    \n                \n            \n            \n                \nupdatepassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/profile/profile.page.ts:72\n                        \n                    \n\n\n            \n                \n                        Updates the user's password via the user service.\nResets the form on successful update.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        formularypassword\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FormGroup\n\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/profile/profile.page.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordIcon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eye-off'\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/profile/profile.page.ts:81\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password'\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/profile/profile.page.ts:80\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectedCurrency\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"usd\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/profile/profile.page.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/profile/profile.page.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BasicUser\n\n                    \n                \n                \n                    \n                        Default value : {id:\"\",email:\"\",username:\"\",img:\"\",gender:'',isAdmin:false}\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/profile/profile.page.ts:26\n                        \n                    \n\n\n        \n    \n\n\n    \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        password\n                    \n                \n\n                \n                    \n                        getpassword()\n                    \n                \n                            \n                                \n                                    Defined in src/app/pages/General/profile/profile.page.ts:64\n                                \n                            \n                    \n                        \n                                Getter to access the password control of the reactive form.\n\n\n                        \n                    \n\n            \n        \n\n\n\n\n    \n        import { Component, Inject } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { lastValueFrom, Subscription } from 'rxjs';\nimport { BasicUser, User } from 'src/app/core/models/User.model';\nimport { AUTH_TOKEN, USER_SERVICE_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { BaseMediaService } from 'src/app/core/services/impl/media/base-media.service';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\nimport { IUserbaseService } from 'src/app/core/services/interfaces/user/User-base-service.interface';\nimport { SharedService } from 'src/app/shared/sharedservice/shared.service';\n\n/**\n * Component to view and edit the current user's profile,\n * including updating password, profile image, and selected currency.\n * Also provides the ability to delete the user account.\n */\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.page.html',\n  styleUrls: ['./profile.page.scss'],\n})\nexport class ProfilePage {\n  selectedCurrency: string=\"usd\";\n  user:BasicUser={id:\"\",email:\"\",username:\"\",img:\"\",gender:'',isAdmin:false}\n  formularypassword: FormGroup;\n  private subscriptions:Subscription[]=[]\n\n  /**\n   * Component constructor.\n   * Injects necessary services such as authentication, user service, form builder, translation, routing, alert controller, media service, and shared services.\n   *\n   * @param authservice Authentication service (injected with token).\n   * @param userservice User service for user operations (injected with token).\n   * @param fbbuilder Form builder for reactive forms.\n   * @param translate Translation service for internationalization.\n   * @param router Router service for navigation.\n   * @param alertcontroller Ionic alert controller.\n   * @param mediaService Media handling service (image upload).\n   * @param shared Shared service for displaying toasts/messages.\n   */\n  constructor(\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    @Inject(USER_SERVICE_TOKEN) private userservice:IUserbaseService,\n    private fbbuilder: FormBuilder,\n    private translate: TranslateService,\n    private router:Router,\n    private alertcontroller:AlertController,\n    private mediaService:BaseMediaService,\n    private shared:SharedService\n  ) { \n    this.authservice.setmenu(true)\n    this.selectedCurrency=this.authservice.getCurrency()\n\n    this.formularypassword = this.fbbuilder.group({\n      password: ['', [Validators.required,Validators.minLength(6)]],\n    });\n  }\n\n  /**\n   * Getter to access the password control of the reactive form.\n   */\n  get password(){\n    return this.formularypassword.controls['password'];\n  }\n\n  /**\n   * Updates the user's password via the user service.\n   * Resets the form on successful update.\n   */\n  updatepassword() {\n    this.userservice.updateuserdata({password:this.formularypassword.get('password')?.value}).subscribe({\n      next:(value)=>{\n          this.formularypassword.reset()\n      },\n    })\n  }\n\n  passwordType: string = 'password';\n  passwordIcon: string = 'eye-off';\n\n  /**\n   * Toggles the visibility of the password field, changing the input type and associated icon.\n   */\n  hideShowPassword() {\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n    this.passwordIcon = this.passwordIcon === 'eye-off' ? 'eye' : 'eye-off';\n}\n\n  /**\n   * Ionic lifecycle hook triggered each time the view is about to enter.\n   * Subscribes to user data updates and refreshes the profile information.\n   */\n  ionViewWillEnter(){\n    this.subscriptions.push(this.userservice.GetBehaviourUser().subscribe({\n      next:(value)=>{\n          this.user=value\n      },\n    }))\n  }\n\n  /**\n   * Changes the selected currency for the application and updates the authentication service.\n   *\n   * @param event New selected currency.\n   */\n  onChange($event: string) {\n    this.authservice.setCurrency($event)\n  }\n\n  /**\n   * Displays a confirmation dialog for account deletion.\n   * If confirmed, calls the service to delete the account, shows a toast, logs out, and navigates to the splash page.\n   */\n  async deleteaccount(){\n    const alert=await this.alertcontroller.create({\n      header:this.translate.instant(\"PROFILE.DELETEACCOUNTQUESTION\"),\n      buttons:[{\n        text:this.translate.instant(\"COMMON.YES\"),\n        handler:()=>{\n          this.subscriptions.push(this.authservice.Deleteuser(this.authservice.getToken(),this.authservice.getId()).subscribe({\n            next:(value)=>{\n              this.shared.showToast(\"success\",this.translate.instant(\"CRUDUSER.DELETEACCOUNTSUCCESSFUL\"))\n              this.authservice.Logout()\n              this.router.navigate(['/splash'])\n            },\n            error:(err)=>{\n              this.shared.showToast(\"danger\",this.translate.instant(\"CRUDUSER.ERRORS.DELETEACCOUNTFAILED\"))\n            },\n          }))\n        },\n      },{\n        text:this.translate.instant(\"COMMON.NO\"),\n        handler:()=>{\n          \n        }\n      }]\n    })\n    alert.present()\n  }\n\n  /**\n   * Handles the profile image file change event.\n   * Validates the selected file, reads it as base64 for preview,\n   * uploads the image to the server, and updates the user profile.\n   *\n   * @param event File input change event.\n   */\n  async onFileChange(event: any) {\n    const file = event.target.files[0];\n\n    if (file && file.type.startsWith('image/')) {\n      const reader = new FileReader();\n\n      reader.onload = (e: any) => {\n        this.user.img = e.target.result;\n      };\n\n      const blob = file;\n      const uploadedBlob = await lastValueFrom(this.mediaService.upload(blob))\n      await lastValueFrom(this.userservice.updateuserdata({image:uploadedBlob[0]}));\n\n      reader.readAsDataURL(file);\n    }\n  }\n\n  /**\n   * Updates the user data with the provided event data.\n   * Displays success or error toast messages accordingly.\n   *\n   * @param event Object with user data fields to update.\n   */\n  update(event:any){\n    this.subscriptions.push(this.userservice.updateuserdata(event).subscribe({\n      next:(value)=>{\n          this.shared.showToast(\"success\",this.translate.instant(\"CRUDUSER.UPDATE.UPDATESUCCESSFULL\"))\n      },error:(err)=>{\n        this.shared.showToast(\"danger\",this.translate.instant(\"CRUDUSER.ERRORS.UPDATEFAILED\"))\n      },\n    }))\n  }\n\n  /**\n   * Angular lifecycle hook called when the component is destroyed.\n   * Unsubscribes from all active subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(){\n    this.subscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n}\n    \n\n    \n        \n  \n    {{ 'MAINMENU.PROFILE' | translate }}\n  \n\n\n\n  \n\n  \n    \n      \n        \n          \n            \n          \n          \n          \n          \n        \n        \n        \n      \n    \n\n    \n      \n        {{ user.username }}\n        {{ user.email }}\n      \n    \n\n    \n\n\n    \n      \n        \n          \n            \n            \n              \n            \n          \n        \n      \n\n      \n        \n          \n            {{'CRUDUSER.ERRORS.PASSWORDREQUIRED' | translate}}\n            {{'CRUDUSER.ERRORS.PASSWORDMINLENGHT' | translate}}\n          \n        \n      \n\n      \n        \n          \n            {{ 'CRUDUSER.UPDATE.PASSWORD' | translate }}\n          \n        \n      \n    -->\n\n    \n      \n        \n          {{ 'CURRENCY.EURO' | translate }} (€)\n          {{ 'CURRENCY.DOLLAR' | translate }} ($)\n          {{ 'CURRENCY.LIBRA' | translate }} (£)\n        \n      \n    \n\n    \n      \n        {{ 'PROFILE.DELETEACCOUNT' | translate }}\n      \n    \n  \n  \n\n\n    \n\n    \n                \n                    ./profile.page.scss\n                \n                .profile-page {\n  padding: 20px;\n}\n\n.profile-image {\n  width: 100px;\n  height: 100px;\n  border-radius: 50%;\n  border: 2px solid #ddd;\n}\n\n.profile-username,\n.profile-email {\n  text-align: center;\n  font-size: 18px;\n  font-weight: bold;\n}\n\n.input-field,\n.currency-select {\n  --padding-start: 16px;\n  --padding-end: 16px;\n}\n\n.update-button {\n  margin-top: 12px;\n  border-radius: 8px;\n}\n\n.password-icon {\n  font-size: 22px;\n}\n\n.ion-margin-bottom {\n  margin-bottom: 16px;\n}\n\n.ion-justify-content-center {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n}\n\n.ion-text-center {\n  text-align: center;\n}\n\n.ion-button {\n  margin-top: 12px;\n}\n\n/* Contenedor de la imagen de perfil */\n.image-container {\n  position: relative;\n  display: inline-block;\n  width: 200px; /* Tamaño del avatar */\n  height: 200px;\n  border-radius: 50%; /* Hace la imagen circular */\n  overflow: hidden; /* Asegura que la imagen quede dentro del círculo */\n  box-shadow: 0 0 10px rgba(0, 0, 0, 0.1); /* Añade una sombra sutil */\n  cursor: pointer; /* Cambia el cursor a una mano cuando el ratón esté sobre la imagen */\n  transition: transform 0.3s ease; /* Animación suave al hacer hover */\n}\n\n.image-container p-image {\n  width: 100%;\n  height: 100%;\n  object-fit: cover; /* Asegura que la imagen cubra el círculo sin deformarse */\n}\n\n.overlay {\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  background-color: rgba(0, 0, 0, 0.4); /* Oscurece la imagen */\n  opacity: 0;\n  transition: opacity 0.3s ease;\n}\n\n.refresh-icon {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  font-size: 30px;\n  color: #fff;\n  opacity: 0;\n  transition: opacity 0.3s ease;\n  cursor: pointer;\n}\n\n.image-container:hover .overlay {\n  opacity: 1; /* Muestra la capa oscura al pasar el ratón */\n}\n\n.image-container:hover .refresh-icon {\n  opacity: 1; /* Muestra el ícono de refresh al pasar el ratón */\n}\n\n.image-container:hover {\n  transform: scale(1.05); /* Aumenta ligeramente el tamaño de la imagen al hacer hover */\n}\n\n.formulary {\n  width: 50%; \n  display: block; \n  margin: auto; \n  min-width: 350px;\n}\nion-avatar.user-img {\n  \n  display: block;\n  margin: auto!important;\n  width: 200px; /* Tamaño ligeramente mayor para un avatar más prominente */\n  height: 200px; /* Mantiene la proporción cuadrada */\n  border-radius: 50%; /* Hace que la imagen sea redonda */\n  margin: 16px 0; /* Espaciado superior e inferior */\n  overflow: hidden; /* Asegura que la imagen no sobresalga del círculo */\n  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2); /* Sombra suave para darle profundidad */\n  transition: transform 0.3s ease-in-out, box-shadow 0.3s ease-in-out; /* Transiciones suaves al pasar el mouse */\n}\n\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ \\'MAINMENU.PROFILE\\' | translate }}                                                                                                                                          {{ user.username }}        {{ user.email }}                                                                                                                                                        {{\\'CRUDUSER.ERRORS.PASSWORDREQUIRED\\' | translate}}            {{\\'CRUDUSER.ERRORS.PASSWORDMINLENGHT\\' | translate}}                                                            {{ \\'CRUDUSER.UPDATE.PASSWORD\\' | translate }}                            -->                            {{ \\'CURRENCY.EURO\\' | translate }} (€)          {{ \\'CURRENCY.DOLLAR\\' | translate }} ($)          {{ \\'CURRENCY.LIBRA\\' | translate }} (£)                                    {{ \\'PROFILE.DELETEACCOUNT\\' | translate }}              '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'ProfilePage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfilePageModule.html":{"url":"modules/ProfilePageModule.html","title":"module - ProfilePageModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfilePageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ProfilePageModule\n\n\n\ncluster_ProfilePageModule_declarations\n\n\n\ncluster_ProfilePageModule_imports\n\n\n\n\nProfilePage\n\nProfilePage\n\n\n\nProfilePageModule\n\nProfilePageModule\n\nProfilePageModule -->\n\nProfilePage->ProfilePageModule\n\n\n\n\n\nProfilePageRoutingModule\n\nProfilePageRoutingModule\n\nProfilePageModule -->\n\nProfilePageRoutingModule->ProfilePageModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nProfilePageModule -->\n\nSharedModule->ProfilePageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/profile/profile.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            ProfilePage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ProfilePageRoutingModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { ProfilePageRoutingModule } from './profile-routing.module';\n\nimport { ProfilePage } from './profile.page';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ButtonModule } from 'primeng/button';\nimport { TableModule } from 'primeng/table';\nimport { ImageModule } from 'primeng/image';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { SharedModule } from \"../../../shared/shared.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    ProfilePageRoutingModule,\n    ReactiveFormsModule,\n    TranslateModule.forChild(),\n    ButtonModule,\n    TableModule,\n    ImageModule,\n    SharedModule\n],\n  declarations: [ProfilePage]\n})\nexport class ProfilePageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ProfilePageRoutingModule.html":{"url":"modules/ProfilePageRoutingModule.html","title":"module - ProfilePageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    ProfilePageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/profile/profile-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { ProfilePage } from './profile.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: ProfilePage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class ProfilePageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/RegisterPage.html":{"url":"components/RegisterPage.html","title":"component - RegisterPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  RegisterPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/Start/register/register.page.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-register\n            \n\n\n\n            \n                styleUrls\n                ./register.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./register.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                passwordIcon\n                            \n                            \n                                passwordType\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                changeLanguage\n                            \n                            \n                                hideShowPassword\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                    Async\n                                present\n                            \n                            \n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, authservice: IAuthenticationService, fbbuilder: FormBuilder, translationService: TranslationService, shared: SharedService, alertcontroller: AlertController, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/Start/register/register.page.ts:22\n                            \n                        \n\n                \n                    \n                            Constructor for dependency injection.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular Router for navigation.\n\n                                                        \n                                                \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                The authentication service (injected via token).\n\n                                                        \n                                                \n                                                \n                                                        fbbuilder\n                                                  \n                                                        \n                                                                    FormBuilder\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular FormBuilder (currently unused).\n\n                                                        \n                                                \n                                                \n                                                        translationService\n                                                  \n                                                        \n                                                                        TranslationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Custom translation service to manage app language.\n\n                                                        \n                                                \n                                                \n                                                        shared\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                SharedService for showing toast messages.\n\n                                                        \n                                                \n                                                \n                                                        alertcontroller\n                                                  \n                                                        \n                                                                    AlertController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Ionic AlertController for showing language selection.\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                ngx-translate service for instant translations.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        changeLanguage\n                        \n                    \n                \n            \n            \n                \nchangeLanguage(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/register/register.page.ts:50\n                        \n                    \n\n\n            \n                \n                        Changes the application language.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The language code (e.g., 'en' or 'es').\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hideShowPassword\n                        \n                    \n                \n            \n            \n                \nhideShowPassword()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/register/register.page.ts:76\n                        \n                    \n\n\n            \n                \n                        Toggles the visibility of the password input field.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/register/register.page.ts:84\n                        \n                    \n\n\n            \n                \n                        Angular lifecycle hook to clean up subscriptions and avoid memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        present\n                        \n                    \n                \n            \n            \n                \n                        \n                    present()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/register/register.page.ts:93\n                        \n                    \n\n\n            \n                \n                        Opens an alert dialog to allow the user to select a language.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        register\n                        \n                    \n                \n            \n            \n                \nregister(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/Start/register/register.page.ts:59\n                        \n                    \n\n\n            \n                \n                        Submits the registration form.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object containing form values.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        passwordIcon\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'eye-off'\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/Start/register/register.page.ts:71\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        passwordType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'password'\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/Start/register/register.page.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/Start/register/register.page.ts:22\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject, } from '@angular/core';\nimport { FormBuilder } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AlertController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\nimport { Subscription } from 'rxjs';\nimport { AUTH_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { TranslationService } from 'src/app/core/services/impl/translation.service';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\nimport { SharedService } from 'src/app/shared/sharedservice/shared.service';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.page.html',\n  styleUrls: ['./register.page.scss'],\n})\n/**\n * RegisterPage allows users to create a new account and select their preferred language.\n * It provides form submission, language switching, and password visibility toggling functionality.\n */\nexport class RegisterPage {\n  private subscriptions:Subscription[]=[]\n\n  /**\n   * Constructor for dependency injection.\n   *\n   * @param router Angular Router for navigation.\n   * @param authservice The authentication service (injected via token).\n   * @param fbbuilder Angular FormBuilder (currently unused).\n   * @param translationService Custom translation service to manage app language.\n   * @param shared SharedService for showing toast messages.\n   * @param alertcontroller Ionic AlertController for showing language selection.\n   * @param translate ngx-translate service for instant translations.\n   */\n  constructor(\n    private router:Router,\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    private fbbuilder: FormBuilder,\n    private translationService: TranslationService,\n    private shared:SharedService,\n    private alertcontroller:AlertController,\n    private translate: TranslateService\n  ) { }\n\n  /**\n   * Changes the application language.\n   *\n   * @param lang The language code (e.g., 'en' or 'es').\n   */\n  changeLanguage(lang: string) {\n    this.translationService.setLanguage(lang);\n  }\n\n  /**\n   * Submits the registration form.\n   *\n   * @param event Object containing form values.\n   */\n  register(event:any) {\n    this.subscriptions.push(this.authservice.Register(event).subscribe({\n      next:(value)=>{\n          this.shared.showToast(\"success\",this.translate.instant(\"CRUDUSER.REGISTER.REGISTERSUCCESSFUL\"))\n          this.router.navigate(['/splash'])\n      },error:(err)=>{\n        this.shared.showToast(\"danger\",err)\n      }\n    }))\n  }\n\n  passwordType: string = 'password';\n  passwordIcon: string = 'eye-off';\n\n  /**\n   * Toggles the visibility of the password input field.\n   */\n  hideShowPassword() {\n    this.passwordType = this.passwordType === 'text' ? 'password' : 'text';\n    this.passwordIcon = this.passwordIcon === 'eye-off' ? 'eye' : 'eye-off';\n  }\n\n  /**\n   * Angular lifecycle hook to clean up subscriptions and avoid memory leaks.\n   */\n  ngOnDestroy(){\n    this.subscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n\n  /**\n   * Opens an alert dialog to allow the user to select a language.\n   */\n  async present(){\n    const alert = await this.alertcontroller.create({\n      header: this.translate.instant('MAINMENU.SELECTLANGUAGE'), \n      inputs: [\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('COMMON.ENGLISH'),\n          value: 'en', \n          checked: this.translationService.getCurrentLanguage() === 'en', \n        },\n        {\n          name: 'language',\n          type: 'radio',\n          label: this.translate.instant('COMMON.SPANISH'),\n          value: 'es', \n          checked: this.translationService.getCurrentLanguage() === 'es',\n        },\n      ],\n      buttons: [\n        {\n          text: this.translate.instant('COMMON.CANCEL'), \n          role: 'cancel',\n        },\n        {\n          text: this.translate.instant('COMMON.SAVE'),\n          handler: (data) => {\n            if (data) {\n              this.translationService.setLanguage(data)\n              this.translate.use(data)\n            }\n          },\n        },\n      ],\n    });\n    await alert.present();\n  }\n}\n    \n\n    \n        \n  \n    {{'CRUDUSER.REGISTER.REGISTER' | translate}}\n  \n\n\n\n  \n\n  \n  \n    \n  \n\n  \n    \n      \n    \n  \n\n\n\n    \n\n    \n                \n                    ./register.page.scss\n                \n                //ion-content {\n  //position: relative; /* Establece un contexto de posición para los elementos hijos */\n  //height: 100vh;      /* Asegura que el ion-content ocupe toda la altura de la ventana */\n//}\n\n//app-formulary {\n//  position: absolute;  /* Usamos absolute para posicionar el formulario */\n//  top: 50%;             /* Lo mueve al 50% de la altura del contenedor */\n//  left: 50%;            /* Lo mueve al 50% de la anchura del contenedor */\n//  transform: translate(-50%, -50%); /* Ajusta la posición para centrarlo */\n//  width: 100%;          /* Permite que el formulario use todo el ancho disponible */\n//  padding: 1rem;        /* Agrega un poco de espacio interno */\n//}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{\\'CRUDUSER.REGISTER.REGISTER\\' | translate}}                                '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'RegisterPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegisterPageModule.html":{"url":"modules/RegisterPageModule.html","title":"module - RegisterPageModule","body":"\n                   \n\n\n\n\n    Modules\n    RegisterPageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_RegisterPageModule\n\n\n\ncluster_RegisterPageModule_imports\n\n\n\ncluster_RegisterPageModule_declarations\n\n\n\n\nRegisterPage\n\nRegisterPage\n\n\n\nRegisterPageModule\n\nRegisterPageModule\n\nRegisterPageModule -->\n\nRegisterPage->RegisterPageModule\n\n\n\n\n\nRegisterPageRoutingModule\n\nRegisterPageRoutingModule\n\nRegisterPageModule -->\n\nRegisterPageRoutingModule->RegisterPageModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nRegisterPageModule -->\n\nSharedModule->RegisterPageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/Start/register/register.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            RegisterPage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RegisterPageRoutingModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { RegisterPageRoutingModule } from './register-routing.module';\n\nimport { RegisterPage } from './register.page';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { SharedModule } from \"../../../shared/shared.module\";\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    RegisterPageRoutingModule,\n    ReactiveFormsModule,\n    TranslateModule.forChild(),\n    SharedModule\n],\n  declarations: [RegisterPage]\n})\nexport class RegisterPageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RegisterPageRoutingModule.html":{"url":"modules/RegisterPageRoutingModule.html","title":"module - RegisterPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    RegisterPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/Start/register/register-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { RegisterPage } from './register.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: RegisterPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class RegisterPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/RegisterPayLoad.html":{"url":"interfaces/RegisterPayLoad.html","title":"interface - RegisterPayLoad","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  RegisterPayLoad\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/auth.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            gender\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LoginPayLoad{\n    email:string,\n    password:string\n}\n\nexport interface RegisterPayLoad{\n    email:string,\n    gender:string\n    username:string,\n    password:string\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SearchPage.html":{"url":"components/SearchPage.html","title":"component - SearchPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SearchPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/pages/General/search/search.page.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-search\n            \n\n\n\n            \n                styleUrls\n                ./search.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./search.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                currency\n                            \n                            \n                                hardlist\n                            \n                            \n                                idlist\n                            \n                            \n                                inactivitytimeout\n                            \n                            \n                                isStoppedSpeechRecog\n                            \n                            \n                                list\n                            \n                            \n                                recognition\n                            \n                            \n                                searchinput\n                            \n                            \n                                    Private\n                                susbscriptions\n                            \n                            \n                                text\n                            \n                            \n                                textemporal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                addcryptotodatabase\n                            \n                            \n                                    Async\n                                addcryptotolist\n                            \n                            \n                                    Async\n                                click\n                            \n                            \n                                filterfinal\n                            \n                            \n                                    Async\n                                getcryptobyid\n                            \n                            \n                                init\n                            \n                            \n                                juntartexto\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                            \n                                start\n                            \n                            \n                                stop\n                            \n                            \n                                    Async\n                                takevoice\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(authservice: IAuthenticationService, translate: TranslateService, shared: SharedService, activateroute: ActivatedRoute, router: Router, userservice: IUserbaseService, cryptoservice: ICryptobaseService)\n                    \n                \n                        \n                            \n                                Defined in src/app/pages/General/search/search.page.ts:30\n                            \n                        \n\n                \n                    \n                            Constructor to inject services and initialize route params.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        authservice\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Auth service for user session and config.\n\n                                                        \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Translate service for i18n.\n\n                                                        \n                                                \n                                                \n                                                        shared\n                                                  \n                                                        \n                                                                        SharedService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Shared service for common helpers like toast.\n\n                                                        \n                                                \n                                                \n                                                        activateroute\n                                                  \n                                                        \n                                                                    ActivatedRoute\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Current activated route.\n\n                                                        \n                                                \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular router for navigation.\n\n                                                        \n                                                \n                                                \n                                                        userservice\n                                                  \n                                                        \n                                                                    IUserbaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                User-related data service.\n\n                                                        \n                                                \n                                                \n                                                        cryptoservice\n                                                  \n                                                        \n                                                                    ICryptobaseService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Crypto service for querying data.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \n                        \n                    addcryptotodatabase(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:129\n                        \n                    \n\n\n            \n                \n                        Adds a crypto to the user database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Crypto ID to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise that resolves when complete.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        addcryptotolist\n                        \n                    \n                \n            \n            \n                \n                        \n                    addcryptotolist(idlist: string, idcrypto: string, idcryptoxd: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:147\n                        \n                    \n\n\n            \n                \n                        Adds a crypto to a user list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idlist\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the list.\n\n                                            \n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the crypto in DB.\n\n                                            \n                                        \n                                        \n                                                idcryptoxd\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    External ID of the crypto (e.g., from API).\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     unknown\n\n                        \n                            \n                                Promise that resolves when added.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        click\n                        \n                    \n                \n            \n            \n                \n                        \n                    click(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:91\n                        \n                    \n\n\n            \n                \n                        Handles click on a crypto. Navigates or adds crypto to user list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the selected crypto.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterfinal\n                        \n                    \n                \n            \n            \n                \nfilterfinal(event: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:80\n                        \n                    \n\n\n            \n                \n                        Filters the crypto list based on search input value.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Event containing the search string.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        getcryptobyid\n                        \n                    \n                \n            \n            \n                \n                        \n                    getcryptobyid(idcrypto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:113\n                        \n                    \n\n\n            \n                \n                        Returns the ID of a crypto from the user database, or -1 if not found.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    ID of the crypto to search.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                Promise resolving to the database crypto ID.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        init\n                        \n                    \n                \n            \n            \n                \ninit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:214\n                        \n                    \n\n\n            \n                \n                        Initializes speech recognition configuration and timeout handler.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        juntartexto\n                        \n                    \n                \n            \n            \n                \njuntartexto()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:248\n                        \n                    \n\n\n            \n                \n                        Combines spoken text results and resets the temporary buffer.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:199\n                        \n                    \n\n\n            \n                \n                        Angular lifecycle hook called when the component is destroyed.\nUnsubscribes from all active subscriptions to prevent memory leaks.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:65\n                        \n                    \n\n\n            \n                \n                        Lifecycle hook that initializes voice recognition and fetches the list of cryptos.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        start\n                        \n                    \n                \n            \n            \n                \nstart()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:231\n                        \n                    \n\n\n            \n                \n                        Starts speech recognition using WebKit engine.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        stop\n                        \n                    \n                \n            \n            \n                \nstop()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:239\n                        \n                    \n\n\n            \n                \n                        Stops speech recognition and stores the last spoken text.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        takevoice\n                        \n                    \n                \n            \n            \n                \n                        \n                    takevoice()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/pages/General/search/search.page.ts:162\n                        \n                    \n\n\n            \n                \n                        Starts voice recognition using Capacitor or WebKit fallback.\nUpdates the search input once speech is detected.\n\n\n                        \n                            Returns :         any\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        currency\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.authservice.getCurrency()\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hardlist\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BasicCrypto[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        idlist\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        inactivitytimeout\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:205\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isStoppedSpeechRecog\n                        \n                    \n                \n            \n                \n                    \n                        Default value : false\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:207\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        list\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BasicCrypto[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recognition\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new webkitSpeechRecognition()\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:206\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        searchinput\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : \"\"\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        susbscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        text\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:209\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textemporal\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(\"\")\n                    \n                \n                    \n                        \n                                Defined in src/app/pages/General/search/search.page.ts:208\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject, OnInit } from '@angular/core';\nimport { BasicCrypto } from 'src/app/core/models/Crypto.model';\nimport { AUTH_TOKEN, CRYPTO_SERVICE_TOKEN, USER_SERVICE_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { ICryptobaseService } from 'src/app/core/services/interfaces/crypto/Crypto-base-service.interface';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\nimport { BehaviorSubject, Subscription } from 'rxjs';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { IUserbaseService } from 'src/app/core/services/interfaces/user/User-base-service.interface';\nimport { User } from 'src/app/core/models/User.model';\nimport { TranslateService } from '@ngx-translate/core';\nimport { SharedService } from 'src/app/shared/sharedservice/shared.service';\nimport { SpeechRecognition } from '@capacitor-community/speech-recognition';\nimport { Capacitor } from '@capacitor/core';\n\ndeclare var webkitSpeechRecognition: any;\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.page.html',\n  styleUrls: ['./search.page.scss'],\n})\n/**\n * Component that provides search functionality for cryptocurrencies.\n * It allows navigation to detail views or adding cryptos to a user list.\n * Includes voice search via Capacitor or WebKit-based recognition.\n */\nexport class SearchPage implements OnInit {\n  idlist:string=\"\"\n  searchinput:string=\"\"\n  private susbscriptions:Subscription[]=[]\n\n  /**\n   * Constructor to inject services and initialize route params.\n   *\n   * @param authservice Auth service for user session and config.\n   * @param translate Translate service for i18n.\n   * @param shared Shared service for common helpers like toast.\n   * @param activateroute Current activated route.\n   * @param router Angular router for navigation.\n   * @param userservice User-related data service.\n   * @param cryptoservice Crypto service for querying data.\n   */\n  constructor(\n    @Inject(AUTH_TOKEN) private authservice:IAuthenticationService,\n    private translate: TranslateService,\n    private shared:SharedService,\n    private activateroute:ActivatedRoute,\n    private router:Router,\n    @Inject(USER_SERVICE_TOKEN) private userservice:IUserbaseService,\n    @Inject(CRYPTO_SERVICE_TOKEN) private cryptoservice:ICryptobaseService,\n  ) { \n    this.authservice.setmenu(true)\n    this.activateroute.paramMap.subscribe(params=>{\n      this.idlist=params.get('id')??\"\"\n    })\n  }\n\n  hardlist:BasicCrypto[]=[]\n  list:BasicCrypto[]=[]\n  currency=this.authservice.getCurrency()\n\n  /**\n   * Lifecycle hook that initializes voice recognition and fetches the list of cryptos.\n   */\n  ngOnInit() {\n    this.init()\n    this.susbscriptions.push(this.cryptoservice.getAllSimple().subscribe({\n      next:(value)=>{\n        this.hardlist.push(...value)\n        this.list=value\n      },\n    }))\n  }\n\n  /**\n   * Filters the crypto list based on search input value.\n   *\n   * @param event Event containing the search string.\n   */\n  filterfinal(event: any){\n    let value=event.detail.value\n    \n    this.list=this.hardlist.filter(c=>c.name.includes(value))\n  }\n\n  /**\n   * Handles click on a crypto. Navigates or adds crypto to user list.\n   *\n   * @param id ID of the selected crypto.\n   */\n  async click(id:string){\n    if(this.idlist==\"\"){\n      this.router.navigate(['/cryptoview',id,this.currency])\n    }else{\n      let idfinal=await this.getcryptobyid(\"\"+id)\n      if(idfinal+\"\"!=\"-1\"){\n        let data=await this.addcryptotolist(this.idlist,idfinal+\"\",id)\n        this.shared.showToast(\"success\",this.translate.instant(\"CRYPTOLIST.CRYPTOADDEDSUCCESSFUL\"))\n        this.router.navigate(['/listcontent',this.idlist])\n      }else{\n        idfinal=await this.addcryptotodatabase(id)\n        this.click(id)\n      }\n    }\n  }\n\n  /**\n   * Returns the ID of a crypto from the user database, or -1 if not found.\n   *\n   * @param idcrypto ID of the crypto to search.\n   * @returns Promise resolving to the database crypto ID.\n   */\n  async getcryptobyid(idcrypto:string):Promise{\n    return new Promise((resolve,reject)=>{\n      this.susbscriptions.push(this.userservice.findcryptobyid(idcrypto).subscribe({\n        next:(value)=>{\n            resolve(value)\n        },\n      }))\n    })\n  }\n\n  /**\n   * Adds a crypto to the user database.\n   *\n   * @param id Crypto ID to add.\n   * @returns Promise that resolves when complete.\n   */\n  async addcryptotodatabase(id:string){\n    return new Promise((resolve,reject)=>{\n      this.susbscriptions.push(this.userservice.addcryptotodatabase(this.list.filter(c=>c.id==id)[0]).subscribe({\n        next:(value)=>{\n            resolve(value)\n        },\n      }))\n    })\n  }\n\n  /**\n   * Adds a crypto to a user list.\n   *\n   * @param idlist ID of the list.\n   * @param idcrypto ID of the crypto in DB.\n   * @param idcryptoxd External ID of the crypto (e.g., from API).\n   * @returns Promise that resolves when added.\n   */\n  async addcryptotolist(idlist:string,idcrypto:string,idcryptoxd:string){\n    let crypto=this.list.filter(c=>c.id==idcryptoxd)[0]\n    return new Promise((resolve,reject)=>{\n      this.susbscriptions.push(this.userservice.addCryptoToList(idlist,idcrypto,crypto).subscribe({\n        next:(value)=>{\n          resolve(value)\n        },\n      }))\n    })\n  }\n\n  /**\n   * Starts voice recognition using Capacitor or WebKit fallback.\n   * Updates the search input once speech is detected.\n   */\n  async takevoice() {\n    if(Capacitor.isNativePlatform()){\n      try{\n        await SpeechRecognition.requestPermissions();\n      \n        await SpeechRecognition.available();\n    \n        const result = await SpeechRecognition.start({\n          language: \"es-ES\",\n          maxResults: 1,\n        });\n        \n        const spokenText = result.matches[0];\n        \n        this.searchinput=spokenText\n        this.filterfinal({detail:{value:spokenText}})\n      } catch (error) {\n        console.error('Error en el reconocimiento de voz:', error);\n      }\n    }else{\n      this.start()\n      this.susbscriptions.push(this.textemporal.subscribe({\n        next:(value)=>{\n          if(value!=\"\"){\n            this.searchinput=value\n            this.filterfinal({detail:{value:value}})\n          }\n        },\n      }))\n    }\n    \n  }\n\n  /**\n   * Angular lifecycle hook called when the component is destroyed.\n   * Unsubscribes from all active subscriptions to prevent memory leaks.\n   */\n  ngOnDestroy(){\n    this.susbscriptions.forEach(c=>{\n      c.unsubscribe()\n    })\n  }\n\n  inactivitytimeout:any\n  recognition = new webkitSpeechRecognition();\n  isStoppedSpeechRecog = false;\n  textemporal: BehaviorSubject =new BehaviorSubject(\"\");\n  text: string = '';\n\n  /**\n   * Initializes speech recognition configuration and timeout handler.\n   */\n  init() {\n    this.recognition.addEventListener('result', (event: any) => {\n      const transcript = event.results[0][0].transcript\n      if (event.results[0].isFinal) {\n        this.textemporal.next(transcript);\n      }\n\n      clearTimeout(this.inactivitytimeout);\n      this.inactivitytimeout = setTimeout(() => {\n        this.stop();\n      }, 3000); \n    });\n  }\n\n  /**\n   * Starts speech recognition using WebKit engine.\n   */\n  start() {\n    this.isStoppedSpeechRecog = false;\n    this.recognition.start();\n  }\n\n  /**\n   * Stops speech recognition and stores the last spoken text.\n   */\n  stop() {\n    this.isStoppedSpeechRecog = true;\n    this.juntartexto();\n    this.recognition.stop();\n  }\n\n  /**\n   * Combines spoken text results and resets the temporary buffer.\n   */\n  juntartexto() {\n    this.text = `${this.text} ${this.textemporal}.`;\n    this.textemporal.next('');\n  }\n}\n    \n\n    \n        \n  \n    {{ 'MAINMENU.SEARCH' | translate }}\n  \n\n\n\n\n  \n\n  \n    \n      \n      \n      \n\n      \n\n    \n\n  \n\n  \n    \n      \n      \n   \n  \n\n\n\n    \n\n    \n                \n                    ./search.page.scss\n                \n                cdk-virtual-scroll-viewport {\n    height: 90%!important;\n    width: 100%;\n  }\n\n  ion-content{\n    --keyboard-offset: 0px!important;\n  }\n\n  .search-page {\n  }\n  \n  /* Contenedor del buscador */\n  .search-container {\n    display: flex;\n    justify-content: center;\n    margin: 1.5rem auto;\n    width: 100%;\n  }\n  \n  /* Barra de búsqueda */\n  .search-bar {\n    width: 90%;\n    max-width: 600px;\n    border-radius: 50px;\n    box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.1);\n  }\n  \n  /* Input estilizado */\n  #searchinput {\n    --padding-start: 1rem;\n    --padding-end: 1rem;\n  }\n  \n  /* Lista de resultados */\n  .results-list {\n    padding: 1rem;\n    height: 85%!important;\n    display: flex;\n    flex-direction: column;\n    gap: 0.5rem; /* Espaciado entre items */\n  }\n  \n  ion-item {\n    border-radius: 10px;\n    box-shadow: 0px 2px 4px rgba(0, 0, 0, 0.1);\n    margin: 0 auto;\n    max-width: 600px;\n    transition: transform 0.2s ease, box-shadow 0.2s ease;\n  }\n  \n  ion-item:hover {\n    transform: translateY(-2px);\n    box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);\n  }\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = '      {{ \\'MAINMENU.SEARCH\\' | translate }}                                                               '\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'SearchPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchPageModule.html":{"url":"modules/SearchPageModule.html","title":"module - SearchPageModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchPageModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SearchPageModule\n\n\n\ncluster_SearchPageModule_imports\n\n\n\ncluster_SearchPageModule_declarations\n\n\n\n\nSearchPage\n\nSearchPage\n\n\n\nSearchPageModule\n\nSearchPageModule\n\nSearchPageModule -->\n\nSearchPage->SearchPageModule\n\n\n\n\n\nSearchPageRoutingModule\n\nSearchPageRoutingModule\n\nSearchPageModule -->\n\nSearchPageRoutingModule->SearchPageModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nSearchPageModule -->\n\nSharedModule->SearchPageModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/search/search.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            SearchPage\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            SearchPageRoutingModule\n                        \n                        \n                            SharedModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { SearchPageRoutingModule } from './search-routing.module';\n\nimport { SearchPage } from './search.page';\nimport { SharedModule } from 'src/app/shared/shared.module';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ScrollingModule } from '@angular/cdk/scrolling';\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    SearchPageRoutingModule,\n    TranslateModule.forChild(),\n    SharedModule,\n    ScrollingModule\n  ],\n  declarations: [SearchPage]\n})\nexport class SearchPageModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SearchPageRoutingModule.html":{"url":"modules/SearchPageRoutingModule.html","title":"module - SearchPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    SearchPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/pages/General/search/search-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SearchPage } from './search.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SearchPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SearchPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SharedModule.html":{"url":"modules/SharedModule.html","title":"module - SharedModule","body":"\n                   \n\n\n\n\n    Modules\n    SharedModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_declarations\n\n\n\ncluster_SharedModule_imports\n\n\n\ncluster_SharedModule_exports\n\n\n\n\nAdminFormularyComponent\n\nAdminFormularyComponent\n\n\n\nSharedModule\n\nSharedModule\n\nSharedModule -->\n\nAdminFormularyComponent->SharedModule\n\n\n\n\n\nCryptocardComponent\n\nCryptocardComponent\n\nSharedModule -->\n\nCryptocardComponent->SharedModule\n\n\n\n\n\nCryptosimplecardComponent\n\nCryptosimplecardComponent\n\nSharedModule -->\n\nCryptosimplecardComponent->SharedModule\n\n\n\n\n\nCustomGenderComponent\n\nCustomGenderComponent\n\nSharedModule -->\n\nCustomGenderComponent->SharedModule\n\n\n\n\n\nFormularyComponent\n\nFormularyComponent\n\nSharedModule -->\n\nFormularyComponent->SharedModule\n\n\n\n\n\nListcryptoComponent\n\nListcryptoComponent\n\nSharedModule -->\n\nListcryptoComponent->SharedModule\n\n\n\n\n\nListformularyComponent\n\nListformularyComponent\n\nSharedModule -->\n\nListformularyComponent->SharedModule\n\n\n\n\n\nAdminFormularyComponent \n\nAdminFormularyComponent \n\nAdminFormularyComponent  -->\n\nSharedModule->AdminFormularyComponent \n\n\n\n\n\nCryptocardComponent \n\nCryptocardComponent \n\nCryptocardComponent  -->\n\nSharedModule->CryptocardComponent \n\n\n\n\n\nCryptosimplecardComponent \n\nCryptosimplecardComponent \n\nCryptosimplecardComponent  -->\n\nSharedModule->CryptosimplecardComponent \n\n\n\n\n\nCustomGenderComponent \n\nCustomGenderComponent \n\nCustomGenderComponent  -->\n\nSharedModule->CustomGenderComponent \n\n\n\n\n\nFormularyComponent \n\nFormularyComponent \n\nFormularyComponent  -->\n\nSharedModule->FormularyComponent \n\n\n\n\n\nListcryptoComponent \n\nListcryptoComponent \n\nListcryptoComponent  -->\n\nSharedModule->ListcryptoComponent \n\n\n\n\n\nListformularyComponent \n\nListformularyComponent \n\nListformularyComponent  -->\n\nSharedModule->ListformularyComponent \n\n\n\n\n\nColorpercentDirective\n\nColorpercentDirective\n\nSharedModule -->\n\nColorpercentDirective->SharedModule\n\n\n\n\n\nCurrencyPipe\n\nCurrencyPipe\n\nSharedModule -->\n\nCurrencyPipe->SharedModule\n\n\n\n\n\nPercentformaterPipe\n\nPercentformaterPipe\n\nSharedModule -->\n\nPercentformaterPipe->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/shared.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AdminFormularyComponent\n                        \n                        \n                            CryptocardComponent\n                        \n                        \n                            CryptosimplecardComponent\n                        \n                        \n                            CustomGenderComponent\n                        \n                        \n                            FormularyComponent\n                        \n                        \n                            ListcryptoComponent\n                        \n                        \n                            ListformularyComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ColorpercentDirective\n                        \n                        \n                            CurrencyPipe\n                        \n                        \n                            PercentformaterPipe\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AdminFormularyComponent\n                        \n                        \n                            CryptocardComponent\n                        \n                        \n                            CryptosimplecardComponent\n                        \n                        \n                            CustomGenderComponent\n                        \n                        \n                            FormularyComponent\n                        \n                        \n                            ListcryptoComponent\n                        \n                        \n                            ListformularyComponent\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { CryptocardComponent } from './cryptocard/cryptocard.component';\nimport { IonicModule } from '@ionic/angular';\nimport { CryptosimplecardComponent } from './cryptosimplecard/cryptosimplecard.component';\nimport { ListcryptoComponent } from './listcrypto/listcrypto.component';\nimport { TranslateModule } from '@ngx-translate/core';\nimport { ListformularyComponent } from './listformulary/listformulary.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { CurrencyPipe } from '../core/pipes/currency.pipe';\nimport { PercentformaterPipe } from '../core/pipes/percentformater.pipe';\nimport { FormularyComponent } from './formulary/formulary.component';\nimport { RouterModule } from '@angular/router';\nimport { CustomGenderComponent } from './custom-gender/custom-gender.component';\nimport { Dropdown, DropdownModule } from 'primeng/dropdown';\nimport { ColorpercentDirective } from '../core/directives/colorpercent.directive';\nimport { AdminFormularyComponent } from './admin-formulary/admin-formulary.component';\n\n\n\n@NgModule({\n  declarations: [CryptocardComponent,CryptosimplecardComponent,ListcryptoComponent,ListformularyComponent,FormularyComponent,CustomGenderComponent,AdminFormularyComponent],\n  imports: [\n    CommonModule,\n    IonicModule,\n    TranslateModule.forChild(),\n    ReactiveFormsModule,\n    CurrencyPipe,\n    PercentformaterPipe,\n    RouterModule,\n    DropdownModule,\n    FormsModule,\n    ColorpercentDirective\n  ],\n  exports:[CryptocardComponent,CryptosimplecardComponent,ListcryptoComponent,ListformularyComponent,FormularyComponent,CustomGenderComponent,AdminFormularyComponent]\n})\nexport class SharedModule { }\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SharedService.html":{"url":"injectables/SharedService.html","title":"injectable - SharedService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SharedService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/shared/sharedservice/shared.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                showToast\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(toastCtrl: ToastController, translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/sharedservice/shared.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        toastCtrl\n                                                  \n                                                        \n                                                                    ToastController\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        showToast\n                        \n                    \n                \n            \n            \n                \n                        \n                    showToast(color: string, message: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/sharedservice/shared.service.ts:23\n                        \n                    \n\n\n            \n                \n                        Displays a toast notification with a specified color and message.\nThe toast includes a localized \"Close\" button.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                color\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe color of the toast (e.g., 'success', 'danger', 'warning')\n\n\n                                            \n                                        \n                                        \n                                                message\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe message to display in the toast\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ToastController } from '@ionic/angular';\nimport { TranslateService } from '@ngx-translate/core';\n\n@Injectable({\n  providedIn: 'root'\n})\n/**\n * Shared service providing common utilities across the app.\n * \n * Currently includes a method to display localized Ionic toasts.\n */\nexport class SharedService {\n  constructor(private toastCtrl: ToastController, private translate: TranslateService) { }\n\n  /**\n   * Displays a toast notification with a specified color and message.\n   * The toast includes a localized \"Close\" button.\n   * \n   * @param color - The color of the toast (e.g., 'success', 'danger', 'warning')\n   * @param message - The message to display in the toast\n   */\n  async showToast(color: string, message: string) {\n    const toast = await this.toastCtrl.create({\n      message: message !== \"\" ? message : message,\n      duration: 2000,\n      position: 'bottom',\n      color: color,\n      buttons: [\n        {\n          text: this.translate.instant(\"COMMON.CLOSE\"),\n          role: 'cancel',\n        },\n      ],\n    });\n    toast.present();\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Small.html":{"url":"interfaces/Small.html","title":"interface - Small","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Small\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ext\n                                        \n                                \n                                \n                                        \n                                            hash\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            provider_metadata\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ext\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ext:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hash\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hash:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider_metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider_metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/SplashPage.html":{"url":"components/SplashPage.html","title":"component - SplashPage","body":"\n                   \n\n\n\n\n\n  Components\n  \n  SplashPage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/shared/splash/splash.page.ts\n\n\n\n\n\n    \n        Implements\n    \n    \n                OnInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                app-splash\n            \n\n            \n                standalone\n                true\n            \n\n            \n                imports\n                \n                            LottieComponent\n                            IonicModule\n                \n            \n\n            \n                styleUrls\n                ./splash.page.scss\n            \n\n\n\n            \n                templateUrl\n                ./splash.page.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                options\n                            \n                            \n                                    Private\n                                subscriptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                initSubscriptions\n                            \n                            \n                                ionViewWillEnter\n                            \n                            \n                                ngOnDestroy\n                            \n                            \n                                ngOnInit\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(router: Router, auth: IAuthenticationService)\n                    \n                \n                        \n                            \n                                Defined in src/app/shared/splash/splash.page.ts:27\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        router\n                                                  \n                                                        \n                                                                    Router\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        initSubscriptions\n                        \n                    \n                \n            \n            \n                \ninitSubscriptions()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/splash/splash.page.ts:44\n                        \n                    \n\n\n            \n                \n                        Initializes subscriptions to check authentication and\nnavigate accordingly after a timer delay.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ionViewWillEnter\n                        \n                    \n                \n            \n            \n                \nionViewWillEnter()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/splash/splash.page.ts:75\n                        \n                    \n\n\n            \n                \n                        Called each time the view is about to enter.\nRe-initializes the subscriptions.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnDestroy\n                        \n                    \n                \n            \n            \n                \nngOnDestroy()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/splash/splash.page.ts:90\n                        \n                    \n\n\n            \n                \n                        Angular lifecycle hook for component destruction.\nCleans up all subscriptions.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngOnInit\n                        \n                    \n                \n            \n            \n                \nngOnInit()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/shared/splash/splash.page.ts:82\n                        \n                    \n\n\n            \n                \n                        Angular lifecycle hook for component initialization.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        options\n                        \n                    \n                \n            \n                \n                    \n                        Type :     AnimationOptions\n\n                    \n                \n                \n                    \n                        Default value : {\n    path: ('/assets/lottie/loadinglottie.json')\n    \n  }\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/splash/splash.page.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        subscriptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Subscription[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/app/shared/splash/splash.page.ts:38\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { Component, Inject, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { IonicModule } from '@ionic/angular';\nimport { AnimationOptions, LottieComponent } from 'ngx-lottie';\nimport { Subscription, timer } from 'rxjs';\nimport { AUTH_TOKEN } from 'src/app/core/repositories/repository.tokens';\nimport { IAuthenticationService } from 'src/app/core/services/interfaces/authentication/authentication.interface';\n\n@Component({\n  selector: 'app-splash',\n  templateUrl: './splash.page.html',\n  styleUrls: ['./splash.page.scss'],\n  standalone:true,\n  imports: [LottieComponent,IonicModule]\n})\n/**\n * Splash screen page that shows a loading animation on app startup.\n * \n * The component verifies the user authentication status and then\n * navigates to either the \"home\" page (if authenticated) or the\n * \"login\" page (if not).\n * \n * Includes a Lottie animation displayed during the splash screen.\n * \n * Subscriptions are managed and cleaned up on component destruction.\n */\nexport class SplashPage implements OnInit {\n  constructor(\n    private router:Router,\n    @Inject(AUTH_TOKEN) private auth:IAuthenticationService\n  ) { }\n\n  options: AnimationOptions = {\n    path: ('/assets/lottie/loadinglottie.json')\n    \n  };\n\n  private subscriptions: Subscription[] = [];\n\n  /**\n   * Initializes subscriptions to check authentication and\n   * navigate accordingly after a timer delay.\n   */\n  initSubscriptions() {\n    let valor=\"\"\n    const sub1=this.auth.GetUser().subscribe({\n      next:(value)=>{\n          valor=\"home\"\n      },\n      error:(err)=>{\n          valor=\"login\"\n      },\n    })\n    this.subscriptions.push(sub1);\n\n    const sub2=timer(1500).subscribe({\n      next:(value)=>{\n        this.router.navigate(['/'+valor]).then(() => {\n          if(valor==\"login\"){\n            location.reload()\n          }\n        })\n      },error:(err)=>{\n        this.router.navigate(['/'+valor])\n      },\n    })\n\n    this.subscriptions.push(sub2);\n  }\n\n  /**\n   * Called each time the view is about to enter.\n   * Re-initializes the subscriptions.\n   */\n  ionViewWillEnter() {\n    this.initSubscriptions()\n  }\n\n  /**\n   * Angular lifecycle hook for component initialization.\n   */\n  ngOnInit(): void {\n    this.initSubscriptions()\n  }\n\n  /**\n   * Angular lifecycle hook for component destruction.\n   * Cleans up all subscriptions.\n   */\n  ngOnDestroy() {\n    this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n  }\n}\n    \n\n    \n        \n    \n\n    \n                \n                    ./splash.page.scss\n                \n                ng-lottie {\n    position: absolute;\n    top: 50%; /* Coloca el formulario en el centro vertical */\n    left: 50%; /* Coloca el formulario en el centro horizontal */\n    transform: translate(-50%, -50%); /* Ajusta el formulario para que quede perfectamente centrado */\n    width: 5%; /* Ancho del formulario (50% del ancho de la pantalla) */\n    min-width: 350px; /* Ancho mínimo del formulario para pantallas pequeñas */\n    margin: 0 auto; /* Esto asegura que se centre si el formulario no tiene un `position: absolute` */\n}\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AboutPage', 'selector': 'app-about'},{'name': 'AdminFormularyComponent', 'selector': 'app-admin-formulary'},{'name': 'AdminPanelPage', 'selector': 'app-admin-panel'},{'name': 'AppComponent', 'selector': 'app-root'},{'name': 'CryptocardComponent', 'selector': 'app-cryptocard'},{'name': 'CryptosimplecardComponent', 'selector': 'app-cryptosimplecard'},{'name': 'CryptoviewPage', 'selector': 'app-cryptoview'},{'name': 'CustomGenderComponent', 'selector': 'app-custom-gender'},{'name': 'FormularyComponent', 'selector': 'app-formulary'},{'name': 'HomePage', 'selector': 'app-home'},{'name': 'ListcontentPage', 'selector': 'app-listcontent'},{'name': 'ListcryptoComponent', 'selector': 'app-listcrypto'},{'name': 'ListformularyComponent', 'selector': 'app-listformulary'},{'name': 'ListPage', 'selector': 'app-list'},{'name': 'LoginPage', 'selector': 'app-login'},{'name': 'ProfilePage', 'selector': 'app-profile'},{'name': 'RegisterPage', 'selector': 'app-register'},{'name': 'SearchPage', 'selector': 'app-search'},{'name': 'SplashPage', 'selector': 'app-splash'}];\n    var DIRECTIVES = [{'name': 'BackgraphbuttonDirective', 'selector': '[appBackgraphbutton]'},{'name': 'ColorpercentDirective', 'selector': '[appColorpercent]'}];\n    var ACTUAL_COMPONENT = {'name': 'SplashPage'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/SplashPageRoutingModule.html":{"url":"modules/SplashPageRoutingModule.html","title":"module - SplashPageRoutingModule","body":"\n                   \n\n\n\n\n    Modules\n    SplashPageRoutingModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/shared/splash/splash-routing.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { SplashPage } from './splash.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: SplashPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class SplashPageRoutingModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StrapiAutenticationService.html":{"url":"injectables/StrapiAutenticationService.html","title":"injectable - StrapiAutenticationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StrapiAutenticationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/strapi-autentication.service.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            BaseAutenticationService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                authenticated\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                Deleteuser\n                            \n                            \n                                    \n                                GetUser\n                            \n                            \n                                    \n                                Login\n                            \n                            \n                                    \n                                Register\n                            \n                            \n                                deleteToken\n                            \n                            \n                                getCurrency\n                            \n                            \n                                getId\n                            \n                            \n                                getToken\n                            \n                            \n                                Logout\n                            \n                            \n                                removeId\n                            \n                            \n                                setCurrency\n                            \n                            \n                                setId\n                            \n                            \n                                setmenu\n                            \n                            \n                                setToken\n                            \n                            \n                                verificateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpclient: HttpClient, userapiurltoken: string, loginapitoken: string, registertoken: string, authenticationurltoken: string, mapping: IAuthenticationMapping)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/authentication/strapi-autentication.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpclient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userapiurltoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        loginapitoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        registertoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authenticationurltoken\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mapping\n                                                  \n                                                        \n                                                                        IAuthenticationMapping\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Deleteuser\n                        \n                    \n                \n            \n            \n                \n                        \n                    Deleteuser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:33\n\n                        \n                    \n\n\n            \n                \n                        Deletes a user from Strapi backend.\nAlso clears token and user ID from local storage upon success.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    JWT token for authorization\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    User ID to delete\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        GetUser\n                        \n                    \n                \n            \n            \n                \n                        \n                    GetUser()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:84\n\n                        \n                    \n\n\n            \n                \n                        Gets the currently authenticated user info from Strapi backend.\nUses JWT token stored in localStorage for authorization.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable mapped user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Login\n                        \n                    \n                \n            \n            \n                \n                        \n                    Login(authenticationlogin: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:48\n\n                        \n                    \n\n\n            \n                \n                        Logs in a user by posting credentials to Strapi's login endpoint.\nStores JWT token and user ID in local storage on success.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authenticationlogin\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Login payload (credentials)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                Observable mapped user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        Register\n                        \n                    \n                \n            \n            \n                \n                        \n                    Register(authenticationregister: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:67\n\n                        \n                    \n\n\n            \n                \n                        Registers a new user by posting data to Strapi's register endpoint.\nStores JWT token and user ID in local storage on success.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                authenticationregister\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Registration payload\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable mapped registered user data\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteToken\n                        \n                    \n                \n            \n            \n                \ndeleteToken()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:78\n\n                        \n                    \n\n\n            \n                \n                        Removes the authentication token from localStorage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrency\n                        \n                    \n                \n            \n            \n                \ngetCurrency()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:127\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the preferred currency from localStorage.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The saved currency or defaults to \"usd\" if not set.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getId\n                        \n                    \n                \n            \n            \n                \ngetId()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:101\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the current user ID from localStorage.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The stored user ID or empty string if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getToken\n                        \n                    \n                \n            \n            \n                \ngetToken()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:143\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the stored authentication token.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                The token string or empty string if none stored.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Logout\n                        \n                    \n                \n            \n            \n                \nLogout()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:61\n\n                        \n                    \n\n\n            \n                \n                        Logs out the current user.\nClears authentication status, token and user ID from storage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeId\n                        \n                    \n                \n            \n            \n                \nremoveId()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:93\n\n                        \n                    \n\n\n            \n                \n                        Removes the user ID from localStorage.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setCurrency\n                        \n                    \n                \n            \n            \n                \nsetCurrency(currency: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:118\n\n                        \n                    \n\n\n            \n                \n                        Saves the preferred currency in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                currency\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nCurrency code (e.g. \"usd\").\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                The saved currency.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setId\n                        \n                    \n                \n            \n            \n                \nsetId(id: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:86\n\n                        \n                    \n\n\n            \n                \n                        Saves the current user's ID in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nUser identifier.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setmenu\n                        \n                    \n                \n            \n            \n                \nsetmenu(val: boolean)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:109\n\n                        \n                    \n\n\n            \n                \n                        Updates the authentication state observable.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                val\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nTrue if authenticated, false otherwise.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setToken\n                        \n                    \n                \n            \n            \n                \nsetToken(token: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:71\n\n                        \n                    \n\n\n            \n                \n                        Saves the authentication token in localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nJWT or similar token.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        verificateUser\n                        \n                    \n                \n            \n            \n                \nverificateUser()\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseAutenticationService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseAutenticationService:135\n\n                        \n                    \n\n\n            \n                \n                        Returns an observable to monitor authentication state changes.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                Observable emitting true/false authentication status.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        authenticated\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject(false)\n                    \n                \n                        \n                            \n                                Inherited from         BaseAutenticationService\n\n                            \n                        \n                    \n                        \n                                Defined in         BaseAutenticationService:23\n\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from '@angular/core';\nimport { BaseAutenticationService } from './base-autentication.service';\nimport { IStrapiAuthentication } from '../../interfaces/authentication/strapi-authentication.interface';\nimport { catchError, map, Observable, throwError } from 'rxjs';\nimport { AUTENTICATION_URL_TOKEN, AUTH_MAPPING_TOKEN, LOGIN_API_URL_TOKEN, REGISTER_API_URL_TOKEN, USER_API_URL_TOKEN } from '../../../repositories/repository.tokens';\nimport { HttpClient } from '@angular/common/http';\nimport { IAuthenticationMapping } from '../../interfaces/authentication/auth-mapping.interface';\nimport { StrapiLoginResponse, StrapiUser } from './strapi-auth-mapping.service';\nimport { User } from 'src/app/core/models/User.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class StrapiAutenticationService extends BaseAutenticationService implements IStrapiAuthentication {\n  constructor(\n    private httpclient:HttpClient,\n    @Inject(USER_API_URL_TOKEN) private userapiurltoken:string,\n    @Inject(LOGIN_API_URL_TOKEN) private loginapitoken:string,\n    @Inject(REGISTER_API_URL_TOKEN) private registertoken:string,\n    @Inject(AUTENTICATION_URL_TOKEN) private authenticationurltoken:string,\n    @Inject(AUTH_MAPPING_TOKEN) private mapping:IAuthenticationMapping\n  ) {\n    super();\n  }\n\n  /**\n   * Deletes a user from Strapi backend.\n   * Also clears token and user ID from local storage upon success.\n   * @param token JWT token for authorization\n   * @param iduser User ID to delete\n   * @returns Observable\n   */\n  override Deleteuser(token: string, iduser: string): Observable {\n    return this.httpclient.delete(this.userapiurltoken+`users/${iduser}`,{ headers: { Authorization: `Bearer ${token}`, 'Content-Type': 'application/json' } }).pipe(\n      map((c)=>{\n        this.deleteToken()\n        this.removeId()\n      })\n    )\n  }\n\n  /**\n   * Logs in a user by posting credentials to Strapi's login endpoint.\n   * Stores JWT token and user ID in local storage on success.\n   * @param authenticationlogin Login payload (credentials)\n   * @returns Observable mapped user data\n   */\n  override Login(authenticationlogin: any): Observable {\n    return this.httpclient.post(this.loginapitoken,this.mapping.Login(authenticationlogin)).pipe(map((resp:StrapiLoginResponse)=>{\n      localStorage.setItem(\"token\",resp.jwt);\n      localStorage.setItem(\"uid\",\"\"+resp.user.id)\n      return this.mapping.LoginResponse(resp);\n    }),\n    catchError((err:any)=>{\n      let error12=err.error.error.message+\"\";\n      return throwError(()=>error12)\n    })\n  );\n  }\n\n  /**\n   * Registers a new user by posting data to Strapi's register endpoint.\n   * Stores JWT token and user ID in local storage on success.\n   * @param authenticationregister Registration payload\n   * @returns Observable mapped registered user data\n   */\n  override Register(authenticationregister:any): Observable {\n    return this.httpclient.post(this.registertoken,this.mapping.Register(authenticationregister)).pipe(map((resp:StrapiLoginResponse)=>{\n      localStorage.setItem(\"token\",resp.jwt);\n      localStorage.setItem(\"uid\",\"\"+resp.user.id)\n      return this.mapping.RegisterResponse(resp);\n    }),\n    catchError((err:any)=>{\n      return throwError(()=>err.error.error.message+\"\")\n    })\n    );\n  }\n\n  /**\n   * Gets the currently authenticated user info from Strapi backend.\n   * Uses JWT token stored in localStorage for authorization.\n   * @returns Observable mapped user data\n   */\n  override GetUser(): Observable {\n    return this.httpclient.get(this.authenticationurltoken,{headers:{Authorization: `Bearer ${localStorage.getItem(\"token\")}`}}).pipe(map((resp:StrapiUser)=>{\n      return this.mapping.GetUserResponse(resp,localStorage.getItem(\"token\")!!)\n    }))\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StrapiAuthMappingService.html":{"url":"injectables/StrapiAuthMappingService.html","title":"injectable - StrapiAuthMappingService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StrapiAuthMappingService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                GetUserResponse\n                            \n                            \n                                Login\n                            \n                            \n                                LoginResponse\n                            \n                            \n                                Register\n                            \n                            \n                                RegisterResponse\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        GetUserResponse\n                        \n                    \n                \n            \n            \n                \nGetUserResponse(response: StrapiUser, token: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts:99\n                        \n                    \n\n\n            \n                \n                        Maps a Strapi user response and token to the application User model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            StrapiUser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Strapi user object.\n\n\n                                            \n                                        \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe JWT token string.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User\n\n                        \n                            \n                                A User object constructed from the Strapi user data and token.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Login\n                        \n                    \n                \n            \n            \n                \nLogin(payload: LoginPayLoad)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts:49\n                        \n                    \n\n\n            \n                \n                        Maps the login payload from the application to the Strapi sign-in format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            LoginPayLoad\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe login payload containing email and password.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StrapiSignIn\n\n                        \n                            \n                                The StrapiSignIn object with identifier and password.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LoginResponse\n                        \n                    \n                \n            \n            \n                \nLoginResponse(response: StrapiLoginResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts:66\n                        \n                    \n\n\n            \n                \n                        Converts the Strapi login response into a User model used by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            StrapiLoginResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Strapi login response containing JWT and user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User\n\n                        \n                            \n                                A User object mapped from the Strapi response.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Register\n                        \n                    \n                \n            \n            \n                \nRegister(payload: RegisterPayLoad)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts:57\n                        \n                    \n\n\n            \n                \n                        Maps the registration payload from the application to the Strapi register format.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                payload\n                                            \n                                                            RegisterPayLoad\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe registration payload containing username, password, email, and gender.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         StrapiRegister\n\n                        \n                            \n                                The StrapiRegister object for user registration.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RegisterResponse\n                        \n                    \n                \n            \n            \n                \nRegisterResponse(response: StrapiLoginResponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts:82\n                        \n                    \n\n\n            \n                \n                        Converts the Strapi register response into a User model used by the application.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                response\n                                            \n                                                            StrapiLoginResponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Strapi register response containing JWT and user details.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         User\n\n                        \n                            \n                                A User object mapped from the Strapi response.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { LoginPayLoad, RegisterPayLoad } from \"../../../models/auth.model\";\nimport { User } from \"../../../models/User.model\";\n\nexport interface StrapiLoginResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiRegisterResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiUser{\n    id:number,\n    gender:string\n    username:string,\n    email:string,\n    provider:string,\n    confirm:boolean,\n    blocked:boolean,\n    createAt:string,\n    updateAt:string \n}\n\nexport interface StrapiSignIn{\n    identifier:string,\n    password:string\n}\n\nexport interface StrapiRegister{\n    gender:string\n    username:string,\n    email:string,\n    password:string\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps the login payload from the application to the Strapi sign-in format.\n     * @param payload - The login payload containing email and password.\n     * @returns The StrapiSignIn object with identifier and password.\n     */\n    Login(payload: LoginPayLoad):StrapiSignIn {\n        return {identifier:payload.email, password:payload.password}\n    }\n    /**\n     * Maps the registration payload from the application to the Strapi register format.\n     * @param payload - The registration payload containing username, password, email, and gender.\n     * @returns The StrapiRegister object for user registration.\n     */\n    Register(payload: RegisterPayLoad):StrapiRegister {\n        return {username:payload.username,password:payload.password,email:payload.email,gender:payload.gender}\n    }\n    \n    /**\n     * Converts the Strapi login response into a User model used by the application.\n     * @param response - The Strapi login response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    LoginResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n    \n    /**\n     * Converts the Strapi register response into a User model used by the application.\n     * @param response - The Strapi register response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    RegisterResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n\n    /**\n     * Maps a Strapi user response and token to the application User model.\n     * @param response - The Strapi user object.\n     * @param token - The JWT token string.\n     * @returns A User object constructed from the Strapi user data and token.\n     */\n    GetUserResponse(response:StrapiUser,token:string):User{\n        return {\n            id:\"\"+response.id,\n            gender:response.gender,\n            username:response.username,\n            email:response.email,\n            token:token,\n            isAdmin:\"false\"\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StrapiLoginResponse.html":{"url":"interfaces/StrapiLoginResponse.html","title":"interface - StrapiLoginResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StrapiLoginResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         StrapiUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StrapiUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { LoginPayLoad, RegisterPayLoad } from \"../../../models/auth.model\";\nimport { User } from \"../../../models/User.model\";\n\nexport interface StrapiLoginResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiRegisterResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiUser{\n    id:number,\n    gender:string\n    username:string,\n    email:string,\n    provider:string,\n    confirm:boolean,\n    blocked:boolean,\n    createAt:string,\n    updateAt:string \n}\n\nexport interface StrapiSignIn{\n    identifier:string,\n    password:string\n}\n\nexport interface StrapiRegister{\n    gender:string\n    username:string,\n    email:string,\n    password:string\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps the login payload from the application to the Strapi sign-in format.\n     * @param payload - The login payload containing email and password.\n     * @returns The StrapiSignIn object with identifier and password.\n     */\n    Login(payload: LoginPayLoad):StrapiSignIn {\n        return {identifier:payload.email, password:payload.password}\n    }\n    /**\n     * Maps the registration payload from the application to the Strapi register format.\n     * @param payload - The registration payload containing username, password, email, and gender.\n     * @returns The StrapiRegister object for user registration.\n     */\n    Register(payload: RegisterPayLoad):StrapiRegister {\n        return {username:payload.username,password:payload.password,email:payload.email,gender:payload.gender}\n    }\n    \n    /**\n     * Converts the Strapi login response into a User model used by the application.\n     * @param response - The Strapi login response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    LoginResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n    \n    /**\n     * Converts the Strapi register response into a User model used by the application.\n     * @param response - The Strapi register response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    RegisterResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n\n    /**\n     * Maps a Strapi user response and token to the application User model.\n     * @param response - The Strapi user object.\n     * @param token - The JWT token string.\n     * @returns A User object constructed from the Strapi user data and token.\n     */\n    GetUserResponse(response:StrapiUser,token:string):User{\n        return {\n            id:\"\"+response.id,\n            gender:response.gender,\n            username:response.username,\n            email:response.email,\n            token:token,\n            isAdmin:\"false\"\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StrapiMediaService.html":{"url":"classes/StrapiMediaService.html","title":"class - StrapiMediaService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StrapiMediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/media/strapi-media.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for uploading media files to a Strapi backend.\nExtends the BaseMediaService abstract class.\n\n            \n\n            \n                Extends\n            \n            \n                            BaseMediaService\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                getHeaders\n                            \n                            \n                                    Public\n                                    \n                                upload\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(uploadUrl: string, auth: IAuthenticationService, httpclient: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/media/strapi-media.service.ts:12\n                            \n                        \n\n                \n                    \n                            Creates an instance of StrapiMediaService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        uploadUrl\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe URL endpoint token for the Strapi upload API (injected).\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAuthentication service instance (injected).\n\n\n                                                        \n                                                \n                                                \n                                                        httpclient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular HttpClient for HTTP requests.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                        getHeaders\n                        \n                    \n                \n            \n            \n                \n                        \n                    getHeaders()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/media/strapi-media.service.ts:31\n                        \n                    \n\n\n            \n                \n                        Generates HTTP headers including authorization if a token is present.\n\n\n                        \n                            Returns :     { headers: { Authorization: string; }; }\n\n                        \n                            \n                                An object with headers including the Authorization bearer token if available.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                            \n                        upload\n                        \n                    \n                \n            \n            \n                \n                        \n                    upload(blob: Blob)\n                \n            \n\n\n                    \n                        \n                            Inherited from         BaseMediaService\n\n                        \n                    \n                    \n                        \n                                Defined in         BaseMediaService:45\n\n                        \n                    \n\n\n            \n                \n                        Uploads a media Blob to the Strapi upload endpoint.\nThe blob is appended to a FormData object as 'files'.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                blob\n                                            \n                                                        Blob\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe media file Blob to upload.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the server response mapped to a number array (as per implementation).\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { map, Observable } from \"rxjs\";\nimport { BaseMediaService } from \"./base-media.service\";\nimport { Inject } from \"@angular/core\";\nimport { AUTH_TOKEN, UPLOAD_API_URL_TOKEN } from \"src/app/core/repositories/repository.tokens\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { IAuthenticationService } from \"../../interfaces/authentication/authentication.interface\";\n\n/**\n * Service for uploading media files to a Strapi backend.\n * Extends the BaseMediaService abstract class.\n */\nexport class StrapiMediaService extends BaseMediaService{\n    /**\n     * Creates an instance of StrapiMediaService.\n     * @param uploadUrl - The URL endpoint token for the Strapi upload API (injected).\n     * @param auth - Authentication service instance (injected).\n     * @param httpclient - Angular HttpClient for HTTP requests.\n     */\n    constructor(\n        @Inject(UPLOAD_API_URL_TOKEN) private uploadUrl:string,\n        @Inject(AUTH_TOKEN) private auth:IAuthenticationService,\n        private httpclient:HttpClient\n    ){\n        super();\n    }\n\n    /**\n     * Generates HTTP headers including authorization if a token is present.\n     * @returns An object with headers including the Authorization bearer token if available.\n     */\n    private getHeaders() {\n        const token = this.auth.getToken();\n        return {\n            headers: token ? { 'Authorization': `Bearer ${token}` } : undefined\n        };\n    }\n\n    /**\n     * Uploads a media Blob to the Strapi upload endpoint.\n     * The blob is appended to a FormData object as 'files'.\n     * \n     * @param blob - The media file Blob to upload.\n     * @returns An Observable emitting the server response mapped to a number array (as per implementation).\n     */\n    public override upload(blob: Blob): Observable {\n        const formData = new FormData();\n        formData.append('files', blob);\n        return this.httpclient.post(`${this.uploadUrl}`, formData, this.getHeaders()).pipe(map((response:any)=>{\n            return response\n        }));\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StrapiRegister.html":{"url":"interfaces/StrapiRegister.html","title":"interface - StrapiRegister","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StrapiRegister\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            gender\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { LoginPayLoad, RegisterPayLoad } from \"../../../models/auth.model\";\nimport { User } from \"../../../models/User.model\";\n\nexport interface StrapiLoginResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiRegisterResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiUser{\n    id:number,\n    gender:string\n    username:string,\n    email:string,\n    provider:string,\n    confirm:boolean,\n    blocked:boolean,\n    createAt:string,\n    updateAt:string \n}\n\nexport interface StrapiSignIn{\n    identifier:string,\n    password:string\n}\n\nexport interface StrapiRegister{\n    gender:string\n    username:string,\n    email:string,\n    password:string\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps the login payload from the application to the Strapi sign-in format.\n     * @param payload - The login payload containing email and password.\n     * @returns The StrapiSignIn object with identifier and password.\n     */\n    Login(payload: LoginPayLoad):StrapiSignIn {\n        return {identifier:payload.email, password:payload.password}\n    }\n    /**\n     * Maps the registration payload from the application to the Strapi register format.\n     * @param payload - The registration payload containing username, password, email, and gender.\n     * @returns The StrapiRegister object for user registration.\n     */\n    Register(payload: RegisterPayLoad):StrapiRegister {\n        return {username:payload.username,password:payload.password,email:payload.email,gender:payload.gender}\n    }\n    \n    /**\n     * Converts the Strapi login response into a User model used by the application.\n     * @param response - The Strapi login response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    LoginResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n    \n    /**\n     * Converts the Strapi register response into a User model used by the application.\n     * @param response - The Strapi register response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    RegisterResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n\n    /**\n     * Maps a Strapi user response and token to the application User model.\n     * @param response - The Strapi user object.\n     * @param token - The JWT token string.\n     * @returns A User object constructed from the Strapi user data and token.\n     */\n    GetUserResponse(response:StrapiUser,token:string):User{\n        return {\n            id:\"\"+response.id,\n            gender:response.gender,\n            username:response.username,\n            email:response.email,\n            token:token,\n            isAdmin:\"false\"\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StrapiRegisterResponse.html":{"url":"interfaces/StrapiRegisterResponse.html","title":"interface - StrapiRegisterResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StrapiRegisterResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            jwt\n                                        \n                                \n                                \n                                        \n                                            user\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        jwt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jwt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        user\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        user:         StrapiUser\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         StrapiUser\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { LoginPayLoad, RegisterPayLoad } from \"../../../models/auth.model\";\nimport { User } from \"../../../models/User.model\";\n\nexport interface StrapiLoginResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiRegisterResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiUser{\n    id:number,\n    gender:string\n    username:string,\n    email:string,\n    provider:string,\n    confirm:boolean,\n    blocked:boolean,\n    createAt:string,\n    updateAt:string \n}\n\nexport interface StrapiSignIn{\n    identifier:string,\n    password:string\n}\n\nexport interface StrapiRegister{\n    gender:string\n    username:string,\n    email:string,\n    password:string\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps the login payload from the application to the Strapi sign-in format.\n     * @param payload - The login payload containing email and password.\n     * @returns The StrapiSignIn object with identifier and password.\n     */\n    Login(payload: LoginPayLoad):StrapiSignIn {\n        return {identifier:payload.email, password:payload.password}\n    }\n    /**\n     * Maps the registration payload from the application to the Strapi register format.\n     * @param payload - The registration payload containing username, password, email, and gender.\n     * @returns The StrapiRegister object for user registration.\n     */\n    Register(payload: RegisterPayLoad):StrapiRegister {\n        return {username:payload.username,password:payload.password,email:payload.email,gender:payload.gender}\n    }\n    \n    /**\n     * Converts the Strapi login response into a User model used by the application.\n     * @param response - The Strapi login response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    LoginResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n    \n    /**\n     * Converts the Strapi register response into a User model used by the application.\n     * @param response - The Strapi register response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    RegisterResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n\n    /**\n     * Maps a Strapi user response and token to the application User model.\n     * @param response - The Strapi user object.\n     * @param token - The JWT token string.\n     * @returns A User object constructed from the Strapi user data and token.\n     */\n    GetUserResponse(response:StrapiUser,token:string):User{\n        return {\n            id:\"\"+response.id,\n            gender:response.gender,\n            username:response.username,\n            email:response.email,\n            token:token,\n            isAdmin:\"false\"\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StrapiSignIn.html":{"url":"interfaces/StrapiSignIn.html","title":"interface - StrapiSignIn","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StrapiSignIn\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            identifier\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        identifier\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        identifier:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { LoginPayLoad, RegisterPayLoad } from \"../../../models/auth.model\";\nimport { User } from \"../../../models/User.model\";\n\nexport interface StrapiLoginResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiRegisterResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiUser{\n    id:number,\n    gender:string\n    username:string,\n    email:string,\n    provider:string,\n    confirm:boolean,\n    blocked:boolean,\n    createAt:string,\n    updateAt:string \n}\n\nexport interface StrapiSignIn{\n    identifier:string,\n    password:string\n}\n\nexport interface StrapiRegister{\n    gender:string\n    username:string,\n    email:string,\n    password:string\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps the login payload from the application to the Strapi sign-in format.\n     * @param payload - The login payload containing email and password.\n     * @returns The StrapiSignIn object with identifier and password.\n     */\n    Login(payload: LoginPayLoad):StrapiSignIn {\n        return {identifier:payload.email, password:payload.password}\n    }\n    /**\n     * Maps the registration payload from the application to the Strapi register format.\n     * @param payload - The registration payload containing username, password, email, and gender.\n     * @returns The StrapiRegister object for user registration.\n     */\n    Register(payload: RegisterPayLoad):StrapiRegister {\n        return {username:payload.username,password:payload.password,email:payload.email,gender:payload.gender}\n    }\n    \n    /**\n     * Converts the Strapi login response into a User model used by the application.\n     * @param response - The Strapi login response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    LoginResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n    \n    /**\n     * Converts the Strapi register response into a User model used by the application.\n     * @param response - The Strapi register response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    RegisterResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n\n    /**\n     * Maps a Strapi user response and token to the application User model.\n     * @param response - The Strapi user object.\n     * @param token - The JWT token string.\n     * @returns A User object constructed from the Strapi user data and token.\n     */\n    GetUserResponse(response:StrapiUser,token:string):User{\n        return {\n            id:\"\"+response.id,\n            gender:response.gender,\n            username:response.username,\n            email:response.email,\n            token:token,\n            isAdmin:\"false\"\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StrapiUser.html":{"url":"interfaces/StrapiUser.html","title":"interface - StrapiUser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StrapiUser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            blocked\n                                        \n                                \n                                \n                                        \n                                            confirm\n                                        \n                                \n                                \n                                        \n                                            createAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            gender\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            updateAt\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        blocked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        confirm\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        confirm:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updateAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updateAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { LoginPayLoad, RegisterPayLoad } from \"../../../models/auth.model\";\nimport { User } from \"../../../models/User.model\";\n\nexport interface StrapiLoginResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiRegisterResponse{\n    jwt:string,\n    user:StrapiUser\n}\n\nexport interface StrapiUser{\n    id:number,\n    gender:string\n    username:string,\n    email:string,\n    provider:string,\n    confirm:boolean,\n    blocked:boolean,\n    createAt:string,\n    updateAt:string \n}\n\nexport interface StrapiSignIn{\n    identifier:string,\n    password:string\n}\n\nexport interface StrapiRegister{\n    gender:string\n    username:string,\n    email:string,\n    password:string\n}\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps the login payload from the application to the Strapi sign-in format.\n     * @param payload - The login payload containing email and password.\n     * @returns The StrapiSignIn object with identifier and password.\n     */\n    Login(payload: LoginPayLoad):StrapiSignIn {\n        return {identifier:payload.email, password:payload.password}\n    }\n    /**\n     * Maps the registration payload from the application to the Strapi register format.\n     * @param payload - The registration payload containing username, password, email, and gender.\n     * @returns The StrapiRegister object for user registration.\n     */\n    Register(payload: RegisterPayLoad):StrapiRegister {\n        return {username:payload.username,password:payload.password,email:payload.email,gender:payload.gender}\n    }\n    \n    /**\n     * Converts the Strapi login response into a User model used by the application.\n     * @param response - The Strapi login response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    LoginResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n    \n    /**\n     * Converts the Strapi register response into a User model used by the application.\n     * @param response - The Strapi register response containing JWT and user details.\n     * @returns A User object mapped from the Strapi response.\n     */\n    RegisterResponse(response: StrapiLoginResponse):User {\n        return {\n            gender:response.user.gender,\n            id:\"\"+response.user.id,\n            username:response.user.username,\n            email:response.user.email,\n            token:response.jwt,\n            isAdmin:\"false\"\n        }\n    }\n\n    /**\n     * Maps a Strapi user response and token to the application User model.\n     * @param response - The Strapi user object.\n     * @param token - The JWT token string.\n     * @returns A User object constructed from the Strapi user data and token.\n     */\n    GetUserResponse(response:StrapiUser,token:string):User{\n        return {\n            id:\"\"+response.id,\n            gender:response.gender,\n            username:response.username,\n            email:response.email,\n            token:token,\n            isAdmin:\"false\"\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StrapiUserMapping.html":{"url":"injectables/StrapiUserMapping.html","title":"injectable - StrapiUserMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StrapiUserMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addcryptoresponse\n                            \n                            \n                                addcryptotodatabase\n                            \n                            \n                                addcryptotolist\n                            \n                            \n                                addlistUser\n                            \n                            \n                                addlistUserResponse\n                            \n                            \n                                deletecryptofromlist\n                            \n                            \n                                findcryptobyidresponse\n                            \n                            \n                                GetBasicUser\n                            \n                            \n                                GetListFromUser\n                            \n                            \n                                updatelistbody\n                            \n                            \n                                updateuserdata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptoresponse\n                        \n                    \n                \n            \n            \n                \naddcryptoresponse(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:297\n                        \n                    \n\n\n            \n                \n                        Maps the response from adding a crypto to the database to BasicCrypto.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BasicCrypto\n\n                        \n                            \n                                BasicCrypto with id, name, and symbol.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \naddcryptotodatabase(data: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:310\n                        \n                    \n\n\n            \n                \n                        Prepares the request body to add a crypto to the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The BasicCrypto to add.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         addcrypto\n\n                        \n                            \n                                The formatted request body.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotolist\n                        \n                    \n                \n            \n            \n                \naddcryptotolist(id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:323\n                        \n                    \n\n\n            \n                \n                        Prepares the request body to add a crypto to a favorite list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The crypto ID to connect.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         updatecryptofromfavoritelist\n\n                        \n                            \n                                The formatted request body.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistUser\n                        \n                    \n                \n            \n            \n                \naddlistUser(data: CryptoList, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:229\n                        \n                    \n\n\n            \n                \n                        Prepares the request body to create a new favorite list for a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            CryptoList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The CryptoList data to add.\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The user ID.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         createListRemote\n\n                        \n                            \n                                The formatted request body for list creation.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistUserResponse\n                        \n                    \n                \n            \n            \n                \naddlistUserResponse(data: addlistresponse)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:244\n                        \n                    \n\n\n            \n                \n                        Maps the server response after adding a list to a BasicList object.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            addlistresponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Response from add list request.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BasicList\n\n                        \n                            \n                                BasicList with title, description, and id.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deletecryptofromlist\n                        \n                    \n                \n            \n            \n                \ndeletecryptofromlist(data: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:267\n                        \n                    \n\n\n            \n                \n                        Prepares the request body to remove a crypto from a favorite list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The crypto ID to disconnect.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         deletecryptofromfavoritelist\n\n                        \n                            \n                                The formatted request body to remove crypto.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findcryptobyidresponse\n                        \n                    \n                \n            \n            \n                \nfindcryptobyidresponse(data: getallresponse, cryptoid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:283\n                        \n                    \n\n\n            \n                \n                        Extracts the crypto ID from the response filtering by cryptoId.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            getallresponse\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response data containing cryptos.\n\n                                            \n                                        \n                                        \n                                                cryptoid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The crypto ID to find.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                The found crypto ID or -1 if not found.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBasicUser\n                        \n                    \n                \n            \n            \n                \nGetBasicUser(data: any)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:361\n                        \n                    \n\n\n            \n                \n                        Maps the raw user data response to BasicUser model.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The raw user data.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         BasicUser\n\n                        \n                            \n                                BasicUser object with user info.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetListFromUser\n                        \n                    \n                \n            \n            \n                \nGetListFromUser(data: GetAllList)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:207\n                        \n                    \n\n\n            \n                \n                        Maps the raw response data to an array of CryptoList objects.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            GetAllList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The response containing user favorite lists.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     CryptoList[]\n\n                        \n                            \n                                Array of CryptoList mapped from the response.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelistbody\n                        \n                    \n                \n            \n            \n                \nupdatelistbody(data: BasicList)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:253\n                        \n                    \n\n\n            \n                \n                        Prepares the request body for updating a favorite list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The BasicList data with updates.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         CreateListUpdate\n\n                        \n                            \n                                The formatted request body for list update.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateuserdata\n                        \n                    \n                \n            \n            \n                \nupdateuserdata(data: updateuser)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/StrapiUserMapping.service.ts:338\n                        \n                    \n\n\n            \n                \n                        Prepares the request body to update user data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            updateuser\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Object containing user data to update.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                Object with updated fields.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/StsTokenManager.html":{"url":"interfaces/StsTokenManager.html","title":"interface - StsTokenManager","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  StsTokenManager\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the Firebase security token manager info.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            accessToken\n                                        \n                                \n                                \n                                        \n                                            expirationTime\n                                        \n                                \n                                \n                                        \n                                            refreshToken\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        accessToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        accessToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        expirationTime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        expirationTime:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        refreshToken\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        refreshToken:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LoginPayLoad, RegisterPayLoad } from \"src/app/core/models/auth.model\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { User } from \"src/app/core/models/User.model\";\n\n/**\n * Interface representing the response returned from Firebase authentication login.\n */\nexport interface LoginResponse {\n    uid: string\n    email: string\n    emailVerified: boolean\n    isAnonymous: boolean\n    providerData: providedata[]\n    stsTokenManager: StsTokenManager\n    createdAt: string\n    lastLoginAt: string\n    apiKey: string\n    appName: string,\n    accessToken:string,\n    isAdmin:string\n}\n\n/**\n * Interface representing the provider data associated with the user.\n */\nexport interface providedata {\n    providerId: string\n    uid: string\n    displayName: any\n    email: string\n    phoneNumber: any\n    photoURL: any\n}\n\n/**\n * Interface representing the Firebase security token manager info.\n */\nexport interface StsTokenManager {\n    refreshToken: string\n    accessToken: string\n    expirationTime: number\n}\n\n/**\n * Service that maps Firebase authentication payloads and responses to the app's User model.\n * \n * Implements IAuthenticationMapping interface to convert between backend responses and frontend models.\n */\nexport class FirebaseAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps a login payload to a User model.\n     * Currently not implemented.\n     * @param payload - Login data from frontend.\n     * @throws Error\n     */\n    Login(payload: LoginPayLoad):User {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps a registration payload to a User model.\n     * Currently not implemented.\n     * @param payload - Registration data from frontend.\n     * @throws Error\n     */\n    Register(payload: RegisterPayLoad) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps a Firebase LoginResponse to a User model.\n     * @param response - The Firebase login response object.\n     * @returns User model populated with Firebase response data.\n     */\n    LoginResponse(response: LoginResponse):User {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:\"xd\",\n            gender:\"male\",\n            isAdmin:response.isAdmin\n        }\n    }\n\n    /**\n     * Maps a Firebase registration response to a User model.\n     * @param response - The Firebase registration response.\n     * @param name - User's username.\n     * @param gender - User's gender.\n     * @returns User model populated with Firebase response data and provided user info.\n     */\n    RegisterResponse(response: LoginResponse,name:string,gender:string) {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:name,\n            gender:gender,\n            isAdmin:false\n        }\n    }\n\n    /**\n     * Maps a Firebase user retrieval response to a User model.\n     * @param response - The Firebase user response.\n     * @param token - Authentication token (not currently used).\n     * @returns User model populated with Firebase response data.\n     */\n    GetUserResponse(response: LoginResponse, token: string) {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:\"xd\",\n            gender:\"male\",\n            isAdmin:response.isAdmin\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Thumbnail.html":{"url":"interfaces/Thumbnail.html","title":"interface - Thumbnail","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Thumbnail\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            ext\n                                        \n                                \n                                \n                                        \n                                            hash\n                                        \n                                \n                                \n                                        \n                                            height\n                                        \n                                \n                                \n                                        \n                                            mime\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            path\n                                        \n                                \n                                \n                                        \n                                            provider_metadata\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            url\n                                        \n                                \n                                \n                                        \n                                            width\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        ext\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ext:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hash\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hash:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        height\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        height:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mime\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mime:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        path\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        path:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider_metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider_metadata:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        width\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        width:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TranslationService.html":{"url":"injectables/TranslationService.html","title":"injectable - TranslationService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TranslationService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/translation.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service responsible for handling app language translation.\nUses ngx-translate for managing translation resources.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                LANG_KEY\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCurrentLanguage\n                            \n                            \n                                initTranslate\n                            \n                            \n                                setLanguage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(translate: TranslateService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/translation.service.ts:12\n                            \n                        \n\n                \n                    \n                            Creates an instance of TranslationService and initializes\nthe app language based on saved preferences or default.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        translate\n                                                  \n                                                        \n                                                                    TranslateService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nngx-translate service instance.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCurrentLanguage\n                        \n                    \n                \n            \n            \n                \ngetCurrentLanguage()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/translation.service.ts:51\n                        \n                    \n\n\n            \n                \n                        Retrieves the currently active language code.\n\n\n                        \n                            Returns :         string\n\n                        \n                            \n                                Current language code as string.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        initTranslate\n                        \n                    \n                \n            \n            \n                \ninitTranslate()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/translation.service.ts:30\n                        \n                    \n\n\n            \n                \n                        Initializes the translation service by setting the language\nto the saved preference in localStorage or the default 'en'.\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setLanguage\n                        \n                    \n                \n            \n            \n                \nsetLanguage(lang: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/impl/translation.service.ts:41\n                        \n                    \n\n\n            \n                \n                        Sets the current language for the app translations and\nsaves the selected language to localStorage.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                lang\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nLanguage code to set (e.g. 'en', 'es').\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        LANG_KEY\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'SELECTED_LANGUAGE'\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/impl/translation.service.ts:12\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\n\n/**\n * Service responsible for handling app language translation.\n * Uses ngx-translate for managing translation resources.\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class TranslationService {\n  private readonly LANG_KEY = 'SELECTED_LANGUAGE';\n\n  /**\n   * Creates an instance of TranslationService and initializes\n   * the app language based on saved preferences or default.\n   * \n   * @param translate - ngx-translate service instance.\n   */\n  constructor(\n    private translate: TranslateService\n  ) {\n    this.initTranslate();\n  }\n\n  /**\n   * Initializes the translation service by setting the language\n   * to the saved preference in localStorage or the default 'en'.\n   */\n  initTranslate() {\n    const savedLang = localStorage.getItem(this.LANG_KEY) || 'en';\n    this.setLanguage(savedLang);\n  }\n\n  /**\n   * Sets the current language for the app translations and\n   * saves the selected language to localStorage.\n   * \n   * @param lang - Language code to set (e.g. 'en', 'es').\n   */\n  setLanguage(lang: string) {\n    this.translate.use(lang);\n    localStorage.setItem(this.LANG_KEY, lang);\n  }\n\n  /**\n   * Retrieves the currently active language code.\n   * \n   * @returns Current language code as string.\n   */\n  getCurrentLanguage(): string {\n    return this.translate.currentLang || 'en';\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/User.html":{"url":"interfaces/User.html","title":"interface - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/models/User.model.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            Model\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            gender\n                                        \n                                \n                                \n                                        \n                                            isAdmin\n                                        \n                                \n                                \n                                        \n                                            token\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isAdmin\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isAdmin:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        token\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        token:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Model } from \"./base.model\";\n\nexport interface User extends Model{\n    username:string,\n    email:string,\n    gender:string\n    token:string,\n    isAdmin:string\n}\n\nexport interface BasicUser extends Model{\n    username:string,\n    gender:string\n    email:string,\n    img:string,\n    isAdmin:boolean\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserBaseRepository.html":{"url":"injectables/UserBaseRepository.html","title":"injectable - UserBaseRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserBaseRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/UserBase.repository.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addcryptotodatabase\n                            \n                            \n                                addCryptoToList\n                            \n                            \n                                addlistToUser\n                            \n                            \n                                AdminDeleteUser\n                            \n                            \n                                AdminGetUsersPagination\n                            \n                            \n                                AdminUpdateUser\n                            \n                            \n                                findcryptobyid\n                            \n                            \n                                GetBasicUser\n                            \n                            \n                                GetListFromUser\n                            \n                            \n                                removeCryptoFromList\n                            \n                            \n                                removelistFromUser\n                            \n                            \n                                updatelistFromUser\n                            \n                            \n                                updateuserdata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpclient: HttpClient, api: string, mapping: IUserBaseMapping)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:14\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserBaseRepository.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        httpclient\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Angular HttpClient for making HTTP requests.\n\n                                                        \n                                                \n                                                \n                                                        api\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Base URL for the user API.\n\n                                                        \n                                                \n                                                \n                                                        mapping\n                                                  \n                                                        \n                                                                    IUserBaseMapping\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Mapper to convert between API data and User models.\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \naddcryptotodatabase(token: string, crypto: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:47\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addCryptoToList\n                        \n                    \n                \n            \n            \n                \naddCryptoToList(token: string, idlist: string, idcrypto: string, crypto?: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:41\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idlist\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistToUser\n                        \n                    \n                \n            \n            \n                \naddlistToUser(token: string, list: CryptoList, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:59\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                list\n                                            \n                                                            CryptoList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminDeleteUser\n                        \n                    \n                \n            \n            \n                \nAdminDeleteUser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:32\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminGetUsersPagination\n                        \n                    \n                \n            \n            \n                \nAdminGetUsersPagination(token: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:29\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminUpdateUser\n                        \n                    \n                \n            \n            \n                \nAdminUpdateUser(token: string, iduser: string, username: string, gender: string, isAdmin: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:26\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                isAdmin\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findcryptobyid\n                        \n                    \n                \n            \n            \n                \nfindcryptobyid(token: string, idcrypto: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:44\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBasicUser\n                        \n                    \n                \n            \n            \n                \nGetBasicUser(token: string, id: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:35\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetListFromUser\n                        \n                    \n                \n            \n            \n                \nGetListFromUser(token: string, id?: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:56\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeCryptoFromList\n                        \n                    \n                \n            \n            \n                \nremoveCryptoFromList(token: string, listid: string, cryptoid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:50\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cryptoid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removelistFromUser\n                        \n                    \n                \n            \n            \n                \nremovelistFromUser(token: String, listid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:62\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            String\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelistFromUser\n                        \n                    \n                \n            \n            \n                \nupdatelistFromUser(token: String, list: BasicList)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:53\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            String\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateuserdata\n                        \n                    \n                \n            \n            \n                \nupdateuserdata(token: string, data: any, userid: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/repositories/impl/user/UserBase.repository.ts:38\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                userid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { IUserbaseRepositoy } from \"../../interfaces/user/User-base.interface\";\nimport { User } from \"src/app/core/models/User.model\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { USER_API_URL_TOKEN, USER_MAPPING_TOKEN } from \"../../repository.tokens\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { Observable } from \"rxjs\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserBaseRepository implements IUserbaseRepositoy{\n    /**\n     * Creates an instance of UserBaseRepository.\n     * @param httpclient Angular HttpClient for making HTTP requests.\n     * @param api Base URL for the user API.\n     * @param mapping Mapper to convert between API data and User models.\n     */\n    constructor(\n        protected httpclient:HttpClient,\n        @Inject(USER_API_URL_TOKEN) protected api:string,\n        @Inject(USER_MAPPING_TOKEN) protected mapping:IUserBaseMapping,\n    ){}\n    AdminUpdateUser(token: string, iduser: string, username: string, gender: string, isAdmin: boolean): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    AdminGetUsersPagination(token: string, page: number, limit: number): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    AdminDeleteUser(token: string, iduser: string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    GetBasicUser(token: string, id: string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    updateuserdata(token: string, data: any, userid: string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    addCryptoToList(token: string, idlist: string, idcrypto: string,crypto?: BasicCrypto): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    findcryptobyid(token:string,idcrypto: string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    addcryptotodatabase(token:string,crypto: BasicCrypto): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    removeCryptoFromList(token: string, listid: string, cryptoid: string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    updatelistFromUser(token: String, list: BasicList): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    GetListFromUser(token: string,id?:string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    addlistToUser(token: string, list: CryptoList,iduser:string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n    removelistFromUser(token: String, listid: string): Observable {\n        throw new Error(\"Method not implemented.\");\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserFirebaseService.html":{"url":"injectables/UserFirebaseService.html","title":"injectable - UserFirebaseService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserFirebaseService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/user/firebase-user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service extending UserBaseService to handle user operations\nspecifically related to Firebase user management.\nImplements IFirebaseService interface.\n\n            \n\n            \n                Extends\n            \n            \n                            UserBaseService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addcryptotodatabase\n                            \n                            \n                                addCryptoToList\n                            \n                            \n                                addlistToUser\n                            \n                            \n                                AdminDeleteUser\n                            \n                            \n                                AdminGetUsersPagination\n                            \n                            \n                                AdminUpdateUser\n                            \n                            \n                                findcryptobyid\n                            \n                            \n                                GetBasicUser\n                            \n                            \n                                GetBehaviourUser\n                            \n                            \n                                GetListFromUser\n                            \n                            \n                                getUsersCsv\n                            \n                            \n                                removeCryptoFromList\n                            \n                            \n                                removelistFromUser\n                            \n                            \n                                updatelistFromUser\n                            \n                            \n                                updateuserdata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IUserbaseRepositoy, auth: IAuthenticationService, url: string, http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/user/firebase-user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserFirebaseService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                    IUserbaseRepositoy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nUser repository for data operations.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAuthentication service to provide token and user info.\n\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nURL token for fetching user CSV data.\n\n\n                                                        \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular HttpClient for HTTP operations.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \naddcryptotodatabase(crypto: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:136\n\n                        \n                    \n\n\n            \n                \n                        Adds a new cryptocurrency to the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cryptocurrency data to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addCryptoToList\n                        \n                    \n                \n            \n            \n                \naddCryptoToList(idlist: string, idcrypto: string, crypto?: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:116\n\n                        \n                    \n\n\n            \n                \n                        Adds a cryptocurrency to a user's crypto list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idlist\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the list to add to.\n\n\n                                            \n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the cryptocurrency to add.\n\n\n                                            \n                                        \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional cryptocurrency data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistToUser\n                        \n                    \n                \n            \n            \n                \naddlistToUser(list: BasicList)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:156\n\n                        \n                    \n\n\n            \n                \n                        Adds a new crypto list to the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe BasicList data to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable emitting the added BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminDeleteUser\n                        \n                    \n                \n            \n            \n                \nAdminDeleteUser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:210\n\n                        \n                    \n\n\n            \n                \n                        Admin operation: Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAdmin auth token.\n\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user ID to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminGetUsersPagination\n                        \n                    \n                \n            \n            \n                \nAdminGetUsersPagination(token: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:199\n\n                        \n                    \n\n\n            \n                \n                        Admin operation: Retrieves paginated users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAdmin auth token.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of users per page.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting paginated users data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminUpdateUser\n                        \n                    \n                \n            \n            \n                \nAdminUpdateUser(token: string, iduser: string, username: string, gender: string, isAdmin: boolean)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:224\n\n                        \n                    \n\n\n            \n                \n                        Admin operation: Updates a user's data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAdmin auth token.\n\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user ID to update.\n\n\n                                            \n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new username.\n\n\n                                            \n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new gender.\n\n\n                                            \n                                        \n                                        \n                                                isAdmin\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe admin status flag.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the update result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findcryptobyid\n                        \n                    \n                \n            \n            \n                \nfindcryptobyid(idcrypto: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:126\n\n                        \n                    \n\n\n            \n                \n                        Finds a cryptocurrency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cryptocurrency ID to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the found cryptocurrency data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBasicUser\n                        \n                    \n                \n            \n            \n                \nGetBasicUser()\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:74\n\n                        \n                    \n\n\n            \n                \n                        Fetches basic user data from the repository using the authenticated user's token and ID.\nUpdates the BehaviorSubject with the fetched data.\nIf no user image exists, assigns a default avatar path.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the BasicUser data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBehaviourUser\n                        \n                    \n                \n            \n            \n                \nGetBehaviourUser()\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:63\n\n                        \n                    \n\n\n            \n                \n                        Gets the BehaviorSubject as an Observable for user data updates.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the current BasicUser data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetListFromUser\n                        \n                    \n                \n            \n            \n                \nGetListFromUser(id?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:146\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the crypto lists associated with a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional user ID. If omitted, uses current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of CryptoList objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsersCsv\n                        \n                    \n                \n            \n            \n                \ngetUsersCsv()\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:54\n\n                        \n                    \n\n\n            \n                \n                        Downloads a CSV file containing users data.\n\n\n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                An Observable emitting the HTTP response containing the CSV blob.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeCryptoFromList\n                        \n                    \n                \n            \n            \n                \nremoveCryptoFromList(listid: string, cryptoid: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:187\n\n                        \n                    \n\n\n            \n                \n                        Removes a cryptocurrency from a user's crypto list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the list.\n\n\n                                            \n                                        \n                                        \n                                                cryptoid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the cryptocurrency to remove.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removelistFromUser\n                        \n                    \n                \n            \n            \n                \nremovelistFromUser(listid: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:176\n\n                        \n                    \n\n\n            \n                \n                        Removes a crypto list from the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the list to remove.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable emitting the removed BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelistFromUser\n                        \n                    \n                \n            \n            \n                \nupdatelistFromUser(list: BasicList)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:166\n\n                        \n                    \n\n\n            \n                \n                        Updates an existing crypto list for the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe BasicList data to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable emitting the updated BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateuserdata\n                        \n                    \n                \n            \n            \n                \nupdateuserdata(data: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:93\n\n                        \n                    \n\n\n            \n                \n                        Updates user data via the repository and updates the BehaviorSubject.\nIf the updated data does not include an image, retains the current image.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user data to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the updated BasicUser data.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({\n        id: '',\n        username: '',\n        email: '',\n        img:\"\",\n        gender:'',\n        isAdmin:false\n    })\n                    \n                \n                        \n                            \n                                Inherited from         UserBaseService\n\n                            \n                        \n                    \n                        \n                                Defined in         UserBaseService:25\n\n                        \n                    \n\n            \n                \n                    BehaviorSubject holding the current basic user data.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { UserBaseService } from \"./base-user.service\";\nimport { User } from \"src/app/core/models/User.model\";\nimport { AUTH_TOKEN, USER_CSV_URL_TOKEN, USER_REPOSITORY_TOKEN } from \"src/app/core/repositories/repository.tokens\";\nimport { IAuthenticationService } from \"../../interfaces/authentication/authentication.interface\";\nimport { IUserbaseRepositoy } from \"src/app/core/repositories/interfaces/user/User-base.interface\";\nimport { IFirebaseService } from \"../../interfaces/user/Firebase.service.interface\";\nimport { HttpClient } from \"@angular/common/http\";\n\n/**\n * Service extending UserBaseService to handle user operations\n * specifically related to Firebase user management.\n * Implements IFirebaseService interface.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserFirebaseService extends UserBaseService implements IFirebaseService{\n    /**\n     * Creates an instance of UserFirebaseService.\n     * \n     * @param repository - User repository for data operations.\n     * @param auth - Authentication service to provide token and user info.\n     * @param url - URL token for fetching user CSV data.\n     * @param http - Angular HttpClient for HTTP operations.\n     */\n    constructor(\n        @Inject (USER_REPOSITORY_TOKEN) repository:IUserbaseRepositoy,\n        @Inject (AUTH_TOKEN) auth:IAuthenticationService,\n        @Inject(USER_CSV_URL_TOKEN) url:string,\n        http:HttpClient\n    ){\n        super(repository,auth,url,http)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserStrapiService.html":{"url":"injectables/UserStrapiService.html","title":"injectable - UserStrapiService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserStrapiService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/user/strapi-user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service extending UserBaseService to manage user operations\nspecifically tailored for Strapi backend integration.\nImplements the IStrapiService interface.\n\n            \n\n            \n                Extends\n            \n            \n                            UserBaseService\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                user\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addcryptotodatabase\n                            \n                            \n                                addCryptoToList\n                            \n                            \n                                addlistToUser\n                            \n                            \n                                AdminDeleteUser\n                            \n                            \n                                AdminGetUsersPagination\n                            \n                            \n                                AdminUpdateUser\n                            \n                            \n                                findcryptobyid\n                            \n                            \n                                GetBasicUser\n                            \n                            \n                                GetBehaviourUser\n                            \n                            \n                                GetListFromUser\n                            \n                            \n                                getUsersCsv\n                            \n                            \n                                removeCryptoFromList\n                            \n                            \n                                removelistFromUser\n                            \n                            \n                                updatelistFromUser\n                            \n                            \n                                updateuserdata\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(repository: IUserbaseRepositoy, auth: IAuthenticationService, url: string, http: HttpClient)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/impl/user/strapi-user.service.ts:18\n                            \n                        \n\n                \n                    \n                            Creates an instance of UserStrapiService.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        repository\n                                                  \n                                                        \n                                                                    IUserbaseRepositoy\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nUser repository for data access.\n\n\n                                                        \n                                                \n                                                \n                                                        auth\n                                                  \n                                                        \n                                                                        IAuthenticationService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAuthentication service to handle auth tokens and user info.\n\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nURL token for user CSV export.\n\n\n                                                        \n                                                \n                                                \n                                                        http\n                                                  \n                                                        \n                                                                    HttpClient\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nAngular HttpClient for HTTP requests.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addcryptotodatabase\n                        \n                    \n                \n            \n            \n                \naddcryptotodatabase(crypto: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:136\n\n                        \n                    \n\n\n            \n                \n                        Adds a new cryptocurrency to the database.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cryptocurrency data to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addCryptoToList\n                        \n                    \n                \n            \n            \n                \naddCryptoToList(idlist: string, idcrypto: string, crypto?: BasicCrypto)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:116\n\n                        \n                    \n\n\n            \n                \n                        Adds a cryptocurrency to a user's crypto list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idlist\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the list to add to.\n\n\n                                            \n                                        \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the cryptocurrency to add.\n\n\n                                            \n                                        \n                                        \n                                                crypto\n                                            \n                                                            BasicCrypto\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional cryptocurrency data.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addlistToUser\n                        \n                    \n                \n            \n            \n                \naddlistToUser(list: BasicList)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:156\n\n                        \n                    \n\n\n            \n                \n                        Adds a new crypto list to the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe BasicList data to add.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable emitting the added BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminDeleteUser\n                        \n                    \n                \n            \n            \n                \nAdminDeleteUser(token: string, iduser: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:210\n\n                        \n                    \n\n\n            \n                \n                        Admin operation: Deletes a user by ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAdmin auth token.\n\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user ID to delete.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the deletion result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminGetUsersPagination\n                        \n                    \n                \n            \n            \n                \nAdminGetUsersPagination(token: string, page: number, limit: number)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:199\n\n                        \n                    \n\n\n            \n                \n                        Admin operation: Retrieves paginated users.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAdmin auth token.\n\n\n                                            \n                                        \n                                        \n                                                page\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe page number.\n\n\n                                            \n                                        \n                                        \n                                                limit\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nNumber of users per page.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting paginated users data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AdminUpdateUser\n                        \n                    \n                \n            \n            \n                \nAdminUpdateUser(token: string, iduser: string, username: string, gender: string, isAdmin: boolean)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:224\n\n                        \n                    \n\n\n            \n                \n                        Admin operation: Updates a user's data.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                token\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nAdmin auth token.\n\n\n                                            \n                                        \n                                        \n                                                iduser\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user ID to update.\n\n\n                                            \n                                        \n                                        \n                                                username\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new username.\n\n\n                                            \n                                        \n                                        \n                                                gender\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe new gender.\n\n\n                                            \n                                        \n                                        \n                                                isAdmin\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe admin status flag.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the update result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findcryptobyid\n                        \n                    \n                \n            \n            \n                \nfindcryptobyid(idcrypto: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:126\n\n                        \n                    \n\n\n            \n                \n                        Finds a cryptocurrency by its ID.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                idcrypto\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe cryptocurrency ID to find.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the found cryptocurrency data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBasicUser\n                        \n                    \n                \n            \n            \n                \nGetBasicUser()\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:74\n\n                        \n                    \n\n\n            \n                \n                        Fetches basic user data from the repository using the authenticated user's token and ID.\nUpdates the BehaviorSubject with the fetched data.\nIf no user image exists, assigns a default avatar path.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the BasicUser data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetBehaviourUser\n                        \n                    \n                \n            \n            \n                \nGetBehaviourUser()\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:63\n\n                        \n                    \n\n\n            \n                \n                        Gets the BehaviorSubject as an Observable for user data updates.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the current BasicUser data.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GetListFromUser\n                        \n                    \n                \n            \n            \n                \nGetListFromUser(id?: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:146\n\n                        \n                    \n\n\n            \n                \n                        Retrieves the crypto lists associated with a user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    \nOptional user ID. If omitted, uses current user.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting an array of CryptoList objects.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getUsersCsv\n                        \n                    \n                \n            \n            \n                \ngetUsersCsv()\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:54\n\n                        \n                    \n\n\n            \n                \n                        Downloads a CSV file containing users data.\n\n\n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                An Observable emitting the HTTP response containing the CSV blob.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removeCryptoFromList\n                        \n                    \n                \n            \n            \n                \nremoveCryptoFromList(listid: string, cryptoid: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:187\n\n                        \n                    \n\n\n            \n                \n                        Removes a cryptocurrency from a user's crypto list.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the list.\n\n\n                                            \n                                        \n                                        \n                                                cryptoid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the cryptocurrency to remove.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the operation result.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        removelistFromUser\n                        \n                    \n                \n            \n            \n                \nremovelistFromUser(listid: string)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:176\n\n                        \n                    \n\n\n            \n                \n                        Removes a crypto list from the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                listid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe ID of the list to remove.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable emitting the removed BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updatelistFromUser\n                        \n                    \n                \n            \n            \n                \nupdatelistFromUser(list: BasicList)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:166\n\n                        \n                    \n\n\n            \n                \n                        Updates an existing crypto list for the user.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                list\n                                            \n                                                            BasicList\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe BasicList data to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable emitting the updated BasicList.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateuserdata\n                        \n                    \n                \n            \n            \n                \nupdateuserdata(data: any)\n                \n            \n\n\n                    \n                        \n                            Inherited from         UserBaseService\n\n                        \n                    \n                    \n                        \n                                Defined in         UserBaseService:93\n\n                        \n                    \n\n\n            \n                \n                        Updates user data via the repository and updates the BehaviorSubject.\nIf the updated data does not include an image, retains the current image.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe user data to update.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable emitting the updated BasicUser data.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BehaviorSubject\n\n                    \n                \n                \n                    \n                        Default value : new BehaviorSubject({\n        id: '',\n        username: '',\n        email: '',\n        img:\"\",\n        gender:'',\n        isAdmin:false\n    })\n                    \n                \n                        \n                            \n                                Inherited from         UserBaseService\n\n                            \n                        \n                    \n                        \n                                Defined in         UserBaseService:25\n\n                        \n                    \n\n            \n                \n                    BehaviorSubject holding the current basic user data.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Inject, Injectable } from \"@angular/core\";\nimport { IStrapiService } from \"../../interfaces/user/Strapi.service.interface\";\nimport { UserBaseService } from \"./base-user.service\";\nimport { User } from \"src/app/core/models/User.model\";\nimport { AUTH_TOKEN, USER_CSV_URL_TOKEN, USER_REPOSITORY_TOKEN } from \"src/app/core/repositories/repository.tokens\";\nimport { IUserbaseRepositoy } from \"src/app/core/repositories/interfaces/user/User-base.interface\";\nimport { IAuthenticationService } from \"../../interfaces/authentication/authentication.interface\";\nimport { HttpClient } from \"@angular/common/http\";\n\n/**\n * Service extending UserBaseService to manage user operations\n * specifically tailored for Strapi backend integration.\n * Implements the IStrapiService interface.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class UserStrapiService extends UserBaseService implements IStrapiService{\n    /**\n     * Creates an instance of UserStrapiService.\n     * \n     * @param repository - User repository for data access.\n     * @param auth - Authentication service to handle auth tokens and user info.\n     * @param url - URL token for user CSV export.\n     * @param http - Angular HttpClient for HTTP requests.\n     */\n    constructor(\n        @Inject (USER_REPOSITORY_TOKEN) repository:IUserbaseRepositoy,\n        @Inject (AUTH_TOKEN) auth:IAuthenticationService,\n        @Inject(USER_CSV_URL_TOKEN) url:string,\n        http: HttpClient\n    ){\n        super(repository,auth,url,http)\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/addcrypto.html":{"url":"interfaces/addcrypto.html","title":"interface - addcrypto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  addcrypto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         cryptoxd\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         cryptoxd\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/addlistresponse.html":{"url":"interfaces/addlistresponse.html","title":"interface - addlistresponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  addlistresponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         Data\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Data\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         Meta\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Meta\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/basicuseresponse.html":{"url":"interfaces/basicuseresponse.html","title":"interface - basicuseresponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  basicuseresponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            blocked\n                                        \n                                \n                                \n                                        \n                                            confirmed\n                                        \n                                \n                                \n                                        \n                                            createdAt\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            image\n                                        \n                                \n                                \n                                        \n                                            provider\n                                        \n                                \n                                \n                                        \n                                            updatedAt\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        blocked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        blocked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        confirmed\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        confirmed:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        createdAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createdAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:         Image\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Image\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        provider\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        provider:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updatedAt\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updatedAt:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/bodyupdate.html":{"url":"interfaces/bodyupdate.html","title":"interface - bodyupdate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  bodyupdate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            Description\n                                        \n                                \n                                \n                                        \n                                            Title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        Description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                        capacitor.config.ts\n            \n            variable\n            config\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/app.component.ts\n            \n            component\n            AppComponent\n            \n                54 %\n                (6/11)\n            \n        \n        \n            \n                \n                        src/app/app.module.ts\n            \n            function\n            createTranslateLoader\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/directives/backgraphbutton.directive.ts\n            \n            directive\n            BackgraphbuttonDirective\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/directives/colorpercent.directive.ts\n            \n            directive\n            ColorpercentDirective\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/core/guards/auth.guard.ts\n            \n            guard\n            AuthGuard\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/core/guards/auth2.guard.ts\n            \n            guard\n            AuthGuard2\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/core/guards/authAdmin.guard.ts\n            \n            guard\n            AuthGuardAdmin\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/core/models/Crypto.model.ts\n            \n            interface\n            AdvancedCrypto\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/models/Crypto.model.ts\n            \n            interface\n            BasicCrypto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/models/Crypto.model.ts\n            \n            interface\n            CryptoGraphPrice\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/models/CryptoList.model.ts\n            \n            interface\n            BasicList\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/models/CryptoList.model.ts\n            \n            interface\n            CryptoList\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/models/User.model.ts\n            \n            interface\n            BasicUser\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/models/User.model.ts\n            \n            interface\n            User\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/models/auth.model.ts\n            \n            interface\n            LoginPayLoad\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/models/auth.model.ts\n            \n            interface\n            RegisterPayLoad\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/models/base.model.ts\n            \n            interface\n            Model\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/pipes/currency.pipe.ts\n            \n            pipe\n            CurrencyPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/pipes/percentformater.pipe.ts\n            \n            pipe\n            PercentformaterPipe\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            function\n            createCoinGekorepository\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            function\n            createStrapiRepository\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            variable\n            AuthenticationMappingServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            variable\n            AuthenticationServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            variable\n            cryptofactoryservice\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            variable\n            MediaServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            variable\n            userfactoryservice\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            variable\n            UserMappingFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/factory.ts\n            \n            variable\n            UserServiceFactory\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/crypto/CoinGeko.repository.ts\n            \n            injectable\n            CoinGekoRepository\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts\n            \n            injectable\n            CoinGekoMapping\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts\n            \n            interface\n            BasiCryptoFromApi\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts\n            \n            interface\n            CryptoFromApi\n            \n                3 %\n                (1/27)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/crypto/CoinGekoMapping.service.ts\n            \n            interface\n            PricesCryptoFromApi\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/crypto/CryptoBase.repository.ts\n            \n            injectable\n            CryptoBaseRepository\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts\n            \n            injectable\n            FirebaseUserMapping\n            \n                33 %\n                (4/12)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts\n            \n            interface\n            cryptosxd\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts\n            \n            interface\n            rawbasiclist\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/Firebase-user.repository.ts\n            \n            injectable\n            FirebaseUserRepository\n            \n                80 %\n                (12/15)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUser.repository.ts\n            \n            injectable\n            StrapiUserRepository\n            \n                66 %\n                (10/15)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            injectable\n            StrapiUserMapping\n            \n                91 %\n                (11/12)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            addcrypto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            addlistresponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Attributes\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Attributes2\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            basicuseresponse\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            BodyCreateList\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            bodyupdate\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            createListRemote\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            CreateListUpdate\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Crypto\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            cryptoid\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            cryptos\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            cryptoxd\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Data\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Data2\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            datadelete\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            deletecryptofromfavoritelist\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Favoritelist\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Formats\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            GetAllList\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            getallresponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Image\n            \n                0 %\n                (0/18)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Meta\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Small\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            Thumbnail\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            updateCryptoData\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            updatecryptofromfavoritelist\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            updateCryptoId\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            updateCryptos\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n            \n            interface\n            updateuser\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/app/core/repositories/impl/user/UserBase.repository.ts\n            \n            injectable\n            UserBaseRepository\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/app/core/repositories/interfaces/crypto/CoinGeko.interface.ts\n            \n            interface\n            ICoinGeko\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/repositories/interfaces/crypto/CryptoBase.interface.ts\n            \n            interface\n            ICryptoBase\n            \n                100 %\n                (5/5)\n            \n        \n        \n            \n                \n                src/app/core/repositories/interfaces/crypto/CryptoBaseMapping.interface.ts\n            \n            interface\n            ICryptoBaseMapping\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/core/repositories/interfaces/user/Firebase.interface.ts\n            \n            interface\n            IUserFirebaseRepository\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/repositories/interfaces/user/Strapi.interface.ts\n            \n            interface\n            IUserStrapiRepositoy\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/repositories/interfaces/user/User-base.interface.ts\n            \n            interface\n            IUserbaseRepositoy\n            \n                100 %\n                (14/14)\n            \n        \n        \n            \n                \n                src/app/core/repositories/interfaces/user/UserBaseMapping.interface.ts\n            \n            interface\n            IUserBaseMapping\n            \n                100 %\n                (12/12)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            AUTENTICATION_URL_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            AUTH_MAPPING_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            AUTH_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            BACKEND_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            CRYPTO_API_URL_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            CRYPTO_MAPPING_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            CRYPTO_REPOSITORY_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            CRYPTO_SERVICE_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            CRYPTOTOKEN_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            FIREBASE_COLLECTION_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            FIREBASE_CONFIG_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            FIREBASE_MAIN_SERVICE\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            LOGIN_API_URL_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            MEDIA_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            REGISTER_API_URL_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            UPLOAD_API_URL_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            USER_API_URL_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            USER_CSV_URL_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            USER_MAPPING_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            USER_REPOSITORY_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/app/core/repositories/repository.tokens.ts\n            \n            variable\n            USER_SERVICE_TOKEN\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/base-autentication.service.ts\n            \n            injectable\n            BaseAutenticationService\n            \n                83 %\n                (15/18)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts\n            \n            class\n            FirebaseAuthMappingService\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts\n            \n            interface\n            LoginResponse\n            \n                7 %\n                (1/13)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts\n            \n            interface\n            providedata\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts\n            \n            interface\n            StsTokenManager\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/firebase-authentication.service.ts\n            \n            injectable\n            FirebaseAuthenticationService\n            \n                88 %\n                (16/18)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/strapi-autentication.service.ts\n            \n            injectable\n            StrapiAutenticationService\n            \n                83 %\n                (15/18)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n            \n            injectable\n            StrapiAuthMappingService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n            \n            interface\n            StrapiLoginResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n            \n            interface\n            StrapiRegister\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n            \n            interface\n            StrapiRegisterResponse\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n            \n            interface\n            StrapiSignIn\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/authentication/strapi-auth-mapping.service.ts\n            \n            interface\n            StrapiUser\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/crypto/CryptoBase.service.ts\n            \n            injectable\n            CryptoBaseService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/crypto/CryptoGeko.service.ts\n            \n            injectable\n            CryptoGeko\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/firebasemain.service.ts\n            \n            injectable\n            FirebaseMainService\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/media/base-media.service.ts\n            \n            injectable\n            BaseMediaService\n            \n                100 %\n                (2/2)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/media/firebase-media.service.ts\n            \n            injectable\n            FirebaseMediaService\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/media/strapi-media.service.ts\n            \n            class\n            StrapiMediaService\n            \n                100 %\n                (4/4)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/translation.service.ts\n            \n            injectable\n            TranslationService\n            \n                83 %\n                (5/6)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/user/base-user.service.ts\n            \n            injectable\n            UserBaseService\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/user/firebase-user.service.ts\n            \n            injectable\n            UserFirebaseService\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/app/core/services/impl/user/strapi-user.service.ts\n            \n            injectable\n            UserStrapiService\n            \n                100 %\n                (18/18)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/authentication/auth-mapping.interface.ts\n            \n            interface\n            IAuthenticationMapping\n            \n                100 %\n                (6/6)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/authentication/authentication.interface.ts\n            \n            interface\n            IAuthenticationService\n            \n                100 %\n                (16/16)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/authentication/firebase-authentication.interface.ts\n            \n            interface\n            IFirebaseAuthentication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/authentication/strapi-authentication.interface.ts\n            \n            interface\n            IStrapiAuthentication\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/crypto/CoinGeko-service.interface.ts\n            \n            interface\n            CryptoCoinGeko\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/crypto/Crypto-base-service.interface.ts\n            \n            interface\n            ICryptobaseService\n            \n                80 %\n                (4/5)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/firebasemain.service.interface.ts\n            \n            interface\n            IFirebaseMainService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/user/Firebase.service.interface.ts\n            \n            interface\n            IFirebaseService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/user/Strapi.service.interface.ts\n            \n            interface\n            IStrapiService\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/core/services/interfaces/user/User-base-service.interface.ts\n            \n            interface\n            IUserbaseService\n            \n                93 %\n                (15/16)\n            \n        \n        \n            \n                \n                src/app/pages/General/about/about.page.ts\n            \n            component\n            AboutPage\n            \n                100 %\n                (3/3)\n            \n        \n        \n            \n                \n                src/app/pages/General/admin-panel/admin-panel.page.ts\n            \n            component\n            AdminPanelPage\n            \n                73 %\n                (11/15)\n            \n        \n        \n            \n                \n                src/app/pages/General/cryptoview/cryptoview.page.ts\n            \n            component\n            CryptoviewPage\n            \n                61 %\n                (11/18)\n            \n        \n        \n            \n                \n                src/app/pages/General/home/home.page.ts\n            \n            component\n            HomePage\n            \n                61 %\n                (8/13)\n            \n        \n        \n            \n                \n                src/app/pages/General/list/list.page.ts\n            \n            component\n            ListPage\n            \n                78 %\n                (11/14)\n            \n        \n        \n            \n                \n                src/app/pages/General/listcontent/listcontent.page.ts\n            \n            component\n            ListcontentPage\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                src/app/pages/General/profile/profile.page.ts\n            \n            component\n            ProfilePage\n            \n                62 %\n                (10/16)\n            \n        \n        \n            \n                \n                src/app/pages/General/search/search.page.ts\n            \n            component\n            SearchPage\n            \n                52 %\n                (13/25)\n            \n        \n        \n            \n                \n                        src/app/pages/General/search/search.page.ts\n            \n            variable\n            webkitSpeechRecognition\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/app/pages/Start/login/login.page.ts\n            \n            component\n            LoginPage\n            \n                71 %\n                (5/7)\n            \n        \n        \n            \n                \n                src/app/pages/Start/register/register.page.ts\n            \n            component\n            RegisterPage\n            \n                60 %\n                (6/10)\n            \n        \n        \n            \n                \n                src/app/shared/admin-formulary/admin-formulary.component.ts\n            \n            component\n            AdminFormularyComponent\n            \n                62 %\n                (5/8)\n            \n        \n        \n            \n                \n                src/app/shared/cryptocard/cryptocard.component.ts\n            \n            component\n            CryptocardComponent\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/app/shared/cryptosimplecard/cryptosimplecard.component.ts\n            \n            component\n            CryptosimplecardComponent\n            \n                16 %\n                (1/6)\n            \n        \n        \n            \n                \n                src/app/shared/custom-gender/custom-gender.component.ts\n            \n            component\n            CustomGenderComponent\n            \n                56 %\n                (9/16)\n            \n        \n        \n            \n                \n                src/app/shared/formulary/formulary.component.ts\n            \n            component\n            FormularyComponent\n            \n                25 %\n                (3/12)\n            \n        \n        \n            \n                \n                src/app/shared/listcrypto/listcrypto.component.ts\n            \n            component\n            ListcryptoComponent\n            \n                33 %\n                (2/6)\n            \n        \n        \n            \n                \n                src/app/shared/listformulary/listformulary.component.ts\n            \n            component\n            ListformularyComponent\n            \n                44 %\n                (4/9)\n            \n        \n        \n            \n                \n                src/app/shared/sharedservice/shared.service.ts\n            \n            injectable\n            SharedService\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/app/shared/splash/splash.page.ts\n            \n            component\n            SplashPage\n            \n                50 %\n                (4/8)\n            \n        \n        \n            \n                \n                        src/environments/environment.prod.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                        src/environments/environment.ts\n            \n            variable\n            environment\n            \n                0 %\n                (0/1)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/createListRemote.html":{"url":"interfaces/createListRemote.html","title":"interface - createListRemote","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  createListRemote\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         BodyCreateList\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         BodyCreateList\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/cryptoid.html":{"url":"interfaces/cryptoid.html","title":"interface - cryptoid","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  cryptoid\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/cryptos.html":{"url":"interfaces/cryptos.html","title":"interface - cryptos","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  cryptos\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            disconnect\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        disconnect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        disconnect:         cryptoid[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         cryptoid[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/cryptosxd.html":{"url":"interfaces/cryptosxd.html","title":"interface - cryptosxd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  cryptosxd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            symbol\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        symbol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { CryptoList, BasicList } from \"src/app/core/models/CryptoList.model\";\nimport { LoginResponse } from \"src/app/core/services/impl/authentication/firebase-auth-mapping.service\";\n\nexport interface rawbasiclist {\n    id:string,\n    description: string,\n    title: string,\n    cryptos?:cryptosxd[]\n}\nexport interface cryptosxd {\n    id:string,\n    symbol: string\n    name: string\n}\n\n/**\n * Mapping service responsible for converting raw Firebase user data\n * into application models and vice versa.\n * \n * Implements IUserBaseMapping interface for user-related data transformation.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class FirebaseUserMapping implements IUserBaseMapping{\n    /**\n     * Maps an array of raw user lists from Firebase into CryptoList models.\n     * \n     * @param data Raw user list data array.\n     * @returns Array of CryptoList objects mapped from the raw data.\n     */\n    GetListFromUser(data: rawbasiclist[]): CryptoList[] {\n        let listafinal:CryptoList[]=data.map(c=>{\n            return {\n                id:c.id,\n                title:c.title,\n                description:c.description,\n                cryptos:c.cryptos?.map(x=>{\n                    return {\n                        id:x.id,\n                        symbol:x.symbol,\n                        name:x.name\n                    }\n                })??[]\n            }\n        })\n        return listafinal\n    }\n\n    addlistUser(data: any, iduser: string) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps the response data when adding a new list for a user.\n     * \n     * @param data Raw response data from adding a list.\n     * @returns BasicList model constructed from the response.\n     */\n    addlistUserResponse(data: any): BasicList {\n        return {\n            id:data.id,\n            title:data.title,\n            description:data.description\n        }\n    }\n\n    updatelistbody(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    deletecryptofromlist(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    findcryptobyidresponse(data: any, idcrypto: string) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptotodatabase(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptoresponse(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptotolist(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    updateuserdata(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Constructs a BasicUser model from login response and optional user details.\n     * \n     * @param data LoginResponse object containing Firebase authentication data.\n     * @param name Optional username.\n     * @param gender Optional user gender.\n     * @param image Optional user image URL.\n     * @param isAdmin Optional flag indicating if the user has admin privileges.\n     * @returns BasicUser model constructed from the provided data.\n     */\n    GetBasicUser(data: LoginResponse,name?:string,gender?:string,image?:string,isAdmin?:boolean):BasicUser {\n        return {\n            username:name!,\n            email:data.email,\n            id:data.uid,\n            gender:gender!,\n            img:image??\"\",\n            isAdmin:isAdmin??false\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/cryptoxd.html":{"url":"interfaces/cryptoxd.html","title":"interface - cryptoxd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  cryptoxd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cryptoId\n                                        \n                                \n                                \n                                        \n                                            Name\n                                        \n                                \n                                \n                                        \n                                            symbol\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cryptoId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cryptoId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        Name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        Name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        symbol\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        symbol:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/datadelete.html":{"url":"interfaces/datadelete.html","title":"interface - datadelete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  datadelete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cryptos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cryptos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cryptos:         cryptos\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         cryptos\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/deletecryptofromfavoritelist.html":{"url":"interfaces/deletecryptofromfavoritelist.html","title":"interface - deletecryptofromfavoritelist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  deletecryptofromfavoritelist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         datadelete\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         datadelete\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @angular/animations : ^18.0.0\n        \n            @angular/cdk : ^18.2.0\n        \n            @angular/common : ^18.0.0\n        \n            @angular/compiler : ^18.0.0\n        \n            @angular/core : ^18.0.0\n        \n            @angular/fire : ^18.0.1\n        \n            @angular/forms : ^18.0.0\n        \n            @angular/platform-browser : ^18.0.0\n        \n            @angular/platform-browser-dynamic : ^18.0.0\n        \n            @angular/router : ^18.0.0\n        \n            @capacitor-community/speech-recognition : ^5.0.0-0\n        \n            @capacitor/android : 6.2.0\n        \n            @capacitor/app : 6.0.2\n        \n            @capacitor/core : ^6.2.0\n        \n            @capacitor/haptics : 6.0.2\n        \n            @capacitor/keyboard : 6.0.3\n        \n            @capacitor/status-bar : 6.0.2\n        \n            @ionic/angular : ^8.0.0\n        \n            @ngx-translate/core : ^16.0.3\n        \n            @ngx-translate/http-loader : ^16.0.0\n        \n            chart.js : ^4.4.6\n        \n            chartjs-plugin-annotation : ^3.1.0\n        \n            file-saver : ^2.0.5\n        \n            firebase : ^11.6.0\n        \n            ionicons : ^7.0.0\n        \n            lottie-web : ^5.12.2\n        \n            ngx-lottie : ^12.0.0\n        \n            primeflex : ^3.3.1\n        \n            primeicons : ^7.0.0\n        \n            primeng : ^17.18.12\n        \n            rxjs : ~7.8.0\n        \n            tslib : ^2.8.1\n        \n            vue-virtual-scroller : ^2.0.0-beta.8\n        \n            zone.js : ~0.14.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createCoinGekorepository   (src/.../factory.ts)\n                        \n                        \n                            createStrapiRepository   (src/.../factory.ts)\n                        \n                        \n                            createTranslateLoader   (src/.../app.module.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/repositories/factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createCoinGekorepository\n                        \n                    \n                \n            \n            \n                \ncreateCoinGekorepository(httpclient: HttpClient, apiurltoken: string, mapping: ICryptoBaseMapping, cryptoken: string)\n                \n            \n\n\n\n\n            \n                \n                        Creates an instance of CoinGekoRepository with the required dependencies.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                httpclient\n                                            \n                                                        HttpClient\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe HTTP client used to make API requests.\n\n\n                                            \n                                        \n                                        \n                                                apiurltoken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe base URL or token for the cryptocurrency API.\n\n\n                                            \n                                        \n                                        \n                                                mapping\n                                            \n                                                            ICryptoBaseMapping\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe mapping service to transform API data.\n\n\n                                            \n                                        \n                                        \n                                                cryptoken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe authentication token for accessing the cryptocurrency API.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createStrapiRepository\n                        \n                    \n                \n            \n            \n                \ncreateStrapiRepository(httpclient: HttpClient, apiurltoken: string, mapping: IUserBaseMapping)\n                \n            \n\n\n\n\n            \n                \n                        Creates and returns a new instance of StrapiUserRepository.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                httpclient\n                                            \n                                                        HttpClient\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe Angular HttpClient used to perform HTTP requests.\n\n\n                                            \n                                        \n                                        \n                                                apiurltoken\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe API base URL or endpoint token for the user service.\n\n\n                                            \n                                        \n                                        \n                                                mapping\n                                            \n                                                            IUserBaseMapping\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nThe mapping service to transform API responses to user domain models.\n\n\n                                            \n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/app/app.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createTranslateLoader\n                        \n                    \n                \n            \n            \n                \ncreateTranslateLoader(http: HttpClient)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                http\n                                            \n                                                        HttpClient\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/getallresponse.html":{"url":"interfaces/getallresponse.html","title":"interface - getallresponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  getallresponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            meta\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Data2[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Data2[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        meta\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        meta:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n \n  \n \n\nCryptoWizzard 🚀\nCryptoWizzard es una aplicación para consultar el precio de criptomonedas en tiempo real, con soporte para diferentes monedas como el Euro (EUR), el Dólar (USD) y la Libra Esterlina (GBP). Además, ofrece la funcionalidad de crear listas personalizadas para guardar las criptomonedas que más te interesen, facilitando un acceso rápido a ellas.\nLa aplicación está construida con Angular, Ionic y PrimeNG, y utiliza Chart.js para ofrecer gráficos interactivos de tendencias de precios.\nCaracterísticas ✨\n\nConsulta en tiempo real: Obtén los precios actualizados de criptomonedas populares.\nMonedas de referencia: Visualiza los precios en diferentes monedas como EUR, USD y GBP.\nListas personalizadas: Crea y guarda tus listas personalizadas con criptomonedas para acceder rápidamente a ellas.\nGráficos interactivos: Visualiza la evolución del precio de las criptomonedas con gráficos dinámicos usando Chart.js 📊.\nSplash animado: La aplicación muestra un splash screen con animaciones interactivas creadas con Lottie para una experiencia de usuario atractiva 🎨.\nSoporte multilingüe: La aplicación está disponible en inglés y español, lo que permite a los usuarios elegir su idioma preferido 🌍.\nInterfaz fluida: Desarrollada con Angular y Ionic, garantizando una experiencia óptima tanto en dispositivos móviles como en escritorio 📱💻.\nReconocimiento de voz: Reconocimiento de voz disponible tanto en ordenador como para móviles.\n\nTecnologías 🛠️\n\nAngular: Framework principal para la creación de la aplicación web.\nIonic: Framework para el desarrollo de aplicaciones móviles multiplataforma (Android e iOS).\nStrapi: Usamos Strapi como backend para gestionar el contenido y las configuraciones de la aplicación. Strapi es un CMS de código abierto que permite la creación rápida de APIs RESTful y GraphQL, facilitando la integración de datos dinámicos en la app.\nFirebase: Usamos Firebase como backend para gestionar el contenido y las configuraciones de la aplicación. Firebase es una plataforma de desarrollo de Google que proporciona una base de datos en tiempo real y Firestore, permitiendo la creación rápida de API y \nla integración de datos dinámicos en la app. Además, ofrece servicios como autenticación, funciones en la nube y hosting, facilitando el desarrollo y escalabilidad de la aplicación.\nRender: La aplicación está desplegada en Render, una plataforma de despliegue en la nube que facilita la gestión de aplicaciones y bases de datos, permitiendo escalar de forma automática según las necesidades del proyecto ☁️.\nCloudinary: Para gestionar y almacenar imágenes y medios, utilizamos Cloudinary.\nPrimeNG: Biblioteca de componentes UI que proporciona una interfaz atractiva y fácil de usar.\nPlugin de Capacitor: Uso de plugin de capacitor para reconocimiento de voz.\nLottie: Usado para mostrar animaciones en el splash de la aplicación.\nChart.js: Biblioteca para generar gráficos interactivos de tendencias de precios.\nPipes y Directivas: Uso de pipes personalizados para el formateo de datos y directivas para mejorar la funcionalidad de la interfaz.\n\nEnlace para probar la aplicación 🔗\nLa aplicación está desplegada en Netlify y puedes probarla directamente haciendo clic en el siguiente enlace:\nCryptoWizzard en Netlify\nImagenes 📸\nLogin \n \n   \n \n\nRegister \n \n   \n \n\nPerfil\n \n   \n \n\nListas \n \n   \n \n\nActualizar Lista \n \n   \n \n\nInterior de lista \n \n   \n \n\nBuscador \n \n   \n \n\nHome \n \n   \n \n\nGráfica \n \n   \n \n\nEjemplo Android \n \n   \n \n\nEjemplo Iphone \n \n   \n \n\nSide Menu en móviles\n \n   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AboutPageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AboutPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AdminPanelPageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AdminPanelPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AppRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoviewPageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CryptoviewPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomePageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        HomePageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ListcontentPageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ListcontentPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ListPageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ListPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoginPageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        LoginPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfilePageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ProfilePageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegisterPageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RegisterPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchPageModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SearchPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SharedModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        SplashPageRoutingModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AboutPageModule\n\n\n\ncluster_AboutPageModule_declarations\n\n\n\ncluster_AboutPageModule_imports\n\n\n\ncluster_AdminPanelPageModule\n\n\n\ncluster_AdminPanelPageModule_declarations\n\n\n\ncluster_AdminPanelPageModule_imports\n\n\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_bootstrap\n\n\n\ncluster_CryptoviewPageModule\n\n\n\ncluster_CryptoviewPageModule_declarations\n\n\n\ncluster_CryptoviewPageModule_imports\n\n\n\ncluster_HomePageModule\n\n\n\ncluster_HomePageModule_declarations\n\n\n\ncluster_HomePageModule_imports\n\n\n\ncluster_ListcontentPageModule\n\n\n\ncluster_ListcontentPageModule_declarations\n\n\n\ncluster_ListcontentPageModule_imports\n\n\n\ncluster_ListPageModule\n\n\n\ncluster_ListPageModule_declarations\n\n\n\ncluster_ListPageModule_imports\n\n\n\ncluster_LoginPageModule\n\n\n\ncluster_LoginPageModule_declarations\n\n\n\ncluster_LoginPageModule_imports\n\n\n\ncluster_ProfilePageModule\n\n\n\ncluster_ProfilePageModule_declarations\n\n\n\ncluster_ProfilePageModule_imports\n\n\n\ncluster_RegisterPageModule\n\n\n\ncluster_RegisterPageModule_declarations\n\n\n\ncluster_RegisterPageModule_imports\n\n\n\ncluster_SearchPageModule\n\n\n\ncluster_SearchPageModule_declarations\n\n\n\ncluster_SearchPageModule_imports\n\n\n\ncluster_SharedModule\n\n\n\ncluster_SharedModule_declarations\n\n\n\ncluster_SharedModule_exports\n\n\n\n\nAboutPage\n\nAboutPage\n\n\n\nAboutPageModule\n\nAboutPageModule\n\nAboutPageModule -->\n\nAboutPage->AboutPageModule\n\n\n\n\n\nAboutPageRoutingModule\n\nAboutPageRoutingModule\n\nAboutPageModule -->\n\nAboutPageRoutingModule->AboutPageModule\n\n\n\n\n\nAdminPanelPage\n\nAdminPanelPage\n\n\n\nAdminPanelPageModule\n\nAdminPanelPageModule\n\nAdminPanelPageModule -->\n\nAdminPanelPage->AdminPanelPageModule\n\n\n\n\n\nAdminPanelPageRoutingModule\n\nAdminPanelPageRoutingModule\n\nAdminPanelPageModule -->\n\nAdminPanelPageRoutingModule->AdminPanelPageModule\n\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppComponent \n\nAppComponent \n\nAppComponent  -->\n\nAppModule->AppComponent \n\n\n\n\n\nAppRoutingModule\n\nAppRoutingModule\n\nAppModule -->\n\nAppRoutingModule->AppModule\n\n\n\n\n\nCryptoviewPage\n\nCryptoviewPage\n\n\n\nCryptoviewPageModule\n\nCryptoviewPageModule\n\nCryptoviewPageModule -->\n\nCryptoviewPage->CryptoviewPageModule\n\n\n\n\n\nBackgraphbuttonDirective\n\nBackgraphbuttonDirective\n\nCryptoviewPageModule -->\n\nBackgraphbuttonDirective->CryptoviewPageModule\n\n\n\n\n\nColorpercentDirective\n\nColorpercentDirective\n\nCryptoviewPageModule -->\n\nColorpercentDirective->CryptoviewPageModule\n\n\n\n\n\nSharedModule\n\nSharedModule\n\nSharedModule -->\n\nColorpercentDirective->SharedModule\n\n\n\n\n\nCryptoviewPageRoutingModule\n\nCryptoviewPageRoutingModule\n\nCryptoviewPageModule -->\n\nCryptoviewPageRoutingModule->CryptoviewPageModule\n\n\n\n\n\nCurrencyPipe\n\nCurrencyPipe\n\nCryptoviewPageModule -->\n\nCurrencyPipe->CryptoviewPageModule\n\n\n\n\n\nHomePageModule\n\nHomePageModule\n\nHomePageModule -->\n\nCurrencyPipe->HomePageModule\n\n\n\nSharedModule -->\n\nCurrencyPipe->SharedModule\n\n\n\n\n\nPercentformaterPipe\n\nPercentformaterPipe\n\nCryptoviewPageModule -->\n\nPercentformaterPipe->CryptoviewPageModule\n\n\n\nSharedModule -->\n\nPercentformaterPipe->SharedModule\n\n\n\n\n\nHomePage\n\nHomePage\n\nHomePageModule -->\n\nHomePage->HomePageModule\n\n\n\n\n\nHomePageRoutingModule\n\nHomePageRoutingModule\n\nHomePageModule -->\n\nHomePageRoutingModule->HomePageModule\n\n\n\nHomePageModule -->\n\nSharedModule->HomePageModule\n\n\n\n\n\nListcontentPageModule\n\nListcontentPageModule\n\nListcontentPageModule -->\n\nSharedModule->ListcontentPageModule\n\n\n\n\n\nListPageModule\n\nListPageModule\n\nListPageModule -->\n\nSharedModule->ListPageModule\n\n\n\n\n\nLoginPageModule\n\nLoginPageModule\n\nLoginPageModule -->\n\nSharedModule->LoginPageModule\n\n\n\n\n\nProfilePageModule\n\nProfilePageModule\n\nProfilePageModule -->\n\nSharedModule->ProfilePageModule\n\n\n\n\n\nRegisterPageModule\n\nRegisterPageModule\n\nRegisterPageModule -->\n\nSharedModule->RegisterPageModule\n\n\n\n\n\nSearchPageModule\n\nSearchPageModule\n\nSearchPageModule -->\n\nSharedModule->SearchPageModule\n\n\n\n\n\nAdminFormularyComponent \n\nAdminFormularyComponent \n\nAdminFormularyComponent  -->\n\nSharedModule->AdminFormularyComponent \n\n\n\n\n\nCryptocardComponent \n\nCryptocardComponent \n\nCryptocardComponent  -->\n\nSharedModule->CryptocardComponent \n\n\n\n\n\nCryptosimplecardComponent \n\nCryptosimplecardComponent \n\nCryptosimplecardComponent  -->\n\nSharedModule->CryptosimplecardComponent \n\n\n\n\n\nCustomGenderComponent \n\nCustomGenderComponent \n\nCustomGenderComponent  -->\n\nSharedModule->CustomGenderComponent \n\n\n\n\n\nFormularyComponent \n\nFormularyComponent \n\nFormularyComponent  -->\n\nSharedModule->FormularyComponent \n\n\n\n\n\nListcryptoComponent \n\nListcryptoComponent \n\nListcryptoComponent  -->\n\nSharedModule->ListcryptoComponent \n\n\n\n\n\nListformularyComponent \n\nListformularyComponent \n\nListformularyComponent  -->\n\nSharedModule->ListformularyComponent \n\n\n\n\n\nListcontentPage\n\nListcontentPage\n\nListcontentPageModule -->\n\nListcontentPage->ListcontentPageModule\n\n\n\n\n\nListcontentPageRoutingModule\n\nListcontentPageRoutingModule\n\nListcontentPageModule -->\n\nListcontentPageRoutingModule->ListcontentPageModule\n\n\n\n\n\nListPage\n\nListPage\n\nListPageModule -->\n\nListPage->ListPageModule\n\n\n\n\n\nListPageRoutingModule\n\nListPageRoutingModule\n\nListPageModule -->\n\nListPageRoutingModule->ListPageModule\n\n\n\n\n\nLoginPage\n\nLoginPage\n\nLoginPageModule -->\n\nLoginPage->LoginPageModule\n\n\n\n\n\nLoginPageRoutingModule\n\nLoginPageRoutingModule\n\nLoginPageModule -->\n\nLoginPageRoutingModule->LoginPageModule\n\n\n\n\n\nProfilePage\n\nProfilePage\n\nProfilePageModule -->\n\nProfilePage->ProfilePageModule\n\n\n\n\n\nProfilePageRoutingModule\n\nProfilePageRoutingModule\n\nProfilePageModule -->\n\nProfilePageRoutingModule->ProfilePageModule\n\n\n\n\n\nRegisterPage\n\nRegisterPage\n\nRegisterPageModule -->\n\nRegisterPage->RegisterPageModule\n\n\n\n\n\nRegisterPageRoutingModule\n\nRegisterPageRoutingModule\n\nRegisterPageModule -->\n\nRegisterPageRoutingModule->RegisterPageModule\n\n\n\n\n\nSearchPage\n\nSearchPage\n\nSearchPageModule -->\n\nSearchPage->SearchPageModule\n\n\n\n\n\nSearchPageRoutingModule\n\nSearchPageRoutingModule\n\nSearchPageModule -->\n\nSearchPageRoutingModule->SearchPageModule\n\n\n\n\n\nAdminFormularyComponent\n\nAdminFormularyComponent\n\nSharedModule -->\n\nAdminFormularyComponent->SharedModule\n\n\n\n\n\nCryptocardComponent\n\nCryptocardComponent\n\nSharedModule -->\n\nCryptocardComponent->SharedModule\n\n\n\n\n\nCryptosimplecardComponent\n\nCryptosimplecardComponent\n\nSharedModule -->\n\nCryptosimplecardComponent->SharedModule\n\n\n\n\n\nCustomGenderComponent\n\nCustomGenderComponent\n\nSharedModule -->\n\nCustomGenderComponent->SharedModule\n\n\n\n\n\nFormularyComponent\n\nFormularyComponent\n\nSharedModule -->\n\nFormularyComponent->SharedModule\n\n\n\n\n\nListcryptoComponent\n\nListcryptoComponent\n\nSharedModule -->\n\nListcryptoComponent->SharedModule\n\n\n\n\n\nListformularyComponent\n\nListformularyComponent\n\nSharedModule -->\n\nListformularyComponent->SharedModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        24 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    19 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    22 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Pipes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    3 Guards\n                \n            \n        \n        \n            \n                \n                    \n                    70 Interfaces\n                \n            \n        \n        \n            \n                \n                    \n                    \n                        33 Routes\n                    \n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : An Ionic project\n        \n            Homepage : https://ionicframework.com/\n        \n            Author : Ionic Framework\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/providedata.html":{"url":"interfaces/providedata.html","title":"interface - providedata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  providedata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/impl/authentication/firebase-auth-mapping.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface representing the provider data associated with the user.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            displayName\n                                        \n                                \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            phoneNumber\n                                        \n                                \n                                \n                                        \n                                            photoURL\n                                        \n                                \n                                \n                                        \n                                            providerId\n                                        \n                                \n                                \n                                        \n                                            uid\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        displayName\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        displayName:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        phoneNumber\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        phoneNumber:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        photoURL\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        photoURL:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        providerId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        providerId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        uid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        uid:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { LoginPayLoad, RegisterPayLoad } from \"src/app/core/models/auth.model\";\nimport { IAuthenticationMapping } from \"../../interfaces/authentication/auth-mapping.interface\";\nimport { User } from \"src/app/core/models/User.model\";\n\n/**\n * Interface representing the response returned from Firebase authentication login.\n */\nexport interface LoginResponse {\n    uid: string\n    email: string\n    emailVerified: boolean\n    isAnonymous: boolean\n    providerData: providedata[]\n    stsTokenManager: StsTokenManager\n    createdAt: string\n    lastLoginAt: string\n    apiKey: string\n    appName: string,\n    accessToken:string,\n    isAdmin:string\n}\n\n/**\n * Interface representing the provider data associated with the user.\n */\nexport interface providedata {\n    providerId: string\n    uid: string\n    displayName: any\n    email: string\n    phoneNumber: any\n    photoURL: any\n}\n\n/**\n * Interface representing the Firebase security token manager info.\n */\nexport interface StsTokenManager {\n    refreshToken: string\n    accessToken: string\n    expirationTime: number\n}\n\n/**\n * Service that maps Firebase authentication payloads and responses to the app's User model.\n * \n * Implements IAuthenticationMapping interface to convert between backend responses and frontend models.\n */\nexport class FirebaseAuthMappingService implements IAuthenticationMapping{\n    /**\n     * Maps a login payload to a User model.\n     * Currently not implemented.\n     * @param payload - Login data from frontend.\n     * @throws Error\n     */\n    Login(payload: LoginPayLoad):User {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps a registration payload to a User model.\n     * Currently not implemented.\n     * @param payload - Registration data from frontend.\n     * @throws Error\n     */\n    Register(payload: RegisterPayLoad) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps a Firebase LoginResponse to a User model.\n     * @param response - The Firebase login response object.\n     * @returns User model populated with Firebase response data.\n     */\n    LoginResponse(response: LoginResponse):User {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:\"xd\",\n            gender:\"male\",\n            isAdmin:response.isAdmin\n        }\n    }\n\n    /**\n     * Maps a Firebase registration response to a User model.\n     * @param response - The Firebase registration response.\n     * @param name - User's username.\n     * @param gender - User's gender.\n     * @returns User model populated with Firebase response data and provided user info.\n     */\n    RegisterResponse(response: LoginResponse,name:string,gender:string) {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:name,\n            gender:gender,\n            isAdmin:false\n        }\n    }\n\n    /**\n     * Maps a Firebase user retrieval response to a User model.\n     * @param response - The Firebase user response.\n     * @param token - Authentication token (not currently used).\n     * @returns User model populated with Firebase response data.\n     */\n    GetUserResponse(response: LoginResponse, token: string) {\n        return {\n            id:response.uid,\n            email:response.email,\n            token:response.accessToken,\n            username:\"xd\",\n            gender:\"male\",\n            isAdmin:response.isAdmin\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/rawbasiclist.html":{"url":"interfaces/rawbasiclist.html","title":"interface - rawbasiclist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  rawbasiclist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/Firebase-User-Mapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            cryptos\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cryptos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cryptos:     cryptosxd[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     cryptosxd[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { CryptoList, BasicList } from \"src/app/core/models/CryptoList.model\";\nimport { LoginResponse } from \"src/app/core/services/impl/authentication/firebase-auth-mapping.service\";\n\nexport interface rawbasiclist {\n    id:string,\n    description: string,\n    title: string,\n    cryptos?:cryptosxd[]\n}\nexport interface cryptosxd {\n    id:string,\n    symbol: string\n    name: string\n}\n\n/**\n * Mapping service responsible for converting raw Firebase user data\n * into application models and vice versa.\n * \n * Implements IUserBaseMapping interface for user-related data transformation.\n */\n@Injectable({\n    providedIn: 'root'\n})\nexport class FirebaseUserMapping implements IUserBaseMapping{\n    /**\n     * Maps an array of raw user lists from Firebase into CryptoList models.\n     * \n     * @param data Raw user list data array.\n     * @returns Array of CryptoList objects mapped from the raw data.\n     */\n    GetListFromUser(data: rawbasiclist[]): CryptoList[] {\n        let listafinal:CryptoList[]=data.map(c=>{\n            return {\n                id:c.id,\n                title:c.title,\n                description:c.description,\n                cryptos:c.cryptos?.map(x=>{\n                    return {\n                        id:x.id,\n                        symbol:x.symbol,\n                        name:x.name\n                    }\n                })??[]\n            }\n        })\n        return listafinal\n    }\n\n    addlistUser(data: any, iduser: string) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Maps the response data when adding a new list for a user.\n     * \n     * @param data Raw response data from adding a list.\n     * @returns BasicList model constructed from the response.\n     */\n    addlistUserResponse(data: any): BasicList {\n        return {\n            id:data.id,\n            title:data.title,\n            description:data.description\n        }\n    }\n\n    updatelistbody(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    deletecryptofromlist(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    findcryptobyidresponse(data: any, idcrypto: string) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptotodatabase(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptoresponse(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    addcryptotolist(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    updateuserdata(data: any) {\n        throw new Error(\"Method not implemented.\");\n    }\n\n    /**\n     * Constructs a BasicUser model from login response and optional user details.\n     * \n     * @param data LoginResponse object containing Firebase authentication data.\n     * @param name Optional username.\n     * @param gender Optional user gender.\n     * @param image Optional user image URL.\n     * @param isAdmin Optional flag indicating if the user has admin privileges.\n     * @returns BasicUser model constructed from the provided data.\n     */\n    GetBasicUser(data: LoginResponse,name?:string,gender?:string,image?:string,isAdmin?:boolean):BasicUser {\n        return {\n            username:name!,\n            email:data.email,\n            id:data.uid,\n            gender:gender!,\n            img:image??\"\",\n            isAdmin:isAdmin??false\n        }\n    }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"routes.html":{"url":"routes.html","title":"routes - routes","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Routes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/updateCryptoData.html":{"url":"interfaces/updateCryptoData.html","title":"interface - updateCryptoData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  updateCryptoData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            cryptos\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        cryptos\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        cryptos:         updateCryptos\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         updateCryptos\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/updateCryptoId.html":{"url":"interfaces/updateCryptoId.html","title":"interface - updateCryptoId","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  updateCryptoId\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/updateCryptos.html":{"url":"interfaces/updateCryptos.html","title":"interface - updateCryptos","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  updateCryptos\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            connect\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        connect\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        connect:     updateCryptoId[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     updateCryptoId[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/updatecryptofromfavoritelist.html":{"url":"interfaces/updatecryptofromfavoritelist.html","title":"interface - updatecryptofromfavoritelist","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  updatecryptofromfavoritelist\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         updateCryptoData\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         updateCryptoData\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/updateuser.html":{"url":"interfaces/updateuser.html","title":"interface - updateuser","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  updateuser\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/repositories/impl/user/StrapiUserMapping.service.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            gender\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            image\n                                        \n                                \n                                \n                                        \n                                            password\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        gender\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        gender:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        image\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        image:         any\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         any\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        password\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        password:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from \"@angular/core\";\nimport { IUserBaseMapping } from \"../../interfaces/user/UserBaseMapping.interface\";\nimport { BasicUser, User } from \"src/app/core/models/User.model\";\nimport { BasicList, CryptoList } from \"src/app/core/models/CryptoList.model\";\nimport { BasicCrypto } from \"src/app/core/models/Crypto.model\";\n\nexport interface GetAllList {\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    favoritelists: Favoritelist[]\n  }\n  \n  export interface Favoritelist {\n    id: number\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    cryptos: Crypto[]\n  }\n  \n  export interface Crypto {\n    id: number\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n\n  export interface createListRemote{\n    data:BodyCreateList\n  }\n  \n  export interface BodyCreateList{\n    Title:string,\n    Description:string,\n    users_permissions_user:number\n  }\n\n  export interface addlistresponse {\n    data: Data\n    meta: Meta\n  }\n  \n  export interface Data {\n    id: number\n    attributes: Attributes\n  }\n  \n  export interface Attributes {\n    Title: string\n    Description: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n  }\n  \n  export interface Meta {}\n\n  export interface CreateListUpdate{\n    data:bodyupdate\n  }\n  export interface bodyupdate{\n    Title:string,\n    Description:string\n  }\n\n  export interface deletecryptofromfavoritelist{\n    data:datadelete\n  }\n\n  export interface datadelete{\n    cryptos:cryptos\n  }\n  export interface cryptos{\n    disconnect:cryptoid[]\n  }\n  export interface cryptoid{\n    id:string\n  }\n  export interface getallresponse {\n    data: Data2[]\n    meta: any\n  }\n  \n  export interface Data2 {\n    id: number\n    attributes: Attributes2\n  }\n  export interface Attributes2 {\n    cryptoId: string\n    createdAt: string\n    updatedAt: string\n    publishedAt: string\n    Name: string\n    symbol: string\n  }\n  export interface addcrypto{\n    data:cryptoxd\n  }\n  export interface cryptoxd{\n    cryptoId:string,\n    Name:string,\n    symbol:string\n  }\n  export interface updatecryptofromfavoritelist{\n    data:updateCryptoData\n  }\n  export interface updateCryptoData{\n    cryptos:updateCryptos\n  }\n  export interface updateCryptos{\n    connect:updateCryptoId[]\n  }\n  export interface updateCryptoId{\n    id:number\n  }\n  export interface updateuser{\n    id:string\n    email:string,\n    password:string,\n    username:string,\n    gender:string,\n    image:any\n  }\n\n  export interface basicuseresponse{\n    id: number\n    username: string\n    email: string\n    provider: string\n    confirmed: boolean\n    blocked: boolean\n    createdAt: string\n    updatedAt: string\n    image: Image\n  }\n  export interface Image {\n    id: number\n    name: string\n    alternativeText: any\n    caption: any\n    width: number\n    height: number\n    formats: Formats\n    hash: string\n    ext: string\n    mime: string\n    size: number\n    url: string\n    previewUrl: any\n    provider: string\n    provider_metadata: any\n    createdAt: string\n    updatedAt: string\n  }\n  export interface Formats {\n    large: any\n    small: Small\n    medium: any\n    thumbnail: Thumbnail\n  }\n  export interface Thumbnail {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n  export interface Small {\n    ext: string\n    url: string\n    hash: string\n    mime: string\n    name: string\n    path: any\n    size: number\n    width: number\n    height: number\n    provider_metadata: any\n  }\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class StrapiUserMapping implements IUserBaseMapping{\n  /**\n   * Maps the raw response data to an array of CryptoList objects.\n   * @param data The response containing user favorite lists.\n   * @returns Array of CryptoList mapped from the response.\n   */\n  GetListFromUser(data: GetAllList): CryptoList[] {\n      return data.favoritelists.map(c=>{\n          return {\n              id:c.id+\"\",\n              title:c.Title,\n              description:c.Description,\n              cryptos:c.cryptos.map(x=>{\n                  return {\n                      id:\"\"+x.cryptoId, \n                      name:x.Name, \n                      symbol:x.symbol}\n              })\n          }\n      })\n  }\n\n  /**\n   * Prepares the request body to create a new favorite list for a user.\n   * @param data The CryptoList data to add.\n   * @param iduser The user ID.\n   * @returns The formatted request body for list creation.\n   */\n  addlistUser(data:CryptoList,iduser:string):createListRemote{\n      return {\n          data:{\n              Title:data.title,\n              Description:data.description,\n              users_permissions_user:parseInt(iduser)\n          }\n      }\n  }\n\n  /**\n   * Maps the server response after adding a list to a BasicList object.\n   * @param data Response from add list request.\n   * @returns BasicList with title, description, and id.\n   */\n  addlistUserResponse(data: addlistresponse): BasicList {\n    return {title:data.data.attributes.Title, description:data.data.attributes.Description, id:data.data.id+\"\"}\n  }\n\n  /**\n   * Prepares the request body for updating a favorite list.\n   * @param data The BasicList data with updates.\n   * @returns The formatted request body for list update.\n   */\n  updatelistbody(data:BasicList):CreateListUpdate{\n    return {\n      data:{\n        Title:data.title,\n        Description:data.description\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to remove a crypto from a favorite list.\n   * @param data The crypto ID to disconnect.\n   * @returns The formatted request body to remove crypto.\n   */\n  deletecryptofromlist(data: string):deletecryptofromfavoritelist {\n    return {\n      data:{\n        cryptos:{\n          disconnect:[{id:data}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Extracts the crypto ID from the response filtering by cryptoId.\n   * @param data The response data containing cryptos.\n   * @param cryptoid The crypto ID to find.\n   * @returns The found crypto ID or -1 if not found.\n   */\n  findcryptobyidresponse(data: getallresponse,cryptoid:string) {\n    let filter=data.data.filter(c=>c.attributes.cryptoId==cryptoid)\n    if(filter.length>=1){\n      return filter[0].id;\n    }else{\n      return -1\n    }\n  }\n\n  /**\n   * Maps the response from adding a crypto to the database to BasicCrypto.\n   * @param data The response data.\n   * @returns BasicCrypto with id, name, and symbol.\n   */\n  addcryptoresponse(data: any):BasicCrypto {\n    return {\n      id:data.data.attributes.cryptoId,\n      name:data.data.attributes.Name,\n      symbol:data.data.attributes.symbol\n    }\n  }\n\n  /**\n   * Prepares the request body to add a crypto to the database.\n   * @param data The BasicCrypto to add.\n   * @returns The formatted request body.\n   */\n  addcryptotodatabase(data: BasicCrypto):addcrypto {\n    return {data:{\n      cryptoId:data.id,\n      symbol:data.symbol,\n      Name:data.name\n    }}\n  }\n\n  /**\n   * Prepares the request body to add a crypto to a favorite list.\n   * @param id The crypto ID to connect.\n   * @returns The formatted request body.\n   */\n  addcryptotolist(id:string):updatecryptofromfavoritelist{\n    return {\n      data:{\n        cryptos:{\n          connect:[{id:parseInt(id)}]\n        }\n      }\n    }\n  }\n\n  /**\n   * Prepares the request body to update user data.\n   * @param data Object containing user data to update.\n   * @returns Object with updated fields.\n   */\n  updateuserdata(data: updateuser) {\n    let value:any={}\n    \n    if(data.email!=undefined){\n      value.email=data.email\n      return {email:data.email,gender:data.gender,username:data.username}\n    }\n    if(data.password!=undefined){\n      value.password=data.email\n      return {password:data.password}\n    }\n    \n    if(data.image!=null){\n      return {image:data.image}\n    }\n    return value\n  }\n\n  /**\n   * Maps the raw user data response to BasicUser model.\n   * @param data The raw user data.\n   * @returns BasicUser object with user info.\n   */\n  GetBasicUser(data:any):BasicUser{\n    if(data.image!=undefined){\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:data.image.url,\n        isAdmin:data.isAdmin??false\n      }\n    }else{\n      return {\n        gender:data.gender,\n        id:\"\"+data.id,\n        email:data.email,\n        username:data.username,\n        img:\"\",\n        isAdmin:data.isAdmin??false\n      }\n    }\n  }\n}\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AUTENTICATION_URL_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            AUTH_MAPPING_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            AUTH_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            AuthenticationMappingServiceFactory   (src/.../factory.ts)\n                        \n                        \n                            AuthenticationServiceFactory   (src/.../factory.ts)\n                        \n                        \n                            BACKEND_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            config   (capacitor.config.ts)\n                        \n                        \n                            CRYPTO_API_URL_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            CRYPTO_MAPPING_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            CRYPTO_REPOSITORY_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            CRYPTO_SERVICE_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            cryptofactoryservice   (src/.../factory.ts)\n                        \n                        \n                            CRYPTOTOKEN_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            FIREBASE_COLLECTION_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            FIREBASE_CONFIG_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            FIREBASE_MAIN_SERVICE   (src/.../repository.tokens.ts)\n                        \n                        \n                            LOGIN_API_URL_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            MEDIA_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            MediaServiceFactory   (src/.../factory.ts)\n                        \n                        \n                            REGISTER_API_URL_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            UPLOAD_API_URL_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            USER_API_URL_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            USER_CSV_URL_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            USER_MAPPING_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            USER_REPOSITORY_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            USER_SERVICE_TOKEN   (src/.../repository.tokens.ts)\n                        \n                        \n                            userfactoryservice   (src/.../factory.ts)\n                        \n                        \n                            UserMappingFactory   (src/.../factory.ts)\n                        \n                        \n                            UserServiceFactory   (src/.../factory.ts)\n                        \n                        \n                            webkitSpeechRecognition   (src/.../search.page.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/repositories/repository.tokens.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AUTENTICATION_URL_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('AUTENTICATION_URL_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_MAPPING_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('AUTH_MAPPING_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AUTH_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('AUTH_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BACKEND_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('BACKEND_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CRYPTO_API_URL_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('CRYPTO_API_URL_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CRYPTO_MAPPING_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('CRYPTO_MAPPING_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CRYPTO_REPOSITORY_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>(\"CRYPTO_REPOSITORY_TOKEN\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CRYPTO_SERVICE_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>(\"CRYPTO_SERVICE_TOKEN\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CRYPTOTOKEN_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken(\"CRYPTOTOKEN_TOKEN\")\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FIREBASE_COLLECTION_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('FIREBASE_COLLECTION_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FIREBASE_CONFIG_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('FIREBASE_CONFIG_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FIREBASE_MAIN_SERVICE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('FIREBASE_MAIN_SERVICE')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LOGIN_API_URL_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('LOGIN_API_URL_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MEDIA_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('UPLOAD_API_URL_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        REGISTER_API_URL_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('REGISTER_API_URL_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UPLOAD_API_URL_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('UPLOAD_API_URL_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_API_URL_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('PEOPLE_API_URL_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_CSV_URL_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('USER_CSV_URL_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_MAPPING_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('USER_MAPPING_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_REPOSITORY_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('USER_REPOSITORY_TOKEN')\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        USER_SERVICE_TOKEN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('USER_SERVICE_TOKEN')\n                    \n                \n\n\n        \n    \n\n    src/app/core/repositories/factory.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AuthenticationMappingServiceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: AUTH_MAPPING_TOKEN,\n  useFactory: (backend:string) => {\n    switch(backend){\n      case 'http':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'local-storage':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'json-server':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'strapi':\n        return new StrapiAuthMappingService();\n      case 'firebase':\n        return new FirebaseAuthMappingService();\n      default:\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n    }\n  },\ndeps: [BACKEND_TOKEN]\n}\n                    \n                \n\n            \n                \n                    Factory provider for authentication mapping services.\nProvides the appropriate authentication mapping implementation\ndepending on the configured backend.\nDependencies injected:\n\nBACKEND_TOKEN: The backend type to use ('strapi', 'firebase', etc.).\n\nBackend implementations:\n\n'strapi': Returns an instance of StrapiAuthMappingService.\n'firebase': Returns an instance of FirebaseAuthMappingService.\nOther backends: Throws \"BACKEND NOT IMPLEMENTED\" error.\n\nProvided token: AUTH_MAPPING_TOKEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        AuthenticationServiceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: AUTH_TOKEN,\n  useFactory: (backend:string,httpclient:HttpClient,userapiurl:string,loginapiurl:string,registerapiurl:string,authenticationurl:string,authenticationmapping:IAuthenticationMapping,firebasemainservice:IFirebaseMainService) => {\n    switch(backend){\n      case 'http':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'local-storage':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'json-server':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'strapi':\n        return new StrapiAutenticationService(httpclient,userapiurl,loginapiurl,registerapiurl,authenticationurl,authenticationmapping);\n      case 'firebase':\n        return new FirebaseAuthenticationService(httpclient,userapiurl,loginapiurl,registerapiurl,authenticationurl,authenticationmapping,firebasemainservice);\n      default:\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n    }\n  },\ndeps: [BACKEND_TOKEN,HttpClient,USER_API_URL_TOKEN,LOGIN_API_URL_TOKEN,REGISTER_API_URL_TOKEN,AUTENTICATION_URL_TOKEN,AUTH_MAPPING_TOKEN,FIREBASE_MAIN_SERVICE]\n}\n                    \n                \n\n            \n                \n                    Factory provider for authentication services.\nProvides an implementation of the authentication service depending on the backend specified.\nDependencies injected:\n\nBACKEND_TOKEN: The backend type to use ('strapi', 'firebase', etc.).\nHttpClient: Angular's HTTP client for making HTTP requests.\nUSER_API_URL_TOKEN: URL endpoint for user-related API calls.\nLOGIN_API_URL_TOKEN: URL endpoint for login API calls.\nREGISTER_API_URL_TOKEN: URL endpoint for user registration API calls.\nAUTENTICATION_URL_TOKEN: General authentication-related URL endpoint.\nAUTH_MAPPING_TOKEN: Interface implementation for authentication data mapping.\nFIREBASE_MAIN_SERVICE: Firebase main service interface (used only in Firebase backend).\n\nBackend implementations:\n\n'strapi': Returns an instance of StrapiAutenticationService.\n'firebase': Returns an instance of FirebaseAuthenticationService.\nOther backends: Throws \"BACKEND NOT IMPLEMENTED\" error.\n\nProvided token: AUTH_TOKEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cryptofactoryservice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide:CRYPTO_REPOSITORY_TOKEN,\n    deps:[BACKEND_TOKEN,HttpClient,CRYPTO_API_URL_TOKEN,CRYPTO_MAPPING_TOKEN,CRYPTOTOKEN_TOKEN],\n    useFactory:(backend:string,httpclient:HttpClient,apiurltoken:string,mapping:ICryptoBaseMapping,cryptoken:string)=>{\n        switch(backend){\n          case 'http':\n            throw new Error(\"BACKEND NOT IMPLEMENTED\");\n          case 'local-storage':\n            throw new Error(\"BACKEND NOT IMPLEMENTED\");\n          case 'json-server':\n            throw new Error(\"BACKEND NOT IMPLEMENTED\");\n          case 'strapi':\n            return createCoinGekorepository(httpclient,apiurltoken,mapping,cryptoken)\n          case 'firebase':\n            return createCoinGekorepository(httpclient,apiurltoken,mapping,cryptoken)\n            default:\n            throw new Error(\"BACKEND NOT IMPLEMENTED\");\n        }\n    }\n}\n                    \n                \n\n            \n                \n                    Factory provider for the cryptocurrency repository.\nDepending on the configured backend, this factory returns an instance\nof the appropriate crypto repository implementation.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MediaServiceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide: BaseMediaService,\n    useFactory: (backend:string, upload:string, auth:IAuthenticationService, http:HttpClient,firebasemainservice:IFirebaseMainService) => {\n      switch(backend){\n        case 'http':\n          throw new Error(\"BACKEND NOT IMPLEMENTED\");\n        case 'local-storage':\n          throw new Error(\"BACKEND NOT IMPLEMENTED\");\n        case 'json-server':\n          throw new Error(\"BACKEND NOT IMPLEMENTED\");\n        case 'strapi':\n          return new StrapiMediaService(upload, auth, http);\n        case 'firebase':\n          return new FirebaseMediaService(upload,auth,http,firebasemainservice)\n        default:\n          throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      }\n    },\n  deps: [BACKEND_TOKEN,UPLOAD_API_URL_TOKEN, AUTH_TOKEN, HttpClient,FIREBASE_MAIN_SERVICE]\n}\n                    \n                \n\n            \n                \n                    Factory provider for the media service.\nCreates and provides an instance of a media service depending on the configured backend.\nDependencies injected:\n\nBACKEND_TOKEN: Defines which backend to use ('strapi', 'firebase', etc.).\nUPLOAD_API_URL_TOKEN: The upload API URL or endpoint.\nAUTH_TOKEN: The authentication service used for authorized requests.\nHttpClient: Angular's HTTP client for making HTTP requests.\nFIREBASE_MAIN_SERVICE: Firebase main service interface (used if backend is Firebase).\n\nBackend implementations:\n\n'strapi': Returns an instance of StrapiMediaService.\n'firebase': Returns an instance of FirebaseMediaService.\nOther backends: Throws \"BACKEND NOT IMPLEMENTED\" error.\n\nProvided token: BaseMediaService\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userfactoryservice\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n    provide:USER_REPOSITORY_TOKEN,\n    deps:[BACKEND_TOKEN,HttpClient,USER_API_URL_TOKEN,USER_MAPPING_TOKEN,FIREBASE_MAIN_SERVICE],\n    useFactory:(backend:string,httpclient:HttpClient,apiurltoken:string,mapping:IUserBaseMapping,firebasemainservice:IFirebaseMainService,functions: AngularFireFunctions)=>{\n      switch(backend){\n        case 'http':\n          throw new Error(\"BACKEND NOT IMPLEMENTED\");\n        case 'local-storage':\n          throw new Error(\"BACKEND NOT IMPLEMENTED\");\n        case 'json-server':\n          throw new Error(\"BACKEND NOT IMPLEMENTED\");\n        case 'strapi':\n          return createStrapiRepository(httpclient,apiurltoken,mapping)\n        case 'firebase':\n          return new FirebaseUserRepository(httpclient,apiurltoken,mapping,firebasemainservice,functions)\n        default:\n          throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      }\n    }\n}\n                    \n                \n\n            \n                \n                    Factory provider for the user repository.\nIt dynamically creates and provides the appropriate user repository implementation\nbased on the configured backend type.\nDependencies injected:\n\nBACKEND_TOKEN: Defines which backend to use ('strapi', 'firebase', etc.).\nHttpClient: Angular's HTTP client for making HTTP requests.\nUSER_API_URL_TOKEN: The base API URL for user-related endpoints.\nUSER_MAPPING_TOKEN: Mapping service to convert API data into user domain models.\nFIREBASE_MAIN_SERVICE: Firebase service interface (used if backend is Firebase).\nAngularFireFunctions: Firebase cloud functions client (used if backend is Firebase).\n\nBackend handling:\n\n'strapi': Returns a StrapiUserRepository instance.\n'firebase': Returns a FirebaseUserRepository instance.\nOther backends: Throws \"BACKEND NOT IMPLEMENTED\" error.\n\nProvided token: USER_REPOSITORY_TOKEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserMappingFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: USER_MAPPING_TOKEN,\n  useFactory: (backend:string) => {\n    switch(backend){\n      case 'http':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'local-storage':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'json-server':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'strapi':\n        return new StrapiUserMapping();\n      case 'firebase':\n        return new FirebaseUserMapping();\n      default:\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n    }\n  },\ndeps: [BACKEND_TOKEN]\n}\n                    \n                \n\n            \n                \n                    Factory provider for user mapping services.\nProvides an implementation of user mapping based on the configured backend.\nDependencies injected:\n\nBACKEND_TOKEN: Specifies which backend to use ('strapi', 'firebase', etc.).\n\nBackend implementations:\n\n'strapi': Returns an instance of StrapiUserMapping.\n'firebase': Returns an instance of FirebaseUserMapping.\nOther backends: Throws \"BACKEND NOT IMPLEMENTED\" error.\n\nProvided token: USER_MAPPING_TOKEN\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        UserServiceFactory\n                        \n                    \n                \n            \n                \n                    \n                        Type :     FactoryProvider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: USER_SERVICE_TOKEN,\n  useFactory: (backend:string,repository:IUserbaseRepositoy,authentication:IAuthenticationService,userCsvUrl:string,http:HttpClient) => {\n    switch(backend){\n      case 'http':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'local-storage':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'json-server':\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n      case 'strapi':\n        return new UserStrapiService(repository,authentication,userCsvUrl,http);\n      case 'firebase':\n        return new UserFirebaseService(repository,authentication,userCsvUrl,http);\n      default:\n        throw new Error(\"BACKEND NOT IMPLEMENTED\");\n    }\n  },\ndeps: [BACKEND_TOKEN,USER_REPOSITORY_TOKEN,AUTH_TOKEN, USER_CSV_URL_TOKEN,HttpClient]\n}\n                    \n                \n\n            \n                \n                    Factory provider for user services.\nProvides an implementation of the user service based on the configured backend.\nDependencies injected:\n\nBACKEND_TOKEN: Specifies which backend to use ('strapi', 'firebase', etc.).\nUSER_REPOSITORY_TOKEN: User repository interface implementation.\nAUTH_TOKEN: Authentication service interface implementation.\nUSER_CSV_URL_TOKEN: URL for user CSV data.\nHttpClient: Angular's HTTP client for making HTTP requests.\n\nBackend implementations:\n\n'strapi': Returns an instance of UserStrapiService.\n'firebase': Returns an instance of UserFirebaseService.\nOther backends: Throws \"BACKEND NOT IMPLEMENTED\" error.\n\nProvided token: USER_SERVICE_TOKEN\n\n                \n            \n\n        \n    \n\n    capacitor.config.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        config\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CapacitorConfig\n\n                    \n                \n                \n                    \n                        Default value : {\n  appId: 'io.ionic.starter',\n  appName: 'CryptoWizzard-Ionic',\n  webDir: 'www'\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n  userapiurl: \"https://tasks-7l1r.onrender.com/api/\",\n  userapilogin: \"https://tasks-7l1r.onrender.com/api/auth/local\",\n  registerapiurl: \"https://tasks-7l1r.onrender.com/api/auth/local/register\",\n  authenticationurl: \"https://tasks-7l1r.onrender.com/api/users/me\",\n  uploadapi: \"https://tasks-7l1r.onrender.com/api/upload\",\n  cryptoapiurl:\"https://api.coingecko.com/api/v3/\",\n  cryptoken:\"\",\n  userCsv:\"https://cryptowizzard-tfg.onrender.com/export-users\"\n}\n                    \n                \n\n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  userapiurl:\"http://localhost:1337/api/\",\n  userapilogin:\"http://localhost:1337/api/auth/local\",\n  registerapiurl:\"http://localhost:1337/api/auth/local/register\",\n  authenticationurl:\"http://localhost:1337/api/users/me\",\n  uploadapi:\"http://localhost:1337/api/upload\",\n  cryptoapiurl:\"https://api.coingecko.com/api/v3/\",\n  cryptoken:\"\",\n  userCsv:\"https://cryptowizzard-tfg.onrender.com/export-users\"\n}\n                    \n                \n\n\n        \n    \n\n    src/app/pages/General/search/search.page.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        webkitSpeechRecognition\n                        \n                    \n                \n            \n                \n                    \n                        Type :         any\n\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
